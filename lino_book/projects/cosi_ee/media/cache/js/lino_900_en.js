/*
 Copyright 2009-2014 Luc Saffre
 This file is part of the Lino project.
 Lino is free software; you can redistribute it and/or modify 
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.
 Lino is distributed in the hope that it will be useful, 
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 GNU Lesser General Public License for more details.
 You should have received a copy of the GNU Lesser General Public License
 along with Lino; if not, see <http://www.gnu.org/licenses/>.
*/

// lino.js --- generated Sat Jun 28 14:50:28 2014 by Lino version 1.6.14.
Ext.BLANK_IMAGE_URL = '/media/extjs/resources/images/default/s.gif';
LANGUAGE_CHOICES = [ [ "en", "English" ], [ "et", "Estonian" ] ];
MEDIA_URL = "/media";

// hack to add a toCamel function, inspired by
// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
String.prototype.toCamel = function(){
  //~ return this.replace(/(\-[a-z])/g, function($1){return $1.toUpperCase().replace('-','');});
  //~ return this;
  return this.replace(/([A-Z])([A-Z]+)/g, function(match,p1,p2,offset,string){
      //~ console.log("20131005 got ",arguments);
      return p1 + p2.toLowerCase();});
};



/* MonthPickerPlugin: thanks to keypoint @ sencha forum
   http://www.sencha.com/forum/showthread.php?74002-3.x-Ext.ux.MonthMenu&p=356860#post356860
*/
Ext.namespace('Ext.ux'); 

Ext.ux.MonthPickerPlugin = function() { 
    var picker; 
    var oldDateDefaults; 

    this.init = function(pk) { 
        picker = pk; 
        picker.onTriggerClick = picker.onTriggerClick.createSequence(onClick); 
        picker.getValue = picker.getValue.createInterceptor(setDefaultMonthDay).createSequence(restoreDefaultMonthDay); 
        picker.beforeBlur = picker.beforeBlur.createInterceptor(setDefaultMonthDay).createSequence(restoreDefaultMonthDay); 
    }; 

    function setDefaultMonthDay() { 
        oldDateDefaults = Date.defaults.d; 
        Date.defaults.d = 1; 
        return true; 
    } 

    function restoreDefaultMonthDay(ret) { 
        Date.defaults.d = oldDateDefaults; 
        return ret; 
    } 

    function onClick(e, el, opt) { 
        var p = picker.menu.picker; 
        p.activeDate = p.activeDate.getFirstDateOfMonth(); 
        if (p.value) { 
            p.value = p.value.getFirstDateOfMonth(); 
        } 

        p.showMonthPicker(); 
         
        if (!p.disabled) { 
            p.monthPicker.stopFx(); 
            p.monthPicker.show(); 

            p.mun(p.monthPicker, 'click', p.onMonthClick, p); 
            p.mun(p.monthPicker, 'dblclick', p.onMonthDblClick, p); 
            p.onMonthClick = p.onMonthClick.createSequence(pickerClick); 
            p.onMonthDblClick = p.onMonthDblClick.createSequence(pickerDblclick); 
            p.mon(p.monthPicker, 'click', p.onMonthClick, p); 
            p.mon(p.monthPicker, 'dblclick', p.onMonthDblClick, p); 
        } 
    } 

    function pickerClick(e, t) { 
        var el = new Ext.Element(t); 
        if (el.is('button.x-date-mp-cancel')) { 
            picker.menu.hide(); 
        } else if(el.is('button.x-date-mp-ok')) { 
            var p = picker.menu.picker; 
            p.setValue(p.activeDate); 
            p.fireEvent('select', p, p.value); 
        } 
    } 

    function pickerDblclick(e, t) { 
        var el = new Ext.Element(t); 
        if (el.parent() 
            && (el.parent().is('td.x-date-mp-month') 
            || el.parent().is('td.x-date-mp-year'))) { 

            var p = picker.menu.picker; 
            p.setValue(p.activeDate); 
            p.fireEvent('select', p, p.value); 
        } 
    } 
}; 

Ext.preg('monthPickerPlugin', Ext.ux.MonthPickerPlugin);  


/**
JC Watsons solution (adapted to ExtJS 3.3.1 by LS) is elegant and simple:
`A "fix" for unchecked checkbox submission  behaviour
<http://www.sencha.com/forum/showthread.php?28449>`_

Added special handling for checkbox inputs. 
ExtJS defines disabled checkboxes `readonly`, not `disabled` as for other inputs.

*/
Ext.lib.Ajax.serializeForm = function(form) {
    //~ console.log('20120203 linolib.js serializeForm',form);
    var fElements = form.elements || (document.forms[form] || Ext.getDom(form)).elements, 
        hasSubmit = false, 
        encoder = encodeURIComponent, 
        name, 
        data = '', 
        type, 
        hasValue;

    Ext.each(fElements, function(element){
        name = element.name;
        type = element.type;

        if (!element.disabled && name && !(type == 'checkbox' && element.readonly)) {
            if (/select-(one|multiple)/i.test(type)) {
                Ext.each(element.options, function(opt){
                    if (opt.selected) {
                        hasValue = opt.hasAttribute ? opt.hasAttribute('value') : opt.getAttributeNode('value').specified;
                        data += String.format("{0}={1}&", encoder(name), encoder(hasValue ? opt.value : opt.text));
                    }
                });
            } else if (!(/file|undefined|reset|button/i.test(type))) {
                //~ if (!(/radio|checkbox/i.test(type) && !element.checked) && !(type == 'submit' && hasSubmit)) {
                if (!(type == 'submit' && hasSubmit)) {
                    if (type == 'checkbox') {
                        //~ console.log('20111001',element,'data += ',encoder(name) + '=' + (element.checked ? 'on' : 'off') + '&');
                        data += encoder(name) + '=' + (element.checked ? 'on' : 'off') + '&';
                    } else {
                        //~ console.log('20111001',element,'data += ',encoder(name) + '=' + encoder(element.value) + '&');
                        data += encoder(name) + '=' + encoder(element.value) + '&';
                    }
                    hasSubmit = /submit/i.test(type);
                }
            }
        //~ } else {
            //~ console.log(name,type,element.readonly);
        }
    });
    return data.substr(0, data.length - 1);
};



/*
Set a long timeout of fifteen minutes. 
See /blog/2012/0307
*/
Ext.Ajax.timeout = 15 * 60 * 1000; 

/*
 * Thanks to 
 * `huuze <http://stackoverflow.com/users/10040/huuuze>`_ for the question
 * and to 
 * `chrisv <http://stackoverflow.com/users/683808/chrisv>`_
 * for the answer on
 * http://stackoverflow.com/questions/3764589/how-do-i-include-django-1-2s-csrf-token-in-a-javascript-generated-html-form/5485616#5485616
 * 
 * */
 
Ext.Ajax.on('beforerequest', function (conn, options) {
   if (!(/^http:.*/.test(options.url) || /^https:.*/.test(options.url))) {
     if (typeof(options.headers) == "undefined") {
       options.headers = {'X-CSRFToken': Ext.util.Cookies.get('csrftoken')};
     } else {
       options.headers.extend({'X-CSRFToken': Ext.util.Cookies.get('csrftoken')});
     }                        
   }
}, this);


/*
My fix for the "Cannot set QuickTips dismissDelay to 0" bug,
see http://www.sencha.com/forum/showthread.php?183515 
*/
Ext.override(Ext.QuickTip,{
  showAt : function(xy){
        var t = this.activeTarget;
        //~ console.log("20120224 QuickTip.showAt",this.title,this.dismissDelay,t.dismissDelay);
        if(t){
            if(!this.rendered){
                this.render(Ext.getBody());
                this.activeTarget = t;
            }
            if(t.width){
                this.setWidth(t.width);
                this.body.setWidth(this.adjustBodyWidth(t.width - this.getFrameWidth()));
                this.measureWidth = false;
            } else{
                this.measureWidth = true;
            }
            this.setTitle(t.title || '');
            this.body.update(t.text);
            this.autoHide = t.autoHide;
            // bugfix by Luc 20120226
            if (t.dismissDelay != undefined) this.dismissDelay = t.dismissDelay;
            //~ this.dismissDelay = t.dismissDelay || this.dismissDelay;
            if(this.lastCls){
                this.el.removeClass(this.lastCls);
                delete this.lastCls;
            }
            if(t.cls){
                this.el.addClass(t.cls);
                this.lastCls = t.cls;
            }
            if(this.anchor){
                this.constrainPosition = false;
            }else if(t.align){ 
                xy = this.el.getAlignToXY(t.el, t.align);
                this.constrainPosition = false;
            }else{
                this.constrainPosition = true;
            }
        }
        Ext.QuickTip.superclass.showAt.call(this, xy);
    }
});

/*
Another hack. See /docs/blog/2012/0228
*/
Ext.Element.addMethods(
    function() {
        var VISIBILITY      = "visibility",
            DISPLAY         = "display",
            HIDDEN          = "hidden",
            NONE            = "none",
            XMASKED         = "x-masked",
            XMASKEDRELATIVE = "x-masked-relative",
            data            = Ext.Element.data;

        return {
            
            mask : function(msg, msgCls) {
                var me  = this,
                    dom = me.dom,
                    dh  = Ext.DomHelper,
                    EXTELMASKMSG = "ext-el-mask-msg",
                    el,
                    mask;
                // removed the following lines. See /docs/blog/2012/0228
                //~ if (!(/^body/i.test(dom.tagName) && me.getStyle('position') == 'static')) {
                    //~ console.log(20120228,dom.tagName,me);
                    //~ me.addClass(XMASKEDRELATIVE); 
                //~ }
                if (el = data(dom, 'maskMsg')) {
                    el.remove();
                }
                if (el = data(dom, 'mask')) {
                    el.remove();
                }

                mask = dh.append(dom, {cls : "ext-el-mask"}, true);
                data(dom, 'mask', mask);

                me.addClass(XMASKED);
                mask.setDisplayed(true);
                
                if (typeof msg == 'string') {
                    var mm = dh.append(dom, {cls : EXTELMASKMSG, cn:{tag:'div'}}, true);
                    data(dom, 'maskMsg', mm);
                    mm.dom.className = msgCls ? EXTELMASKMSG + " " + msgCls : EXTELMASKMSG;
                    mm.dom.firstChild.innerHTML = msg;
                    mm.setDisplayed(true);
                    mm.center(me);
                }
                
                
                if (Ext.isIE && !(Ext.isIE7 && Ext.isStrict) && me.getStyle('height') == 'auto') {
                    mask.setSize(undefined, me.getHeight());
                }
                
                return mask;
            }

            
        };
    }()
);



Ext.namespace('Lino');
    
    

//~ Lino.subst_user_field = new Ext.form.ComboBox({});
//~ Lino.subst_user = null;
Lino.insert_subst_user = function(p){
    //~ console.log('20120714 insert_subst_user',Lino.subst_user,p);
    //~ if (Lino.subst_user_field.getValue()) {
    if (p.su) return;
    if (Lino.subst_user) {
        //~ p.su = Lino.subst_user_field.getValue();
        p.su = Lino.subst_user;
    //~ } else {
        //~ delete p.su;
    }
    //~ console.log('20120714 insert_subst_user -->',Lino.subst_user,p);
}

Lino.login_window = null;


Lino.show_login_window = function(on_login) {
  //~ console.log('20121103 show_login_window',arguments);
  //~ var current_window = Lino.current_window;
  if (Lino.login_window == null) {
    
      function do_login() { 
            Lino.viewport.loadMask.show()
            login_panel.getForm().submit({ 
                method:'POST', 
                waitTitle:'Connecting', 
                waitMsg:'Sending data...',
                success:function(){ 
                  Lino.login_window.hide();
                  Lino.handle_home_button();
                  Lino.viewport.loadMask.hide();
                  if (typeof on_login == 'string') {
                      Lino.load_url(on_login);
                  } 
                },
                failure: function(form,action) { 
                  Lino.on_submit_failure(form,action);
                  Lino.viewport.loadMask.hide()
                }
            }); 
      };
    
      var login_button = new Ext.Button({ 
        text:"Log in",
        formBind: true,	 
        // Function that fires when user clicks the button 
        handler: do_login});
    
      var login_panel = new Ext.FormPanel({ 
        //~ inspired by http://www.sencha.com/learn/a-basic-login/
        autoHeight:true,
        labelWidth:90,
        url:'/auth', 
        frame:true, 
        defaultType:'textfield',
        monitorValid:true,
        items:[{ 
            fieldLabel:"Username", 
            id: 'username',
            name:'username', 
            autoHeight:true,
            allowBlank:false 
        },{ 
            fieldLabel:"Password", 
            name:'password', 
            inputType:'password', 
            autoHeight:true,
            allowBlank:false 
        }],        
        buttons:[ login_button ]});
        
      Lino.login_window = new Ext.Window({
          layout:'fit',
          defaultButton: 'username',
          width:300,
          title:"Log in", 
          autoHeight:true,
          modal: true,
          closeAction: "hide",
          keys: {
            key: Ext.EventObject.ENTER,
            fn: function() { do_login()}
          },
          items: [login_panel] });
  };
  Lino.login_window.show();
};

Lino.logout = function(id,name) {
    Lino.call_ajax_action(
        Lino.viewport, 'GET', 
        '/auth',
        {}, 'logout', undefined, undefined,
        function(){Lino.reload();})
}

Lino.set_subst_user = function(id,name) {
    //~ console.log(20130723,'Lino.set_subst_user',id,name,Lino.current_window,Lino.viewport);
    Lino.subst_user = id;
    if (Lino.current_window) 
        Lino.current_window.main_item.set_base_param("su",id);
    if (Lino.viewport) 
        Lino.permalink_handler(Lino.current_window)();
}



//~ Lino.select_subst_user = function(cmp,rec,value){
    //~ Lino.subst_user=value;
    //~ console.log(20120713,rec);
//~ }
    
Lino.current_window = null;
Lino.window_history = Array();
    
Lino.chars2width = function(cols) {  return cols * 9; }
Lino.rows2height = function(cols) {  return cols * 20; }



Lino.MainPanel = {
  is_home_page : false,
  setting_param_values : false,
  config_containing_window : function(wincfg) { }
  ,init_containing_window : function(win) { }
  ,is_loading : function() { 
      if (!this.rendered) return true;
      //~ return (Ext.select('.x-loading-msg').elements.length > 0);
      return true; 
    } 
  ,do_when_clean : function(auto_save,todo) { todo() }
  ,get_master_params : function() {
    var p = {}
    p['mt'] = this.content_type; 
    rec = this.get_current_record()
    if (rec) {
      if (rec.phantom) {
          p['mk'] = undefined; 
      }else{
          p['mk'] = rec.id; 
      }
    } else {
      p['mk'] = undefined;
    }
    //~ console.log('get_master_params returns',p,'using record',rec);
    return p;
  }
  ,get_permalink : function() {
    var p = Ext.apply({}, this.get_base_params());
    delete p.fmt;
    Ext.apply(p, this.get_permalink_params());
    
    if (this.toggle_params_panel_btn) {
        p.sp = this.toggle_params_panel_btn.pressed;
        //~ if (this.toggle_params_panel_btn.pressed == this.params_panel_hidden) {
          //~ p.sp = true;
        //~ }
    }
    
    //~ Lino.insert_subst_user(p);
     //~ p.fmt = 'html';
    //~ console.log('get_permalink',p,this.get_permalink_params());
    if (this.is_home_page)
        //~ var url = '';
        var url = '/';
    else 
        var url = this.get_permalink_url();
    if (p.su == null) 
        delete p.su;
    if (Ext.urlEncode(p)) url = url + "?" + Ext.urlEncode(p);
    return url;
  }
  ,get_record_url : function(record_id) {
      var url = '/api' + this.ls_url
      //~ var url = this.containing_window.config.url_data; // ls_url;
      url += '/' + (record_id === undefined ? '-99999' : String(record_id));
      //~ if (record_id !== undefined) url += '/' + String(record_id);
      //~ url += '/' + String(record_id);
      return url;
  }
  ,get_permalink_url : function() {
      return '/api' + this.ls_url;
  }
  ,get_permalink_params : function() {
      //~ return {an:'grid'};
      var p = {};
      if (this.action_name)
          p.an = this.action_name;
      this.add_param_values(p,false)
      return p;
  }
  /*

  Lino.MainPanel.set_status() : the status can have the following keys:

  - field_values
  - param_values
  - base_params
  - record_id
  - active_tab
  - data_record
  - show_params_panel
  - current_page

   */
  ,set_status : function(status, requesting_panel) {}
  ,get_status : function() { return {}}
  ,refresh : function() {}
  ,get_base_params : function() {  // Lino.MainPanel
    var p = {};
    Lino.insert_subst_user(p);
    return p;
  }
  ,add_params_panel : function (tbar) {
      if (this.params_panel) {
        //~  20130923b
        //~ this.params_panel.autoHeight = true; // 20130924
        var t = this;
        var update = function() {
            var p = t.params_panel;
            //~ console.log("update", p.getSize().height,p.forceLayout,p.autoHeight);
            var w = t.get_containing_window();
            Lino.do_when_visible(w, function() {
                //~ p.doLayout(true); // doLayout(shallow, force)
                w.doLayout(true); // doLayout(shallow, force)
                //~ t.params_panel.on('afterlayout',update,t,{single:true});
            });
        };
        Lino.do_when_visible(this.params_panel, update);
        this.params_panel.on('show',update);
        this.params_panel.on('hide',update);
        //~ this.params_panel.on('bodyresize',update);
        this.params_panel.on('afterlayout',update);
        //~ this.params_panel.on('afterlayout',update,this,{single:true});
        //~ this.params_panel.on('bodyresize',update,this,{single:true});
        //~ this.params_panel.on('resize',update,this,{single:true});
        //~ this.params_panel.on('render',update,this,{single:true});
        
        // this.params_panel.on('render',
        //~ this.params_panel.on('afterlayout',update,this,{single:true,delay:200});
        //~ this.params_panel.on('bodyresize',update,this,{single:true,delay:200});
        this.toggle_params_panel_btn = new Ext.Button({ scope:this, 
          //~ text: "$_("[parameters]")", // gear
          iconCls: 'x-tbar-parameters',
          tooltip:"Show or hide the table parameters panel",
          enableToggle: true,
          //~ pressed: ! this.params_panel.hidden,
          pressed: ! this.params_panel_hidden,
          toggleHandler: function(btn,state) { 
            //~ console.log("20120210 add_params_panel",state,this.params_panel);
            if (state) {
                this.params_panel.show();
            } else {
                this.params_panel.hide();
            }
            //~ this.params_panel.on('afterlayout',update,this,{single:true});
            //~ t.get_containing_window().doLayout();
            //~ this.params_panel.on('afterlayout',function() {
                //~ console.log("20130918 afterlayout");
                //~ t.get_containing_window().doLayout(); // doLayout(shallow, force)
            //~ },this,{single:true});
          }
        }); 
        tbar = tbar.concat([this.toggle_params_panel_btn]);
        var refresh = function() {
            if (!t.setting_param_values) {
                t._force_dirty = true; 
                t.refresh();
            }
        }
        Ext.each(this.params_panel.fields,function(f) {
          //~ f.on('valid',function() {t.refresh()});
          if (f instanceof Ext.form.Checkbox) {
              f.on('check',refresh);
          } else if (f instanceof Ext.DatePicker) {
              f.on('select',refresh);
          } else if (f instanceof Ext.form.TriggerField) {
              f.on('select',refresh);
              //~ f.on('change',refresh);
              //~ f.on('valid',refresh);
          } else {
              if (! f.on) 
                  console.log("20121010 no method 'on'",f);
              else
                  f.on('change',refresh);
            }
          });
      }
      return tbar;
  }
  ,add_param_values : function (p,force_dirty) {
    if (this.params_panel) {
      /* 
      * 20120918 add param_values to the request string 
      * *only if the params_form is dirty*.
      * Otherwise Actor.default_params() would never be used.
      *
      * 20121023 But IntegClients.params_default has non-empty default values. 
      * Users must have the possibility to make them empty.
      * 
      * 20130605 : added `force_dirty` parameter because Checkbox fields don't 
      * mark their form as dirty when check is fired.
      * 
      * 20130721 : `force_dirty` not as a parameter but as 
      * `this._force_dirty` because
      * 
      * 20130915 : both _force_dirty and force_dirty parameter are needed.
      * 
      */
      if (force_dirty || this._force_dirty || this.params_panel.form.isDirty()) {
      //~ if (this._force_dirty || this.params_panel.form.isDirty()) {
        p.pv = this.get_param_values();
        //~ console.log("20130923 form is dirty (",force_dirty,this._force_dirty,this.params_panel.form.isDirty(),")");
        //~ console.log("20130923 form is dirty",p);
      }else{
        //~ console.log("20130923 form not dirty:",this.params_panel.form);
        if (this.status_param_values) 
          p.pv = Lino.fields2array(
            this.params_panel.fields,this.status_param_values);
      }
      //~ if (!this.params_panel.form.isDirty()) return;
      //~ p.pv = this.get_param_values();
      //~ console.log("20120203 add_param_values added pv",p.pv,"to",p);
    }
  },
  get_param_values : function() { // similar to get_field_values()
      return Lino.fields2array(this.params_panel.fields);
  },
  set_param_values : function(pv) {
    if (this.params_panel) {
      //~ console.log('20120203 MainPanel.set_param_values', pv);
      this.status_param_values = pv;
      //~ this.params_panel.form.suspendEvents(false);
      this.setting_param_values = true;
      if (pv) { 
          this.params_panel.form.my_loadRecord(pv);
      } else { 
        this.params_panel.form.reset(); 
      }
      this.setting_param_values = false;
      this._force_dirty = false; 
      //~ this.params_panel.form.resumeEvents();
    }
  }
};




Lino.Viewport = Ext.extend(Ext.Viewport, Lino.MainPanel);
Lino.Viewport = Ext.extend(Lino.Viewport, {
  layout : "fit"
  ,is_home_page : true
  ,initComponent : function(){
    Lino.Viewport.superclass.initComponent.call(this);
    this.on('render',function(){
      this.loadMask = new Ext.LoadMask(this.el,{msg:"Please wait..."});
      //~ console.log("20121118 Lino.viewport.loadMask",this.loadMask);
    },this);
  }
  ,refresh : function() {
      var caller = this;
      // console.log("20140504 Lino.Viewport.refresh()");
      if (caller.loadMask) caller.loadMask.show();
      var success = function(response) {
        if (caller.loadMask) caller.loadMask.hide();
        if (response.responseText) {
          var result = Ext.decode(response.responseText);
          //~ console.log('Lino.do_action()',action.name,'result is',result);
          if (result.html) {
              Ext.getCmp('main_area').update(result.html);
          }
          if (result.message) {
              if (result.alert) {
                  //~ Ext.MessageBox.alert('Alert',result.alert_msg);
                  Ext.MessageBox.alert('Alert',result.message);
              } else {
                  Lino.notify(result.message);
              }
          }
          
          if (result.notify_msg) Lino.notify(result.notify_msg);
          if (result.js_code) { 
            var jsr = result.js_code(caller);
            //~ console.log('Lino.do_action()',action,'returned from js_code in',result);
          };
        }
      };
      var action = {
        url : '/api/main_html',
        waitMsg: "Please wait...",
        failure: Lino.ajax_error_handler(caller),
        success: success,
        method: 'GET',
        params: {}
      };
      Lino.insert_subst_user(action.params);
      Ext.Ajax.request(action);
    
  }
});




Lino.open_window = function(win, st, requesting_panel) {
  // console.log("20140506 Lino.open_window()",win,st);
  var cw = Lino.current_window;
  if (cw) {
    //~ console.log("20120918 Lino.open_window() save current status",cw.main_item.get_status());
    Lino.window_history.push({
      window:cw,
      status:cw.main_item.get_status()
    });
  }
  Lino.current_window = win;
  //~ if (st.su) 
      //~ Lino.subst_user_field.setValue(st.su);
  win.main_item.set_status(st, requesting_panel);
  win.show();
};

Lino.load_url = function(url) {
    //~ foo.bar.baz = 2; 
    //~ console.log("20121120 Lino.load_url()");
    //~ Lino.body_loadMask.show();
    Lino.viewport.loadMask.show();
    //~ location.replace(url);
    document.location = url;
}

Lino.close_window = function(status_update, norestore) {
  // norestore is used when called by handle_action_result() who 
  // will call set_status itself later
  var cw = Lino.current_window;
  var ww = Lino.window_history.pop();
  var retval = cw.main_item.requesting_panel;
  console.log(
      "20140604 Lino.close_window() going to close", 
      cw, "previous is", ww, 
      "norestore is", norestore,
      "retval is", retval);
  if (ww) {
    //~ if (status_update) Ext.apply(ww.status,status_update);
    if(!norestore) {
        if (status_update) status_update(ww);
        ww.window.main_item.set_status(ww.status);
    }
    Lino.current_window = ww.window;
  } else {
    Lino.current_window = null;
  }
  if (cw) cw.hide_really();
  return retval;
};

Lino.kill_current_window = function() {
  // console.log("20140418 Lino.kill_current_window()");
  var cw = Lino.current_window;
  Lino.current_window = null;
  if (cw) cw.hide_really();
};

Lino.reload = function() {
    // First close all windows to ensure all changes are saved
    Lino.close_all_windows();

    // Then reload current view
    var url =  "/"

    var p = {};
    Lino.insert_subst_user(p)
    if (Ext.urlEncode(p))
        url = url + "?" + Ext.urlEncode(p);

    Lino.load_url(url);
}

Lino.handle_home_button = function() {
  if (Lino.window_history.length == 0)
      Lino.reload();
  else
      Lino.close_all_windows();
}

Lino.close_all_windows = function() {
    while (Lino.window_history.length > 0) {
        Lino.close_window();
    }
}

Lino.calling_window = function() {
    if (Lino.window_history.length) return Lino.window_history[Lino.window_history.length-1];
}

//~ Lino.WindowAction = function(mainItemClass,windowConfig,mainConfig,ppf) {
Lino.WindowAction = function(windowConfig,main_item_fn) {
    //~ if(!mainConfig) mainConfig = {};
    //~ mainConfig.is_main_window = true;
    this.windowConfig = windowConfig;
    this.main_item_fn = main_item_fn;
    //~ if (ppf) mainConfig.params_panel.fields = ppf;
    //~ this.mainConfig = mainConfig;
    //~ this.mainItemClass = mainItemClass;
};

Lino.WindowAction = Ext.extend(Lino.WindowAction,{
    window : null,
    //~ mainItemClass: null,
    get_window : function() {
      //~ if(mainConfig) Ext.apply(this.mainConfig,mainConfig);
      if (this.window == null)  {
          //~ this.windowConfig.main_item = new this.mainItemClass(this.mainConfig);
          this.windowConfig.main_item = this.main_item_fn();
          this.window = new Lino.Window(this.windowConfig);
      }
      return this.window;
    },
    run : function(requesting_panel, status) {
      //~ console.log('20120625 window_action.run()',this)
      Lino.open_window(this.get_window(), status, requesting_panel);
    }
  
});


Lino.PanelMixin = {
  get_containing_window : function (){
      if (this.containing_window) return this.containing_window;
      return this.containing_panel.get_containing_window();
  }
  ,set_window_title : function(title) {
    //~ this.setTitle(title);
    var cw = this.get_containing_window();

    //~ if (cw) {
    //~ if (cw && cw.closable) {
    if (cw && !cw.main_item.hide_window_title) {
      //~ console.log('20111202 set_window_title(',title,') for',this.containing_window);
      //~ if (! this.containing_window.rendered) console.log("WARNING: not rendered!");
      cw.setTitle(title);
    //~ } else {
      //~ document.title = title;
    }
    //~ else console.log('20111202 not set_window_title(',title,') for',this);
  }
  
};


// Lino.status_bar = new Ext.ux.StatusBar({defaultText:'Lino version 1.6.14.'});




Lino.edit_tinymce_text = function(panel, options) {
  // `panel` is the RichTextPanel
  //~ console.log(20111220,panel);
  //~ var rec = panel.get_current_record();
  var rec = panel.containing_panel.get_current_record();
  var value = rec ? rec.data[panel.editor.name] : '';
  var saving = false;
  var todo_after_save = false;
  var discard_changes = false;
  
  
  function save() {
    //~ if (todo_after_save) {alert('tried to save again'); return; }
    if (saving) {alert('tried to save again'); return; }
    //~ var url = panel.containing_window.main_item.get_record_url(rec.id);
    var url = panel.containing_panel.get_record_url(rec.id);
    var params = Ext.apply({}, panel.containing_panel.get_base_params());
    params[panel.editor.name] = editor.getValue();
    //~ params.su = Lino.subst_user;
    //~ Lino.insert_subst_user(params);
    var a = { 
      params: params, 
      method: 'PUT',
      url: url,
      failure: function() {
          //~ if (editor.ed.getContainer()) 
          editor.ed.setProgressState(0);
          todo_after_save = false;
          saving = false;
          console.log('tinymce.save() failed. sorry.',arguments);
        },
      success: function() {
        saving = false;
        //~ if (editor.ed.getContainer()) 
        editor.ed.setProgressState(0);
        rec.data[panel.editor.name] = editor.getValue();
        if(todo_after_save) {
            var fn = todo_after_save;
            todo_after_save = false;
            fn();
        }
        //~ panel.containing_window.set_current_record(rec);
        panel.refresh();
      }
    };
    //~ if (editor.ed.getContainer()) 
    editor.ed.setProgressState(1); // Show progress
    saving = true;
    //~ console.log(a);
    Ext.Ajax.request(a);
  };
  function save_callback() {
      save();
      //~ save(function(){editor.ed.setDirty(false);})
      /* return true have the save button disabled.  
      That's not perfect because the PUT is asynchronous 
      and the response is not yet known.
      */
      return true;
  }
  //~ var actions = [
    //~ {text:"Save",handler:save}
  //~ ]; 
  //~ console.log(20110610,panel.editor.disabled);
  var settings = {};
  Ext.apply(settings,{
        readonly: panel.editor.disabled,
        //~ language: "de",
        plugins : "save,emotions,spellchecker,advhr,insertdatetime,preview,table,searchreplace,template", 
        // Theme options - button# indicated the row# only
        theme_advanced_buttons1 : "save,cancel,|,bold,italic,underline,|,justifyleft,justifycenter,justifyright,fontselect,fontsizeselect,formatselect,|,search,replace",
        theme_advanced_buttons2 : "cut,copy,paste,template,|,bullist,numlist,|,outdent,indent,|,undo,redo,|,link,unlink,anchor,image,|,code,preview,|,forecolor,backcolor",
        theme_advanced_buttons3 : "insertdate,inserttime,|,spellchecker,advhr,,removeformat,|,sub,sup,|,charmap,emotions,|,tablecontrols",      
        theme_advanced_resizing : false,
        convert_urls : false,
        save_onsavecallback : save_callback,
        save_enablewhendirty : true
        //~ save_oncancelcallback: on_cancel
  });
  Ext.apply(settings,options);
  var editor = new Ext.ux.TinyMCE({
      value : value,
      tinymceSettings: settings
    });
  var win = new Ext.Window({
    title: rec.title, 
    //~ bbar: actions,
    layout: 'fit',
    items: editor,
    width: 600, 
    height:500,
    minWidth: 100,
		minHeight: 100,
    modal: true,
    resizable: true,
    maximizable: true,
    //~ maximized: true,
    //~ closeAction: "close"
    closeAction: "hide"
    //~ hideMode: "offsets",
    //~ constrainHeader: true,
    //~ bodyStyle: 'padding: 10px'
  });

  //~ win.on('beforeclose',function() {
  win.on('beforehide',function() {
    if (todo_after_save) return false;
    if (discard_changes) return true;
    if (editor.isDirty()) {
        //~ var ok = false;
        //~ var allowClose = true;
        var config = {title:"Confirmation"};
        config.buttons = Ext.MessageBox.YESNOCANCEL;
        config.msg = "Save changes to text ?";
        config.modal = true;
        config.fn = function(buttonId,text,opt) {
          //~ console.log('do_when_clean',buttonId)
          if (buttonId == "yes") {
              /* we cancel this close, but save()'s onSuccess will call again.*/
              //~ allowClose = false;
              todo_after_save = function(){win.hide();}
              editor.ed.execCommand('mceSave');
              //~ editor.ed.save(function(){win.close();});
          } else if (buttonId == "no") { 
              discard_changes = true;
              win.hide()
          //~ } else if (buttonId == "cancel") { 
            //~ ok = true;
              //~ allowClose = false;
          //~ } else { 
            //~ console.log('unknwon buttonId:',buttonId);
          }
        }
        Ext.MessageBox.show(config);
        return false;
        //~ return allowClose;
    }
  });
  win.show();
}







/* 
  Originally copied from Ext JS Library 3.3.1
  Modifications by Luc Saffre : 
  - rendering of phantom records
  - fire afteredit event
  - react on dblclcik, not on single click

 */
Lino.CheckColumn = Ext.extend(Ext.grid.Column, {

    processEvent : function(name, e, grid, rowIndex, colIndex){
        //~ console.log('20110713 Lino.CheckColumn.processEvent',name)
        if (name == 'click') {
        //~ if (name == 'mousedown') {
        //~ if (name == 'dblclick') {
            return this.toggleValue(grid, rowIndex, colIndex);
        } else {
            return Ext.grid.ActionColumn.superclass.processEvent.apply(this, arguments);
        }
    },
    
    toggleValue : function (grid,rowIndex,colIndex) {
        var record = grid.store.getAt(rowIndex);
        var dataIndex = grid.colModel.getDataIndex(colIndex);
        // 20120514
        //~ if(record.data.disabled_fields && record.data.disabled_fields[dataIndex]) {
          //~ Lino.notify("This field is disabled");
          //~ return false;
        //~ }
      
        //~ if (dataIndex in record.data['disabled_fields']) {
            //~ Lino.notify("This field is disabled.");
            //~ return false;
        //~ }
        var startValue = record.data[dataIndex];
        var value = !startValue;
        //~ record.set(this.dataIndex, value);
        var e = {
            grid: grid,
            record: record,
            field: dataIndex,
            originalValue: startValue,
            value: value,
            row: rowIndex,
            column: colIndex,
            cancel: false
        };
        if(grid.fireEvent("beforeedit", e) !== false && !e.cancel){
        //~ if(grid.fireEvent("validateedit", e) !== false && !e.cancel){
            record.set(dataIndex, value);
            delete e.cancel;
            grid.fireEvent("afteredit", e);
        }
        return false; // Cancel event propagation
    },

    renderer : function(v, p, record){
        if (record.phantom) return '';
        p.css += ' x-grid3-check-col-td'; 
        return String.format('<div class="x-grid3-check-col{0}">&#160;</div>', v ? '-on' : '');
    }

    // Deprecate use as a plugin. Remove in 4.0
    // init: Ext.emptyFn
});

// register ptype. Deprecate. Remove in 4.0
// Ext.preg('checkcolumn', Lino.CheckColumn);

// backwards compat. Remove in 4.0
// Ext.grid.CheckColumn = Lino.CheckColumn;

// register Column xtype
Ext.grid.Column.types.checkcolumn = Lino.CheckColumn;


/* 20110725 : 
Lino.on_tab_activate is necessary 
in contacts.Person.2.dtl 
(but don't ask me why...)
*/
Lino.on_tab_activate = function(item) {
  //~ console.log('activate',item); 
  if (item.rendered && item.doLayout) item.doLayout();
  //~ if (item.rendered) item.doLayout();
}

Lino.TimeField = Ext.extend(Ext.form.TimeField,{
  format: 'H:i',
  increment: 15
  });
Lino.DateField = Ext.extend(Ext.form.DateField,{
  //~ boxMinWidth: Lino.chars2width(15), // 20131005 changed from 11 to 15
  format: 'd.m.Y',
  altFormats: 'd/m/Y|Y-m-d'
  });
Lino.DatePickerField = Ext.extend(Ext.DatePicker,{
  //~ boxMinWidth: Lino.chars2width(11),
  format: 'd.m.Y',
  //~ altFormats: 'd/m/Y|Y-m-d'
  formatDate : function(date){
      //~ console.log("20121203 formatDate",this.name,date);
      return Ext.isDate(date) ? date.dateFormat(this.format) : date;
  }
  });
Lino.DateTimeField = Ext.extend(Ext.ux.form.DateTime,{
  dateFormat: 'd.m.Y',
  timeFormat: 'H:i'
  //~ ,hiddenFormat: 'd.m.Y H:i'
  });
Lino.URLField = Ext.extend(Ext.form.TriggerField,{
  triggerClass : 'x-form-search-trigger',
  //~ triggerClass : 'x-form-world-trigger',
  vtype: 'url',
  onTriggerClick : function() {
    //~ console.log('Lino.URLField.onTriggerClick',this.value)
    //~ document.location = this.value;
    window.open(this.getValue(),'_blank');
  }
});
Lino.IncompleteDateField = Ext.extend(Ext.form.TextField,{
  //~ regex: /^-?\d+-[01]\d-[0123]\d$/,
  //~ regex: /^[0123]\d\.[01]\d\.-?\d+$/,
  maxLength: 10,
  boxMinWidth: Lino.chars2width(10),
  regex: /^[0123]?\d\.[01]?\d\.-?\d+$/,
  regexText: 'Enter a date in format YYYY-MM-DD (use zeroes for unknown parts).'
  });


//~ Lino.make_dropzone = function(cmp) {
    //~ cmp.on('render', function(ct, position){
      //~ ct.el.on({
        //~ dragenter:function(event){
          //~ event.browserEvent.dataTransfer.dropEffect = 'move';
          //~ return true;
        //~ }
        //~ ,dragover:function(event){
          //~ event.browserEvent.dataTransfer.dropEffect = 'move';
          //~ event.stopEvent();
          //~ return true;
        //~ }
        //~ ,drop:{
          //~ scope:this
          //~ ,fn:function(event){
            //~ event.stopEvent();
            //~ console.log(20110516);
            //~ var files = event.browserEvent.dataTransfer.files;
            //~ if(files === undefined){
              //~ return true;
            //~ }
            //~ var len = files.length;
            //~ while(--len >= 0){
              //~ console.log(files[len]);
              //~ // this.processDragAndDropFileUpload(files[len]);
            //~ }
          //~ }
        //~ }
      //~ });
    //~ });
//~ };

//~ Lino.FileUploadField = Ext.ux.form.FileUploadField;

Lino.FileUploadField = Ext.extend(Ext.ux.form.FileUploadField,{
    unused_onRender : function(ct, position){
      Lino.FileUploadField.superclass.onRender.call(this, ct, position);
      this.el.on({
        dragenter:function(event){
          event.browserEvent.dataTransfer.dropEffect = 'move';
          return true;
        }
        ,dragover:function(event){
          event.browserEvent.dataTransfer.dropEffect = 'move';
          event.stopEvent();
          return true;
        }
        ,drop:{
          scope:this
          ,fn:function(event){
            event.stopEvent();
            //~ console.log(20110516);
            var files = event.browserEvent.dataTransfer.files;
            if(files === undefined){
              return true;
            }
            var len = files.length;
            while(--len >= 0){
              console.log(files[len]);
              //~ this.processDragAndDropFileUpload(files[len]);
            }
          }
        }
      });
    }
});

Lino.FileField = Ext.extend(Ext.form.TriggerField,{
  triggerClass : 'x-form-search-trigger',
  editable: false,
  onTriggerClick : function() {
    //~ console.log('Lino.URLField.onTriggerClick',this.value)
    //~ document.location = this.value;
    if (this.getValue()) window.open(MEDIA_URL + '/'+this.getValue(),'_blank');
  }
});

Lino.file_field_handler = function(panel,config) {
  if (panel.action_name == 'insert') {
      panel.has_file_upload = true;


      // config.value = '<br/><br/>';

      var f = new Lino.FileUploadField(config);
      //~ Lino.make_dropzone(f);
      return f;
      //~ return new Ext.ux.form.FileUploadField(config);
      //~ return new Lino.FileField(config);
      
  } else {
      //~ return new Lino.URLField(config);
      return new Lino.FileField(config);
  }
}

Lino.VBorderPanel = Ext.extend(Ext.Panel,{
    constructor : function(config) {
      config.layout = 'border';
      delete config.layoutConfig;
      Lino.VBorderPanel.superclass.constructor.call(this,config);
      for(var i=0; i < this.items.length;i++) {
        var item = this.items.get(i);
        if (this.isVertical(item) && item.collapsible) {
          item.on('collapse',this.onBodyResize,this);
          item.on('expand',this.onBodyResize,this);
        }
      }
    },
    isVertical : function(item) {
       return (item.region == 'north' || item.region == 'south' || item.region == 'center');
    },
    onBodyResize: function(w, h){
        //~ console.log('VBorderPanel.onBodyResize',this.title)
      if (this.isVisible()) { // to avoid "Uncaught TypeError: Cannot call method 'getHeight' of undefined."
        var sumflex = 0;
        var availableHeight = this.getInnerHeight();
        var me = this;
        this.items.each(function(item){
          if (me.isVertical(item)) {
              if (item.collapsed || item.flex == 0 || item.flex === undefined) {
                  if (item.rendered) availableHeight -= item.getHeight();
              } else {
                  sumflex += item.flex;
              }
          } 
          
        });
        //~ for(var i=0; i < this.items.length;i++) {
          //~ var item = this.items.get(i);
          //~ // if (this.isVertical(item) && item.getResizeEl()) {
          //~ if (this.isVertical(item)) {
              //~ if (item.collapsed || item.flex == 0 || item.flex === undefined) {
                  //~ // item.syncSize()
                  //~ // item.doLayout()
                  //~ // if (item.region == "north") console.log('region north',item.getHeight(),item.id, item);
                  //~ // if (item.getHeight() == 0) console.log(20100921,'both flex and getHeight() are 0!');
                  //~ availableHeight -= item.getHeight();
              //~ } else {
                  //~ sumflex += item.flex;
                  //~ // console.log(item.flex);
              //~ }
          //~ } 
          //~ // else console.log('non-vertical item in VBoderPanel:',item)
        //~ }
        var hunit = availableHeight / sumflex;
        //~ console.log('sumflex=',sumflex,'hunit=',hunit, 'availableHeight=',availableHeight);
        for(var i=0; i < this.items.length;i++) {
          var item = this.items.get(i);
          if (this.isVertical(item)) {
              if (item.flex != 0 && ! item.collapsed) {
                  item.setHeight(hunit * item.flex);
                  //~ console.log(item.region,' : height set to',item.getHeight());
              }
          }
          //~ else console.log('non-vertical item in VBoderPanel:',item)
        }
      }
      Lino.VBorderPanel.superclass.onBodyResize.call(this, w, h);
    }
});


/*
  modifications to the standard behaviour of a CellSelectionModel:
  
*/
Ext.override(Ext.grid.CellSelectionModel, {
//~ var dummy = {

    handleKeyDown : function(e){
        /* removed because F2 wouldn't pass
        if(!e.isNavKeyPress()){
            return;
        }
        */
        //~ console.log('handleKeyDown',e)
        var k = e.getKey(),
            g = this.grid,
            s = this.selection,
            sm = this,
            walk = function(row, col, step){
                return g.walkCells(
                    row,
                    col,
                    step,
                    g.isEditor && g.editing ? sm.acceptsNav : sm.isSelectable, 
                    sm
                );
            },
            cell, newCell, r, c, ae;

        switch(k){
            case e.ESC:
            case e.PAGE_UP:
            case e.PAGE_DOWN:
                break;
            default:
                // e.stopEvent(); // removed because Browser keys like Alt-Home, Ctrl-R wouldn't work
                break;
        }

        if(!s){
            cell = walk(0, 0, 1); 
            if(cell){
                this.select(cell[0], cell[1]);
            }
            return;
        }

        cell = s.cell;  
        r = cell[0];    
        c = cell[1];    
        
        switch(k){
            case e.TAB:
                if(e.shiftKey){
                    newCell = walk(r, c - 1, -1);
                }else{
                    newCell = walk(r, c + 1, 1);
                }
                break;
            case e.HOME:
                if (! (g.isEditor && g.editing)) {
                  if (!e.hasModifier()){
                      newCell = [r, 0];
                      //~ console.log('home',newCell);
                      break;
                  }else if(e.ctrlKey){
                      var t = g.getTopToolbar();
                      var activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);
                      if (activePage > 1) {
                          e.stopEvent();
                          t.moveFirst();
                          return;
                      }
                      newCell = [0, c];
                      break;
                  }
                }
            case e.END:
                if (! (g.isEditor && g.editing)) {
                  c = g.colModel.getColumnCount()-1;
                  if (!e.hasModifier()) {
                      newCell = [r, c];
                      //~ console.log('end',newCell);
                      break;
                  }else if(e.ctrlKey){
                      var t = g.getTopToolbar();
                      var d = t.getPageData();
                      if (d.activePage < d.pages) {
                          e.stopEvent();
                          var self = this;
                          t.on('change',function(tb,pageData) {
                              var r = g.store.getCount()-2;
                              self.select(r, c);
                              //~ console.log('change',r,c);
                          },this,{single:true});
                          t.moveLast();
                          return;
                      } else {
                          newCell = [g.store.getCount()-1, c];
                          //~ console.log('ctrl-end',newCell);
                          break;
                      }
                  }
                }
            case e.DOWN:
                newCell = walk(r + 1, c, 1);
                break;
            case e.UP:
                newCell = walk(r - 1, c, -1);
                break;
            case e.RIGHT:
                newCell = walk(r, c + 1, 1);
                break;
            case e.LEFT:
                newCell = walk(r, c - 1, -1);
                break;
            case e.F2:
                if (!e.hasModifier()) {
                    if (g.isEditor && !g.editing) {
                        g.startEditing(r, c);
                        e.stopEvent();
                        return;
                    }
                    break;
                }
            case e.INSERT:
                if (!e.hasModifier()) {
                    if (g.ls_insert_handler && !g.editing) {
                        e.stopEvent();
                        Lino.show_insert(g);
                        return;
                    }
                    break;
                }
            // case e.DELETE:
            //     if (!e.hasModifier()) {
            //         if (!g.editing) {
            //             e.stopEvent();
            //             Lino.delete_selected(g);
            //             return;
            //         }
            //         break;
            //     }

            case e.ENTER:
                e.stopEvent();
                g.onCellDblClick(r,c);
                break;

            default:
                g.handle_key_event(e);
                
        }
        

        if(newCell){
          e.stopEvent();
          r = newCell[0];
          c = newCell[1];
          this.select(r, c); 
          if(g.isEditor && g.editing){ 
            ae = g.activeEditor;
            if(ae && ae.field.triggerBlur){
                ae.field.triggerBlur();
            }
            g.startEditing(r, c);
          }
        //~ } else if (g.isEditor && !g.editing && e.charCode) {
        //~ // } else if (!e.isSpecialKey() && g.isEditor && !g.editing) {
            //~ g.set_start_value(String.fromCharCode(e.charCode));
            //~ // g.set_start_value(String.fromCharCode(k));
            //~ // g.set_start_value(e.charCode);
            //~ g.startEditing(r, c);
            //~ // e.stopEvent();
            //~ return;
        // } else {
          // console.log('20120513',e,g);
        }
        
    }


//~ };
});

 

function PseudoConsole() {
    this.log = function() {};
};
if (typeof(console) == 'undefined') console = new PseudoConsole();

Lino.notify = function(msg) {
  
    if (msg == undefined) return;
    // Lino.alert(msg);
  
};

Lino.alert = function(msg) {
  Ext.MessageBox.alert('Notify',msg);
};


//~ Lino.show_about = function() {
  //~ new Ext.Window({
    //~ width: 400, height: 400,
    //~ title: "About",
    //~ html: '<a href="http://www.extjs.com" target="_blank">ExtJS</a> version ' + Ext.version
  //~ }).show();
//~ };

function obj2str(o) {
  if (typeof o != 'object') return String(o);
  var s = '';
  for (var p in o) {
    s += p + ': ' + obj2str(o[p]) + '\n';
  }
  return s;
}

Lino.on_store_exception = function (store,type,action,options,response,arg) {
  //~ throw response;
  console.log("on_store_exception: store=",store,
    "type=",type,
    "action=",action,
    "options=",options,
    "response=",response,
    "arg=",arg);
  if (arg) { console.log(arg.stack)};
};

//~ Lino.on_submit_success = function(form, action) {
   //~ Lino.notify(action.result.message);
   //~ this.close();
//~ };

Lino.on_submit_failure = function(form, action) {
    //~ Lino.notify();
  // action may be undefined
    switch (action.failureType) {
        case Ext.form.Action.CLIENT_INVALID:
            Ext.Msg.alert('Client-side failure', 'Form fields may not be submitted with invalid values');
            break;
        case Ext.form.Action.CONNECT_FAILURE:
            Ext.Msg.alert('Connection failure', 'Ajax communication failed');
            break;
        case Ext.form.Action.SERVER_INVALID:
            Ext.Msg.alert('Server-side failure', action.result.message);
   }
};



/*
Lino.save_wc_handler = function(ww) {
  return function(event,toolEl,panel,tc) {
    var pos = panel.getPosition();
    var size = panel.getSize();
    wc = ww.get_window_config();
    Ext.applyIf(wc,{ 
      x:pos[0],y:pos[1],height:size.height,width:size.width,
      maximized:panel.maximized});
    Lino.do_action(ww,{url:'/window_configs/'+ww.config.permalink_name,params:wc,method:'POST'});
  }
};

*/

Lino.show_in_own_window_button = function(handler) {
  return {
    qtip: "Show this panel in own window", 
    id: "up",
    handler: function(event,toolEl,panel, tc) {
      //~ console.log('20111206 report_window_button',panel,handler);
      handler.run(null,{base_params:panel.containing_panel.get_master_params()});
    }
  }
}

Lino.action_handler = function (panel, on_success, on_confirm) {
  return function (response) {
      if (!panel) { 
          if (Lino.current_window) 
              panel = Lino.current_window.main_item;
          else panel = Lino.viewport;
      }
      
    if (panel.loadMask) panel.loadMask.hide(); // 20120211
    if (!response.responseText) return ;
    var result = Ext.decode(response.responseText);
    Lino.handle_action_result(panel, result, on_success, on_confirm);
  }
};

Lino.handle_action_result = function (panel, result, on_success, on_confirm) {

    // console.log('20140504 Lino.handle_action_result()', result);
    
    // if (panel instanceof Lino.GridPanel) {
    //     gridmode = true;
    // } else {
    //     gridmode = false;
    // }

    //~ if (result.goto_record) {
        //~ var js = "Lino." + result.goto_record[0] + '.detail.run';
        //~ var h = eval(js);
        //~ h(panel,{record_id:result.goto_record[1]});
    //~ }
    
    if (result.xcallback) {
        //~ var config = {title:"Confirmation"};
        var config = {title:result.xcallback.title};
        //~ config.buttons = Ext.MessageBox.YESNOCANCEL;
        //~ config.buttons = Ext.MessageBox.YESNO;
        config.buttons = result.xcallback.buttons;
        config.msg = result.message;
        config.fn = function(buttonId,text,opt) {
          panel.loadMask.show(); 
          //~ Lino.insert_subst_user(p);
          Ext.Ajax.request({
            method: 'GET',
            url: '/callbacks/'
                  + result.xcallback.id + '/' + buttonId,
            //~ params: {bi: buttonId},
            success: Lino.action_handler(panel, on_success, on_confirm)
          });
        }
        Ext.MessageBox.show(config);
        return;
    }
    
    var ns = {};  // new status
    if (result.close_window) {
        if(result.record_id || result.data_record) {
            var ww = Lino.calling_window();
            if (ww && ww.window.main_item instanceof Lino.FormPanel) {
                if (ww.window.main_item.ls_url == result.actor_url) {
                    // console.log("20140506 case 1");
                    ns.record_id = result.record_id;
                    ns.data_record = result.data_record;
                } else {
                    console.log("20140604 case 2", 
                                ww.window.main_item.ls_url, "is not", 
                                result.actor_url)
                }
            // } else {
            //     console.log("20140506 calling_window not a FormPanel", ww);
            }
        }

        panel = Lino.close_window(function(st) {Ext.apply(st, ns)}); 

        // Subsequent processing expects that `panel` is "the current
        // panel". Since we close the window, `panel` should now point
        // to the previous window. . Note the case of an insert window
        // that has been invoked by double-clicking on the phantom row
        // of a slave table in a detail window. In that case we want
        // `panel` to become the slave table's grid panel that called
        // the insert window, which is the slave table's grid panel
        // and not the master's detail form panel.  When the insert
        // window has been called by an action link (e.g. generated
        // using ar.insert_button), then Lino.close_window can return
        // `undefined`. 
        if (!panel) 
            panel = Lino.current_window.main_item;
    }

    if(result.record_id || result.data_record) {
        // console.log(20140527, ns, ! (ns.record_id || ns.data_record));
        if (! (ns.record_id || ns.data_record)) {
          if (panel instanceof Lino.FormPanel 
              && panel.ls_url == result.actor_url) {
              // console.log("20140506 case 2 it's a FormPanel:", panel);
              panel.set_status({
                  record_id: result.record_id,
                  data_record: result.data_record});
          } else if (panel.ls_detail_handler 
                     && panel.ls_url == result.actor_url) {
              // console.log("20140506 case 4");
              panel.ls_detail_handler.run(null, {
                  record_id: result.record_id,
                  data_record: result.data_record,
                  base_params: panel.get_base_params()});
          } else {
              result.refresh_all = true;
              console.log("20140604 case 6", result.actor_url);
          }
        }
    }

    // `eval_js` must get handled after `close_window` because it
    // might ask to open a new window (and we don't want to close that
    // new window).  It must execute *before* any MessageBox,
    // otherwise the box would get hidden by a window that opens
    // afterwards.

    if (result.eval_js) {
        //~ console.log(20120618,result.eval_js);
        eval(result.eval_js);
    }
    
    if (on_success && result.success) {
        // console.log("20140430 handle_action_result calls on_success", 
        //             on_success);
        on_success(result);
    }
    
    if (result.info_message) {
        console.log(result.info_message);
    }
    
    if (result.warning_message) {
        if (!result.alert) result.alert = "Warning";
        Ext.MessageBox.alert(result.alert, result.warning_message);
    }
    
    if (result.message) {
        //~ if (result.alert && ! gridmode) {
        if (result.alert) { // 20120628b 
            //~ Ext.MessageBox.alert('Alert',result.alert_msg);
            if (result.alert === true) result.alert = "Alert";
            Ext.MessageBox.alert(result.alert, result.message);
        } else {
            Lino.notify(result.message);
        }
    }

    if(result.record_deleted && panel.ls_url == result.actor_url) {
        panel.after_delete();
    }
    
    if (result.refresh_all) {
        var cw = Lino.current_window;
        // var cw = panel.get_containing_window();
        if (cw) {
            // console.log("20140504 refresh_all calls refresh on", cw.main_item);
            cw.main_item.refresh();
        }
        // else console.log("20131026 cannot refresh_all because ",
        //                  panel,"has no get_containing_window");
    } else {
        // console.log("20131026 b gonna refresh",panel);
        if (result.refresh) panel.refresh();
    }if (result.open_url) {
        //~ console.log(20111126,result.open_url);
        //~ if (!result.message)
            //~ Lino.notify('Open new window <a href="'+result.open_url+'" target="_blank">'+result.open_url+'</a>');
        window.open(result.open_url,'foo',"");
        //~ document.location = result.open_url;
    }
};

// obsolete but still used for deleting records.
Lino.do_action = function(caller,action) { 
  action.success = function(response) {
    if (caller.loadMask) caller.loadMask.hide();
    //~ console.log('Lino.do_action()',action,'action success',response);
    if (action.after_success) {
        //~ console.log('Lino.do_action() calling after_success');
        action.after_success();
    }
    if (response.responseText) {
      var result = Ext.decode(response.responseText);
      //~ console.log('Lino.do_action()',action.name,'result is',result);
      if (result.message) {
          if (result.alert) {
              //~ Ext.MessageBox.alert('Alert',result.alert_msg);
              Ext.MessageBox.alert('Alert',result.message);
          } else {
              Lino.notify(result.message);
          }
      }
      
      //~ if (result.alert_msg) Ext.MessageBox.alert('Alert',result.alert_msg);
      //~ if (result.message) Lino.notify(result.message);
      if (result.notify_msg) Lino.notify(result.notify_msg);
      if (result.js_code) { 
        //~ console.log('Lino.do_action()',action,'gonna call js_code in',result);
        var jsr = result.js_code(caller);
        //~ console.log('Lino.do_action()',action,'returned from js_code in',result);
        if (action.after_js_code) {
          //~ console.log('Lino.do_action()',action,'gonna call after_js_code');
          action.after_js_code(jsr);
          //~ console.log('Lino.do_action()',action,'returned from after_js_code');
        //~ } else {
          //~ console.log('Lino.do_action()',action,' : after_js_code is false');
        }
      };
    }
  };
  Ext.applyIf(action,{
    waitMsg: "Please wait...",
    failure: Lino.ajax_error_handler(caller),
    params: {}
  });
  //~ action.params.su = Lino.subst_user;
  Lino.insert_subst_user(action.params);
  
  Ext.Ajax.request(action);
};

//~ Lino.gup = function( name )
//~ {
  //~ // Thanks to http://www.netlobo.com/url_query_string_javascript.html
  //~ name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
  //~ var regexS = "[\\?&]"+name+"=([^&#]*)";
  //~ var regex = new RegExp( regexS );
  //~ var results = regex.exec( window.location.href );
  //~ if( results == null )
    //~ return "";
  //~ else
    //~ return results[1];
//~ };

//~ Lino.refresh_handler = function (ww) {
  //~ return function() { 
      //~ console.log('refresh',ww);
      //~ ww.main_item.doLayout(false,true);
      //~ ww.main_item.syncSize();
  //~ }
//~ };

//~ Lino.tools_close_handler = function (ww) {
  //~ return function() { 
      //~ ww.close();
  //~ }
//~ };
Lino.permalink_handler = function (ww) {
  return function() { 
    //~ document.location = ww.main_item.get_permalink();
    //~ console.log('20130723 Lino.permalink_handler',ww);
    
    /* Uncaught TypeError: Cannot read property 'main_item' of null  */
    if (ww) {
        var url = ww.main_item.get_permalink();
    } else {
        var url = Lino.viewport.get_permalink();
    }
    Lino.load_url(url);
  }
};
//~ Lino.run_permalink = function() {
  //~ var plink = Lino.gup('permalink');
  //~ if(plink) { eval('Lino.'+plink); }
//~ }


Lino.ajax_error_handler = function(panel) {
  return function(response,options) {
    console.log('Ajax failure:', response, options);
    if (panel.loadMask) panel.loadMask.hide();
    if (response.responseText) {
      var lines = response.responseText.split('\n');
      if (lines.length > 10) {
          line = lines.splice(5, lines.length-10, "(...)");
      }
      //~ console.log(20131005, response.statusText.toCamel());
      Ext.MessageBox.alert(
        response.statusText.toCamel(),
        lines.join('<br/>')
        //~ response.responseText.replace(/\n/g,'<br/>'))
      )
    } else {
      Ext.MessageBox.alert('Action failed',
        'Lino server did not respond to Ajax request');
    }
  }
}
// Ext.Ajax.on('requestexception',Lino.ajax_error_handler)
 


Ext.QuickTips.init();

/* setting QuickTips dismissDelay to 0 */
// Apply a set of config properties to the singleton
//~ Ext.apply(Ext.QuickTips.getQuickTip(), {
//~ Ext.apply(Ext.ToolTip, {
    //~ dismissDelay: 0
    //~ autoHide: false,
    //~ closable: true,
    //~ maxWidth: 200,
    //~ minWidth: 100,
    //~ showDelay: 50      // Show 50ms after entering target
    //~ ,trackMouse: true
//~ });


//~ Ext.apply(Ext.QuickTip, {
    //~ dismissDelay: 0,
//~ });
  
Lino.quicktip_renderer = function(title,body) {
  return function(c) {
    //~ if (c instanceof Ext.Panel) var t = c.bwrap; else // 20130129
    if (c instanceof Ext.Panel) var t = c.header; else // 20130129
    var t = c.getEl();
    //~ console.log(20130129,t,title,body);
    //~ t.dismissDelay = 0;
    Ext.QuickTips.register({
      target: t,
      //~ cls: 'lino-quicktip-classical',
      dismissDelay: 0,
      //~ autoHide: false,
      showDelay: 50,      // Show 50ms after entering target
      //~ title: title,
      text: body
    });
  }
};


  
Lino.help_text_editor = function() {
  //~ var bp = {
      //~ mk:this.content_type,
      //~ mt:1
    //~ };
    //~ console.log(20120202,bp);
  //~ Lino.lino.ContentTypes.detail({},{base_params:bp});
  //~ Lino.lino.ContentTypes.detail.run(null,{record_id:this.content_type});
  Lino.lino.ContentTypes.detail.run(null,{record_id:this.content_type});
}

// Path to the blank image should point to a valid location on your server
//~ Ext.BLANK_IMAGE_URL = MEDIA_URL + '/extjs/resources/images/default/s.gif'; 


// used as Ext.grid.Column.renderer for id columns in order to hide the special id value -99999
Lino.id_renderer = function(value, metaData, record, rowIndex, colIndex, store) {
  //~ if (record.phantom) return '';
  return value;
}

Lino.raw_renderer = function(value, metaData, record, rowIndex, colIndex, store) {
  return value;
}

Lino.text_renderer = function(value, metaData, record, rowIndex, colIndex, store) {
  //~ return "not implemented"; 
  return value;
}

Lino.NullNumberColumn = Ext.extend(Ext.grid.Column, {
    align : 'right', 
    format : '0,00/i', 
    renderer : function(value, metaData, record, rowIndex, colIndex, store) {
        //~ console.log(20130128,"NullNumberColumn.renderer",value);
        if (value === null) return '';
        return Ext.util.Format.number(value, this.format);
    }
});


Lino.fk_renderer = function(fkname,handlername) {
  //~ console.log('Lino.fk_renderer handler=',handler);
  return function(value, metaData, record, rowIndex, colIndex, store) {
    //~ console.log('Lino.fk_renderer',fkname,rowIndex,colIndex,record,metaData,store);
    //~ if (record.phantom) return '';
    if (value) {
        var s = '<a href="javascript:' ;
        s += handlername + '.run(null,{record_id:\'' + String(record.data[fkname]) + '\'})">';
        s += value + '</a>';
        //~ console.log('Lino.fk_renderer',value,'-->',s);
        return s
    }
    return '';
  }
};

Lino.lfk_renderer = function(panel,fkname) {
  //~ console.log('Lino.fk_renderer handler=',handler);
  var handlername = 'console.log';
  return function(value, metaData, record, rowIndex, colIndex, store) {
    //~ console.log('Lino.fk_renderer',fkname,rowIndex,colIndex,record,metaData,store);
    if (record.phantom) return '';
    if (value) {
        var s = '<a href="javascript:' ;
        s += handlername + '({},{record_id:\'' + String(record.data[fkname]) + '\'})">';
        s += value + '</a>';
        //~ console.log('Lino.fk_renderer',value,'-->',s);
        return s
    }
    return '';
  }
};

//~ Lino.gfk_renderer = function() {
  //~ return function(value, metaData, record, rowIndex, colIndex, store) {
    //~ if (record.phantom) return '';
    //~ console.log('Lino.gfk_renderer',value,colIndex,record,metaData,store);
    //~ return value;
  //~ }
//~ };


Lino.build_buttons = function(panel,actions) {
  //~ console.log("20121006 Lino.build_buttons",actions);
  if (actions) {
    var buttons = Array(actions.length);
    var cmenu = Array(actions.length);
    var keyhandlers = {};
    for (var i=0; i < actions.length; i++) { 
      var a = actions[i];
      if (a.menu) a.menu = Lino.build_buttons(panel,a.menu).bbar;
      buttons[i] = a;
      cmenu[i] = {
            text : a.menu_item_text,
            iconCls : a.iconCls,
            menu : a.menu
          };
      if (a.panel_btn_handler) {
          var h = a.panel_btn_handler.createCallback(panel);
          if (a.auto_save == true) {
              h = panel.do_when_clean.createDelegate(panel,[true,h]);
          } else if (a.auto_save == null) {
              h = panel.do_when_clean.createDelegate(panel,[false,h]);
          } else if (a.auto_save == false) {
              // h = h;
          } else {
              console.log("20120703 unhandled auto_save value",a)
          }
          buttons[i].handler = h;
          cmenu[i].handler = h;
          if (a.keycode) {
              keyhandlers[a.keycode] = h;
          }
          //~ if (buttons[i].xtype == 'splitbutton') {
              //~ cmenu[i].menu = a.menu;
          //~ } else {
              //~ cmenu[i].handler = h;
          //~ }
      } else {
          console.log("action without panel_btn_handler",a)
          // cmenu[i].handler = a.handler;
      }
    }
    return {
        bbar:buttons, 
        cmenu:new Ext.menu.Menu(cmenu),
        keyhandlers: keyhandlers
    };
  }
}

Lino.do_when_visible = function(cmp,todo) {
  //~ if (cmp.el && cmp.el.dom) 
  if (cmp.isVisible()) { 
    // 'visible' means 'rendered and not hidden'
    //~ console.log(cmp.title,'-> cmp is visible now');
    todo(); 
  //~ } else {
      //~ cmp.on('resize',todo,cmp,{single:true});
  //~ }
  //~ if (false) { // 20120213
  } else { 
    //~ console.log('Lino.do_when_visible() must defer because not isVisible()',todo,cmp);
    if (cmp.rendered) {
      //~ console.log(cmp,'-> cmp is rendered but not visible: and now?');
      //~ console.log(cmp.title,'-> cmp is rendered but not visible: try again in a moment...');
      //~ var fn = function() {Lino.do_when_visible(cmp,todo)};
      //~ fn.defer(100);
      
      Lino.do_when_visible.defer(50,this,[cmp,todo]);
      //~ Lino.do_when_visible.defer(100,this,[cmp,todo]);
      
    } else {
      //~ console.log(cmp.title,'-> after render');
      cmp.on('afterrender',todo,cmp,{single:true});
    }
  }
  
};    

/*
*/
Lino.do_on_current_record = function(panel,fn,phantom_fn) {
  var rec = panel.get_current_record();
  if (rec == undefined) {
    Lino.notify("There's no selected record.");
    return;
  }
  // 20120307 A VirtualTable with a Detail (lino.Models) has only "phantom" records.
  if (rec.phantom) {
    //~ if (!panel.editable) { console.log("20120312 not editable:",panel)}
    if (phantom_fn) {
      phantom_fn(panel);
    } else {
      Lino.notify("Action not available on phantom record.");
    }
    return;
  }
  return fn(rec);
};


Lino.call_ajax_action = function(
    panel, method, url, p, actionName, step, on_confirm, on_success) {
  p.an = actionName;
  if (!panel || !panel.isVisible()) {
  //~ if (true) { // 20131026 : workflow_actions of a newly created record detail executed but did't refresh the screen because their requesting panel was the insert (not the detail) formpanel.
      if (Lino.current_window) 
          panel = Lino.current_window.main_item;
      else panel = Lino.viewport;
  }
  Ext.apply(p, panel.get_base_params());

  if (panel.get_selected) {
      var selected_recs = panel.get_selected();
      //~ console.log("20130831",selected_recs);
      var rs = Array(selected_recs.length);
      for(var i=0; i < selected_recs.length;i++) {
          rs[i] = selected_recs[i].data.id;
      };
      p.sr = rs;
  }
  
  // console.log("20140516 Lino.call_ajax_action", p, actionName, step);
  
  if (panel.loadMask) panel.loadMask.show(); 
    
  Ext.Ajax.request({
    method: method
    ,url: url
    ,params: p
    ,success: Lino.action_handler(panel, on_success, on_confirm)
    ,failure: Lino.ajax_error_handler(panel)
  });
};




Lino.row_action_handler = function(actionName, hm, pp) {
  var p = {};
  var fn = function(panel, btn, step) {
      if (pp) { p = pp(panel); if (! p) return; }
      
      if (!panel || panel.get_current_record == undefined) { // AFTER_20130725
        panel = Ext.getCmp(panel);
        if (panel == undefined) {
          Lino.notify("Invalid panel spec.");
          return;
        }
      }
      
      Lino.do_on_current_record(panel, function(rec) {
          //~ console.log(panel);
          panel.add_param_values(p, true);
          Lino.call_ajax_action(
              panel, hm, panel.get_record_url(rec.id), 
              p, actionName, step, fn);
      });
  };
  return fn;
};

Lino.list_action_handler = function(ls_url,actionName,hm,pp) {
  var p = {};
  var url = '/api' + ls_url
  var fn = function(panel,btn,step) {
      //~ console.log("20121210 Lino.list_action_handler",arguments);
      if (pp) { p = pp(panel);  if (! p) return; }
      if (panel)  // may be undefined when called e.g. from quicklink
          panel.add_param_values(p,true);
      Lino.call_ajax_action(panel, hm,url, p, actionName, step, fn);
  };
  return fn;
};

Lino.param_action_handler = function(window_action) { // 20121012
  var fn = function(panel,btn,step) {
    Lino.do_on_current_record(panel,function(rec) {
      window_action.run(panel.getId(),{}); 
    });
  };
  return fn;
};


//~ 20130726 Lino.run_row_action = function(requesting_panel,url,pk,actionName,pp) {
Lino.run_row_action = function(
    requesting_panel, url, meth, pk, actionName, preprocessor) {
  //~ var panel = action.get_window().main_item;
  url = '/api' + url  + '/' + pk;
  var panel = Ext.getCmp(requesting_panel);
  if (preprocessor) var p = preprocessor(); else var p = {};
  var fn = function(panel,btn,step) {
    Lino.call_ajax_action(panel, meth, url, p, actionName, step, fn);
  }
  fn(panel,null,null);
}

Lino.put = function(requesting_panel, pk, data) {
    var panel = Ext.getCmp(requesting_panel);
    //~ var panel = null; // 20131026
    var p = {};
    p.an = 'put'; // SubmitDetail.action_name

    Ext.apply(p,data);
    var req = {
        params:p
        ,waitMsg: 'Saving your data...'
        ,scope: panel
        ,success: Lino.action_handler( panel, function(result) { 
            panel.refresh();
        })
        ,failure: Lino.ajax_error_handler(panel)
    };
    req.method = 'PUT';
    req.url = '/api' + panel.ls_url + '/' + pk;
    if (panel.loadMask) panel.loadMask.show(); 
    Ext.Ajax.request(req);
}



Lino.show_detail = function(panel, btn) {
  Lino.do_on_current_record(panel, 
    function(rec) {
      //~ panel.loadMask.show();
      Lino.run_detail_handler(panel, rec.id);
    },
    Lino.show_insert
  );
};

Lino.run_detail_handler = function(panel,pk) {
  var bp = panel.get_base_params();
  panel.add_param_values(bp); // 20120918
  var status = {
    record_id:pk,
    base_params:bp
  }
  //~ console.log("20120918 Lino.show_detail",status);
  panel.ls_detail_handler.run(null,status);
}

Lino.show_fk_detail = function(combo,detail_action,insert_action) {
    //~ console.log("Lino.show_fk_detail",combo,handler);
    pk = combo.getValue();
    if (pk) {
        detail_action.run(null,{record_id: pk})
      } else {
        insert_action.run(null,{record_id:-99999});
        //~ Lino.notify("Cannot show detail for empty foreign key.");
      }
};

Lino.show_insert = function(panel,btn) {
  var bp = panel.get_base_params();
  //~ console.log('20120125 Lino.show_insert',bp)
  //~ panel.ls_insert_handler.run(null,{record_id:-99999,base_params:bp});
  panel.ls_insert_handler.run(panel.getId(),{record_id:-99999,base_params:bp});
};



if (Ext.ux.grid !== undefined) {
    Lino.GridFilters = Ext.extend(Ext.ux.grid.GridFilters,{
      encode:true,
      local:false
    });
} else {
    Lino.GridFilters = function() {}; // dummy
    Ext.override(Lino.GridFilters,{
      init : function() {}
    });
};



Lino.FieldBoxMixin = {
  before_init : function(config,params) {
    if (params) Ext.apply(config,params);
    var actions = Lino.build_buttons(this, config.ls_bbar_actions);
    if (actions) config.bbar = actions.bbar;
  },
  //~ constructor : function(ww,config,params){
    //~ this.containing_window = ww;
    //~ if (params) Ext.apply(config,params);
    //~ var actions = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ if (actions) config.bbar = actions.bbar;
    //~ Lino.FieldBoxMixin.superclass.constructor.call(this, config);
  //~ },
  do_when_clean : function(auto_save,todo) { todo() },
  //~ format_data : function(html) { return '<div class="htmlText">' + html + '</div>' },
  format_data : function(html) { return html },
  get_base_params : function() {
    // needed for insert action
    var p = Ext.apply({}, this.base_params);
    Lino.insert_subst_user(p);
    return p;
  },
  set_base_params : function(p) {
    this.base_params = Ext.apply({},p);
    //~ if (p.param_values) this.set_param_values(p.param_values);  
  },
  clear_base_params : function() {
      this.base_params = {};
      Lino.insert_subst_user(this.base_params);
  },
  set_base_param : function(k,v) {
    this.base_params[k] = v;
  }
};



Lino.HtmlBoxPanel = Ext.extend(Ext.Panel,Lino.PanelMixin);
Lino.HtmlBoxPanel = Ext.extend(Lino.HtmlBoxPanel,Lino.FieldBoxMixin);
Lino.HtmlBoxPanel = Ext.extend(Lino.HtmlBoxPanel,{
  disabled_in_insert_window : true,
  constructor : function(config,params) {
    this.before_init(config,params);
    Lino.HtmlBoxPanel.superclass.constructor.call(this, config);
  },
  //~ constructor : function(ww,config,params){
    //~ this.ww = ww;
    //~ if (params) Ext.apply(config,params);
    //~ var actions = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ if (actions) config.bbar = actions.bbar;
    //~ Lino.FieldBoxMixin.constructor.call(this, ww,config,params);
  //~ },
  //~ constructor : function(ww,config,params){
    //~ this.ww = ww;
    //~ if (params) Ext.apply(config,params);
    //~ var actions = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ if (actions) config.bbar = actions.bbar;
    //~ Lino.FieldBoxMixin.superclass.constructor.call(this, config);
  //~ },
  //~ disable : function() { var tb = this.getBottomToolbar(); if(tb) tb.disable()},
  //~ enable : function() { var tb = this.getBottomToolbar(); if(tb) tb.enable()},
  onRender : function(ct, position){
    Lino.HtmlBoxPanel.superclass.onRender.call(this, ct, position);
    //~ console.log(20111125,this.containing_window);
    if (this.containing_panel) {
      this.containing_panel.on('enable',this.enable,this);
      this.containing_panel.on('disable',this.disable,this);
    }
    this.el.on({
      dragenter:function(event){
        event.browserEvent.dataTransfer.dropEffect = 'move';
        return true;
      }
      ,dragover:function(event){
        event.browserEvent.dataTransfer.dropEffect = 'move';
        event.stopEvent();
        return true;
      }
      ,drop:{
        scope:this
        ,fn:function(event){
          event.stopEvent();
          //~ console.log(20110516);
          var files = event.browserEvent.dataTransfer.files;
          if(files === undefined){
            return true;
          }
          var len = files.length;
          while(--len >= 0){
            console.log(files[len]);
            //~ this.processDragAndDropFileUpload(files[len]);
          }
          Lino.show_insert(this);
        }
      }
    });
  },
  refresh : function(unused) { 
      this.refresh_with_after();
  },
  /* HtmlBoxPanel */
  refresh_with_after : function(after) {
      // var todo = this.containing_panel.refresh();
      var box = this.items.get(0);
      var todo = function() {
        if (this.disabled) { return; }
        this.set_base_params(this.containing_panel.get_master_params());

        var el = box.getEl();
        if (el) {
            var record = this.containing_panel.get_current_record();
            var newcontent = record ? 
                this.format_data(record.data[this.name]) : '';
            // console.log('20140504 HtmlBox.refresh()',this.name, record);
            el.update(newcontent, true);
        } else {
            console.log('20140502 cannot HtmlBox.refresh()',this.name);
        }
      };

      Lino.do_when_visible(box,todo.createDelegate(this));
  }
});
//~ Ext.override(Lino.HtmlBoxPanel,Lino.FieldBoxMixin);



Lino.RichTextPanel = Ext.extend(Ext.Panel,Lino.PanelMixin);
Lino.RichTextPanel = Ext.extend(Lino.RichTextPanel,Lino.FieldBoxMixin);
Lino.RichTextPanel = Ext.extend(Lino.RichTextPanel,{
    
  //~ initComponent : function(){
    //~ Lino.RichTextPanel.superclass.initComponent.call(this);
  //~ },
  constructor : function(config,params) {
    //~ console.log('Lino.RichTextPanel.initComponent',this);
    //~ var url = TEMPLATES_URL + config.ls_url + "/" + String(rec.id) + "/" + config.name;
    //~ var url = TEMPLATES_URL + config.ls_url + "/" + config.name;
    var t = this;
    var tinymce_options = {
        theme : "advanced",
        content_css: '/media/lino/extjs/lino.css',
        language: 'en',
        //~ template_external_list_url : url,
        theme_advanced_toolbar_location : "top",
        theme_advanced_toolbar_align : "left",
        theme_advanced_statusbar_location : "bottom",
        template_popup_width : 700,
        template_popup_height : 500,
        template_replace_values : { 
            data_field : function(element){ 
                //~ console.log(20110722,fieldName,t.containing_window.get_current_record()); 
                var fieldName = element.innerHTML;
                element.innerHTML = t.containing_panel.get_current_record().data[fieldName];
            } 
        }
      };
      
    var editorConfig = {
      tinymceSettings: {
        plugins : "noneditable,template", 
        // Theme options - button# indicated the row# only
        theme_advanced_buttons1 : "bold,italic,underline,|,justifyleft,justifycenter,justifyright,|,bullist,numlist,|,outdent,indent,|,undo,redo,|,removeformat,template",
        theme_advanced_buttons2 : "",
        theme_advanced_buttons3 : "", // ,|,sub,sup,|,charmap",      
        theme_advanced_resizing : false
        //~ save_onsavecallback : save_callback,
        //~ save_enablewhendirty : true
        //~ save_oncancelcallback: on_cancel
        
    }};
    Ext.apply(editorConfig.tinymceSettings,tinymce_options);
    //~ editorConfig.name = config.action_name;
    editorConfig.name = config.name;
    delete config.name;
    //~ config.title = config.label;
    //~ delete config.label;
    this.before_init(config,params);
    
    this.editor = new Ext.ux.TinyMCE(editorConfig);
    var t = this;
    config.tools = [{
                      qtip: "Edit text in own window", 
                      id: "up",
                      handler: function(){
                        if(t.editor.isDirty()) {
                            var record = t.containing_panel.get_current_record();
                            record.data[t.editor.name] = t.editor.getValue();
                        }
                        Lino.edit_tinymce_text(t, tinymce_options)
                      }
                    }];
    
    config.items = this.editor;
    config.layout = "fit";
    Lino.RichTextPanel.superclass.constructor.call(this, config);
  },
  refresh : function(unused) { 
      this.refresh_with_after();
  },
  /* RichTextPanel */
  refresh_with_after : function(after) {
    var record = this.containing_panel.get_current_record();
    // console.log('20140504 RichTextPanel.refresh()',
    //             this.title,record.title, record);
    var todo = function() {
      if (record) {
        var url = '/templates' 
              + this.containing_panel.ls_url + "/" 
              + String(record.id) + "/" + this.editor.name;
        //~ console.log('RichTextPanel.refresh()',url);
        if (this.editor.ed) this.editor.ed.settings.template_external_list_url = url;
        this.set_base_params(this.containing_panel.get_master_params());
        //~ var v = record ? this.format_data(record.data[this.editor.name]) : ''
        var v = this.format_data(record.data[this.editor.name])
        this.editor.setValue(v);
      } else {
        this.editor.setValue('(no data)');
      }
    };
    Lino.do_when_visible(this,todo.createDelegate(this));
  }
});
//~ Ext.override(Lino.RichTextPanel,Lino.FieldBoxMixin);



Lino.ActionFormPanel = Ext.extend(Ext.form.FormPanel,Lino.MainPanel);
Lino.ActionFormPanel = Ext.extend(Lino.ActionFormPanel,Lino.PanelMixin);
Lino.ActionFormPanel = Ext.extend(Lino.ActionFormPanel,Lino.FieldBoxMixin);
Lino.ActionFormPanel = Ext.extend(Lino.ActionFormPanel,{
  //~ layout:'fit'
  //~ ,autoHeight: true
  //~ ,frame: true
  window_title : "Action Parameters",
  constructor : function(config){
    config.bbar = [
        {text: 'OK', handler: this.on_ok, scope: this},
        {text: 'Cancel', handler: this.on_cancel, scope: this}
    ];
    Lino.ActionFormPanel.superclass.constructor.call(this, config);
  }
  //~ ,initComponent : function(){
    //~ Lino.ActionFormPanel.superclass.initComponent.call(this);
  //~ }
  ,on_cancel : function() { 
    this.get_containing_window().close();
  }
  ,on_ok : function() { 
    var panel = this.requesting_panel;
    // var panel = this.get_containing_window().main_item;
    // console.log("20131004 on_ok",this,panel,arguments);
    var actionName = this.action_name;
    var pk = this.record_id;
    if (pk == undefined && this.base_params) { pk = this.base_params.mk; }
    if (pk == undefined && panel) {
        pk = panel.get_current_record().id;
    }
    if (pk == undefined) {
        Lino.alert("Sorry, dialog action without base_params.mk");
        return;
    }
    var self = this;
    // function on_success() { self.get_containing_window().close(); };
    // see 20131004 and 20140430
    var url = '/api';
    if (panel) 
        url += panel.ls_url;
    else 
        url += this.ls_url;
    url += '/' + pk;
    // prepare possible recursive call
    var fn = function(panel, btn, step) {
      var p = {};
      self.add_field_values(p)
      Lino.call_ajax_action(
          panel, 'GET', url, p, actionName, step, fn); //  , on_success);
    }
    fn(panel, null, null);
    
    
  }
  /* ActionFormPanel*/
  ,set_status : function(status, rp){
    this.requesting_panel = Ext.getCmp(rp);
    //~ console.log('20120918 ActionFormPanel.set_status()',status,rp,this.requesting_panel);
    this.clear_base_params();
    if (status == undefined) status = {};
    //~ if (status.param_values) 
    this.set_field_values(status.field_values);
    if (status.base_params) this.set_base_params(status.base_params);
    this.record_id = status.record_id;
  }
  
  ,before_row_edit : function(record) {}
  ,add_field_values : function (p) { // similar to add_param_values()
      //~ 20121023 
      if (this.form.isDirty()) {
        p.fv = this.get_field_values();
      }else{
        if (this.status_field_values) 
          p.fv = Lino.fields2array(this.fields,this.status_field_values);
      }
      //~ if (!this.form.isDirty()) return;
      //~ p.$ext_requests.URL_PARAM_FIELD_VALUES = this.get_field_values();
      //~ console.log("20120203 add_param_values added pv",pv,"to",p);
  }
  ,get_field_values : function() {
      return Lino.fields2array(this.fields);
  }
  ,set_field_values : function(pv) {
      //~ console.log('20120203 MainPanel.set_param_values', pv);
      this.status_field_values = pv;
      if (pv) {
          this.form.my_loadRecord(pv);
          var record = { data: pv };
          this.before_row_edit(record);
      } else {
          this.form.reset(); 
          this.before_row_edit();
      }
  }
  ,config_containing_window : function(wincfg) { 
      wincfg.title = this.window_title;
      wincfg.keys = [
        { key: Ext.EventObject.ENTER, fn: this.on_ok }
      ]
  }
});

    
Lino.fields2array = function(fields,values) {
    //~ console.log('20130605 fields2array gonna loop on', fields,values);
    var pv = Array(fields.length);
    for(var i=0; i < fields.length;i++) {
        var f = fields[i]
        if (values) 
          var v = values[f.name];
        else 
          var v = f.getValue();
        if (f.formatDate) {
            pv[i] = f.formatDate(v); 
        } else {
            pv[i] = v; // f.getValue(); 
        }
    }
    return pv;
}


Lino.FormPanel = Ext.extend(Ext.form.FormPanel,Lino.MainPanel);
Lino.FormPanel = Ext.extend(Lino.FormPanel,Lino.PanelMixin);
Lino.FormPanel = Ext.extend(Lino.FormPanel,{
  params_panel_hidden : false,
  save_action_name : null, 
  //~ base_params : {},
  //~ trackResetOnLoad : true,
  //~ query_params : {},
  //~ 20110119b quick_search_text : '',
  constructor : function(config,params){
    if (params) Ext.apply(config,params);
    this.base_params = {};
    //~ ww.config.base_params.query = ''; // 20111018
    //~ console.log(config);
    //~ console.log('FormPanel.constructor() 1',config)
    //~ Ext.applyIf(config,{base_params:{}});
    //~ console.log('FormPanel.constructor() 2',config)
      
    config.trackResetOnLoad = true;
    
    Lino.FormPanel.superclass.constructor.call(this, config);
      
    //~ this.set_base_param('$URL_PARAM_FILTER',null); // 20111018
    //~ this.set_base_param('$URL_PARAM_FILTER',''); // 20111018
      
  },
  initComponent : function(){
    
    this.containing_panel = this;

    //~ console.log("20111201 containing_window",this.containing_window,this);


    var actions = Lino.build_buttons(this,this.ls_bbar_actions);
    if (actions) {
        this.bbar = actions.bbar;
    //~ } else {
        //~ this.bbar = [];
    }
    //~ Ext.apply(config,Lino.build_buttons(this,config.ls_bbar_actions));
    //~ config.bbar = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ var config = this;
    
    //~ if (this.containing_window instanceof Lino.DetailWrapper) {
    
    //~ console.log('20120121 initComponent', this.action_name);
    //~ if (this.action_name == 'detail' | this.action_name == 'show') {
    //~ if (this.action_name != 'insert') {
    if (! this.hide_top_toolbar) {
      this.tbar = [];
      // 20111015    
      if (! this.hide_navigator) {
        this.record_selector = new Lino.RemoteComboFieldElement({
          store: new Lino.ComplexRemoteComboStore({
            //~ baseParams: this.containing_window.config.base_params,
            baseParams: this.get_base_params(),
            //~ value: this.containing_window.config.base_params.query,
            proxy: new Ext.data.HttpProxy({
              url: '/choices' + this.ls_url,
              method:'GET'
            })
          }),
          pageSize:25,
          listeners: { 
            scope:this, 
            select:function(combo,record,index) {
              //~ console.log('jumpto_select',arguments);
              this.goto_record_id(record.id);
            }
          },
          emptyText: "Go to record"
        })
        this.tbar = this.tbar.concat([this.record_selector]);
        
        this.tbar = this.tbar.concat([
          this.first = new Ext.Toolbar.Button({
              tooltip:"First",disabled:true,
              handler:this.moveFirst,scope:this,iconCls:'x-tbar-page-first'}),
          this.prev = new Ext.Toolbar.Button({
              tooltip:"Previous",disabled:true,
              handler:this.movePrev,scope:this,iconCls:'x-tbar-page-prev'}),
          this.next = new Ext.Toolbar.Button({
              tooltip:"Next",disabled:true,
              handler:this.moveNext,scope:this,iconCls:'x-tbar-page-next'}),
          this.last = new Ext.Toolbar.Button({
              tooltip:"Last",disabled:true,
              handler:this.moveLast,scope:this,iconCls:'x-tbar-page-last'})
        ]);
      }
      this.tbar = this.add_params_panel(this.tbar);
      
      //~ console.log(20101117,this.containing_window.refresh);
      this.tbar = this.tbar.concat([
        {
          //~ text:'Refresh',
          handler:function(){ this.do_when_clean(false,this.refresh.createDelegate(this)) },
          iconCls: 'x-tbar-loading',
          tooltip:"Reload current record",
          scope:this}
      ]);
          
      if (this.bbar) { // since 20121016
        if (this.tbar) {
            this.tbar = this.tbar.concat(['-']) ;
        } else {
          this.tbar = [];
        }
        this.tbar = this.tbar.concat(this.bbar) ;
        this.bbar = undefined;
      }
    
      this.tbar = this.tbar.concat([
          '->',
          this.displayItem = new Ext.Toolbar.TextItem({})
      ]);
          
    }
    //~ if (this.content_type && this.action_name != 'insert') {
      //~ this.bbar = this.bbar.concat([
        //~ '->',
        //~ { text: "[$_('Help Text Editor')]",
          //~ handler: Lino.help_text_editor,
          //~ qtip: "$_('Edit help texts for fields on this model.')",
          //~ scope: this}
      //~ ])
    //~ }
    //~ this.before_row_edit = config.before_row_edit.createDelegate(this);
      
    //~ if (this.master_panel) {
        //~ this.set_base_params(this.master_panel.get_master_params());
    //~ }
      
    Lino.FormPanel.superclass.initComponent.call(this);

    // this.on('show',
    //         function(){ this.init_focus();}, 
    //         this);
    
    this.on('render',function(){
      this.loadMask = new Ext.LoadMask(this.bwrap,{msg:"Please wait..."});
    },this);
    
    
    if (this.action_name == 'insert') {
      this.cascade(function(cmp){
        // console.log('20110613 cascade',cmp);
        if (cmp.disabled_in_insert_window) {
            //~ cmp.disable();
            cmp.hide();
        }
      });
      
    }
    
  },
  
  unused_init_focus : function(){ 
    // set focus to the first field
    console.log("20140205 Lino.FormPanel.init_focus");
    // Lino.FormPanel.superclass.focus.call(this);
    this.getForm().items.each(function(f){
        if(f.isFormField && f.rendered){ 
            f.focus();
            console.log("20140205 focus", f);
            return false;
        }
    });
  },

  get_status : function(){
      var st = {
        base_params: this.get_base_params(),
        data_record : this.get_current_record()
        }
      var tp = this.items.get(0);
      if (tp instanceof Ext.TabPanel) {
        st.active_tab = tp.getActiveTab();
      }
      st.param_values = this.status_param_values;
      return st;
  },

  /* FormPanel */
  set_status : function(status, rp){
    this.requesting_panel = Ext.getCmp(rp);
    // console.log('20140527 FormPanel.set_status()', status);
    this.clear_base_params();
    if (status == undefined) status = {};
    //~ if (status.param_values) 
    this.set_param_values(status.param_values);
    if (status.base_params) this.set_base_params(status.base_params);
    var tp = this.items.get(0);
    if (tp instanceof Ext.TabPanel) {
      if (status.active_tab) {
        //~ console.log('20111201 active_tab',this.active_tab,this.items.get(0));
        //~ tp.activeTab = status.active_tab;
        tp.setActiveTab(status.active_tab);
        //~ this.main_item.items.get(0).activate(status.active_tab);
      } else {
        tp.setActiveTab(0);
      }
      }
    
    if (status.data_record) {
      /* defer because set_window_title() didn't work otherwise */
      // 20140421 removed defer for bughunting to simplify side effects
      // this.set_current_record.createDelegate(
      //     this, [status.data_record]).defer(100);
      this.set_current_record(status.data_record);
      //~ return;
    } else if (status.record_id != undefined) { 
      /* possible values include 0 and null, 0 being a valid record id, 
      null the equivalent of undefined
      */
      //~ this.main_item.goto_record_id(this.status.record_id);
      this.load_record_id(status.record_id);
    } else {
      this.set_current_record(undefined);
    }
    // this.init_focus()
  }
  ,get_base_params : function() {  /* FormPanel */
    // needed for insert_action
    var p = Ext.apply({}, this.base_params);
    Lino.insert_subst_user(p);
    return p;
  }
  ,set_base_params : function(p) {
    //~ this.base_params = Ext.apply({},this.base_params); // make sure it is an instance variable
    delete p['query'] // 20120725
    Ext.apply(this.base_params,p);
    if (this.record_selector) {
        var store = this.record_selector.getStore();
        for (k in p) store.setBaseParam(k,p[k]);
        delete this.record_selector.lastQuery;
        //~ console.log("20120725 record_selector.setBaseParam",p)
    }
  }
  ,clear_base_params : function() {
      this.base_params = {};
      Lino.insert_subst_user(this.base_params);
  }
  ,set_base_param : function(k,v) {
    this.base_params[k] = v;
  }
  ,after_delete : function() {
    if (this.current_record.navinfo.next)
      this.moveNext();
    else if (this.current_record.navinfo.prev)
      this.movePrev();
    else 
      this.abandon();
  }
  ,moveFirst : function() {this.goto_record_id(
      this.current_record.navinfo.first)}
  ,movePrev : function() {this.goto_record_id(
      this.current_record.navinfo.prev)}
  ,moveNext : function() {this.goto_record_id(
      this.current_record.navinfo.next)}
  ,moveLast : function() {this.goto_record_id(
      this.current_record.navinfo.last)}
  
  ,refresh : function(unused) { 
      this.refresh_with_after();
  }
  /* FormPanel */
  ,refresh_with_after : function(after) { 
    // console.log('20140504 Lino.FormPanel.refresh()',this);
    if (this.current_record) {
        this.load_record_id(this.current_record.id, after);
    } else {
        this.set_current_record(undefined,after);
    }
  }
  
  ,do_when_clean : function(auto_save, todo) {
    var this_ = this;
    if (this.form.isDirty()) {
        // console.log('20140421 do_when_clean : form is dirty')
        if (auto_save) {
            this_.save(todo);
        } else {
          //~ console.log('20111217 do_when_clean() form is dirty',this.form);
          var config = {title:"Confirmation"};
          config.buttons = Ext.MessageBox.YESNOCANCEL;
          config.msg = "Save changes to current record ?";
          config.fn = function(buttonId,text,opt) {
            //~ console.log('do_when_clean',buttonId)
            if (buttonId == "yes") {
                //~ Lino.submit_detail(this_,undefined,todo);
                //~ this_.containing_window.save(todo);
                this_.save(todo);
            } else if (buttonId == "no") { 
              todo();
            }
          }
        }
        Ext.MessageBox.show(config);
    }else{
      // console.log('20140421 do_when_clean : now!')
      todo();
    }
  }
  
  ,goto_record_id : function(record_id) {
    //~ console.log('20110701 Lino.FormPanel.goto_record_id()',record_id);
    //~ var this_ = this;
    //~ this.do_when_clean(function() { this_.load_record_id(record_id) }
    this.do_when_clean(
        true, this.load_record_id.createDelegate(this, [record_id]));
  }
  
  ,load_record_id : function(record_id, after) {
    var this_ = this;
    var p = Ext.apply({}, this.get_base_params());
    if (this.action_name)
        p.an = this.action_name;
    p.rp = this.getId();
    p.fmt = 'json';
    this.add_param_values(p);
    if (this.loadMask) this.loadMask.show();
    Ext.Ajax.request({ 
      waitMsg: 'Loading record...',
      method: 'GET',
      params: p,
      scope: this,
      url: this.get_record_url(record_id),
      success: function(response) {   
        // todo: convert to Lino.action_handler.... but result 
        if (this.loadMask) this.loadMask.hide();
        if (response.responseText) {
          var rec = Ext.decode(response.responseText);
          // console.log('20140418 load_record_id success',rec);
          this.set_param_values(rec.param_values);
          this.set_current_record(rec, after);
        }
      },
      failure: Lino.ajax_error_handler(this)
    });
  }

  ,abandon : function () {
    Ext.MessageBox.alert('Note',
      "No more records to display. Detail window has been closed.");
    Lino.close_window();
  }
  
  ,set_current_record : function(record, after) {
    if (this.record_selector) {
        this.record_selector.clearValue();
        // e.g. InsertWrapper FormPanel doesn't have a record_selector
    }
    this.current_record = record;
    if (record) {
      this.enable();
      this.form.my_loadRecord(record.data);
      this.set_window_title(record.title);
      //~ this.getBottomToolbar().enable();
      var da = record.data.disabled_actions;
      if (da) {
          //~ console.log('20120528 disabled_actions =',da,this.getBottomToolbar());
          //~ 20121016 this.getBottomToolbar().items.each(function(item,index,length){
          var tb = this.getTopToolbar();
          if (tb) tb.items.each(function(item,index,length){
              //~ console.log('20120528 ',item.itemId,'-->',da[item.itemId]);
              if (da[item.itemId]) item.disable(); else item.enable();
          });
      };
      if (this.disable_editing | record.data.disable_editing) {
          //~ console.log("20120202 disable_editing",record.title);
          this.form.items.each(function(cmp){
            if (!cmp.always_enabled) cmp.disable();
          },this);
      } else {
          this.form.items.each(function(cmp){
            //~ console.log("20120202",cmp);
            if (record.data.disabled_fields[cmp.name]) cmp.disable();
            else cmp.enable();
          },this);
        
          //~ if (record.data.disabled_fields) {
              //~ for (i = 0; i < record.data.disabled_fields.length; i++) {
                  //~ var flds = this.find('name',record.data.disabled_fields[i]);
                  //~ if (flds.length == 1) { 
                    //~ flds[0].disable(); 
                  //~ }
              //~ }
          //~ }
      };
      if (this.first) {
        if (record.navinfo  && ! this.hide_navigator) {
          this.first.setDisabled(!record.navinfo.first);
          this.prev.setDisabled(!record.navinfo.prev);
          this.next.setDisabled(!record.navinfo.next);
          this.last.setDisabled(!record.navinfo.last);
          this.displayItem.setText(record.navinfo.message);
        } else {
          this.first.setDisabled(true);
          this.prev.setDisabled(true);
          this.next.setDisabled(true);
          this.last.setDisabled(true);
        }
      }
    } else {
      if (this.form.rendered) 
        this.form.reset(); /* FileUploadField would fail when resetting a non-rendered form */
      //~ this.disable();
      //~ this.getBottomToolbar().disable();
      this.form.items.each(function(cmp){
        cmp.disable();
      },this);
      this.set_window_title(this.empty_title);
      //~ this.containing_window.window.setTitle(this.empty_title);
      if (!this.hide_navigator) {
        this.first.disable();
        this.prev.disable();
        this.next.disable();
        this.last.disable();
      }
    }
    // console.log('20140421 gonna call before_row_edit',record);
    this.before_row_edit(record);
    // console.log('20140421 gonna call after',after);
    if (after) after();
  },
  
  /* FormPanel */
  before_row_edit : function(record) {},
  search_change : function(field,oldValue,newValue) {
    //~ console.log('search_change',field.getValue(),oldValue,newValue)
    this.set_base_param('query',field.getValue()); 
    this.refresh();
  },
  
  get_selected : function() { return [ this.current_record ] },
  get_current_record : function() {  
    //~ console.log(20100714,this.current_record);
    return this.current_record 
  },
  
  get_permalink_url : function() {
      var rec = this.get_current_record();
      if (rec && ! rec.phantom && rec.id != -99998)
          return '/api' 
              + this.ls_url + '/' + rec.id;
      return '/api' + this.ls_url;
    
  },
  get_permalink_params : function() {
    var p = {};
    //~ var p = {an:'detail'};
    if (this.action_name)
        p.an = this.action_name;
    //~ var p = {an:this.action_name};
    var main = this.items.get(0);
    if (main.activeTab) {
      var tab = main.items.indexOf(main.activeTab);
      //~ console.log('main.activeTab',tab,main.activeTab);
      if (tab) p.tab = tab;
    }
    this.add_param_values(p)
    return p;
  }
  
  ,validate_form : function() {  // not used. see actions.ValidateForm
      // var ov = {};
      // this.form.items.each(function(f){
      //     ov[f.name] = f.originalValue
      // });

      // console.log('20140509 FormPanel.validate_form', ov);
      // var after = function() { 
      //     this.form.items.each(function(f){
      //         f.originalValue = ov[f.name];
      //     });
      // }
      // this.save2(null, 'validate', after);
      this.save2(null, 'validate');
  }

  /* Lino.FormPanel */
  ,save : function(after) {
    var action_name = this.save_action_name;
    if (!action_name) 
        action_name = this.action_name;
    // console.log('20140503 FormPanel.save', action_name);
    this.save2(after, action_name);
  }

  ,save2 : function(after, action_name) {
    var rec = this.get_current_record();
    if (!rec) { 
        Lino.notify("Sorry, no current record."); 
        return; 
    }
    var panel = this;
    if (this.has_file_upload) this.form.fileUpload = true;
    //~ console.log('FormPanel.save()',rec);
    this.loadMask.show();
    var p = {};
    Ext.apply(p, this.get_base_params());
    p.rp = this.getId();
    p.an = action_name;
    var submit_config = {
        params: p, 
        scope: this,
        success: function(form, action) {
          this.loadMask.hide();
          Lino.notify(action.result.message);
          Lino.handle_action_result(this, action.result, after);
        },
        failure: function(form,action) { 
          this.loadMask.hide();
          Lino.on_submit_failure(form, action);
        },
        clientValidation: true
    };
    if (rec.phantom) {  // it's a new record
      Ext.apply(submit_config, {
        url: '/api' + this.ls_url,
        method: 'POST'
      });
    } else {  // submit on existing row
      Ext.apply(submit_config, {
        url: '/api' 
              + this.ls_url + '/' + rec.id,
        method: 'PUT'
      })
    }
    this.form.submit(submit_config);
  }
  
  ,on_cancel : function() { 
    this.get_containing_window().close();
  }
  ,on_ok : function() { 
      // console.log("20140424");
      // this.save(null, true, this.save_action_name);
      this.save();
  }
  ,config_containing_window : function(wincfg) { 

      // Note that defaultButton means: which component should receive
      // focus when Window is focussed.  If no defaultButton set,
      // specify the first form field.

      if (!wincfg.defaultButton) this.getForm().items.each(function(f){
          if(f.isFormField){ 
              wincfg.defaultButton = f;
              // console.log("20140205 defaultButton", f);
              return false;
          }
      });

      wincfg.keys = [
          {
              key: Ext.EventObject.ENTER,
              scope:this,
              fn: function(k, e) {
                  if(e.target.type === 'textarea' && !e.ctrlKey) {
                      return true;
                  }
                  this.on_ok();
              }
          },
          { key: Ext.EventObject.ESCAPE, fn: this.on_cancel, scope:this }
          // ,{ key: 's', ctrl: true, 
          //    stopEvent: true,
          //    fn: this.on_ctrl_s, scope:this }
      ]
  }
  
});



Lino.getRowClass = function(record, rowIndex, rowParams, store) {
    //~ console.log(20130816,record);
    //~ return 'x-grid3-row-green';
    //~ return record.data.row_class + ' auto-height';
    return record.data.row_class;
  //~ if (true) {
      //~ return 'x-grid3-row-red';
  //~ }
  //~ if (record.phantom) {
    //~ console.log(20101009,record);
    //~ rowParams.bodyStyle = "color:red;background-color:blue";
    //~ return 'lino-phantom-row';
    //~ }
  //~ console.log('20101009 not a phantom:',record);
  //~ return '';
}

//~ FOO = 0;



Lino.GridStore = Ext.extend(Ext.data.ArrayStore,{ 
  autoLoad: false
  ,load: function(options) {
    //~ foo.bar = baz; // 20120213
    if (!options) options = {};
    if (!options.params) options.params = {};
    options.params.fmt = 'json';
    options.params.rp = this.grid_panel.getId();
    Lino.insert_subst_user(options.params); // since 20121016
      
    if (this.grid_panel.hide_top_toolbar) {
        //~ console.log("20120206 GridStore.load() toolbar is hidden");
        options.params.start = 0;
        if (this.grid_panel.preview_limit) {
          options.params.limit = this.grid_panel.preview_limit;
        }
    } else {
        var ps = this.grid_panel.calculatePageSize();
        if (!ps) {
            //~ this.gridpanel.on('render',this.load())
          //~ console.log("20120814 GridStore.load() failed to calculate pagesize");
          return false;
            //~ params.$URL_PARAM_LIMIT = 1;
            //~ this.grid_panel.on('render',this.load.createDelegate(this,options))
            //~ return;
        } 
        options.params.limit = ps;
      
        //~ options.params.start = this.grid_panel.getTopToolbar().cursor;
        //~ if (this.grid_panel.getTopToolbar().pageSize !=  ps) {
          //~ console.log("20120206 abort load because toolbar says pagesize",
            //~ this.grid_panel.getTopToolbar().pageSize,
            //~ "while actual pagesize is",ps);
            //~ return;
        //~ }
        
        this.grid_panel.getTopToolbar().pageSize =  ps;
        if (options.params.start == undefined)
            options.params.start = this.grid_panel.getTopToolbar().cursor;
      
    }
      
    this.grid_panel.add_param_values(options.params);
    //~ Lino.insert_subst_user(options.params);
    //~ console.log("20120814 GridStore.load()",options.params,this.baseParams);
    //~ if (FOO > 0) {
        //~ foo.bar = baz;
    //~ } else FOO += 1;
    return Lino.GridStore.superclass.load.call(this,options);
  }
});

Lino.get_current_grid_config = function(panel) {
    return panel.get_current_grid_config();
}


// Like the default value for GridView.cellTpl but adds a class "lino-auto-height"
Lino.auto_height_cell_template = new Ext.Template(
'<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} {css}" style="{style}" tabIndex="0" {cellAttr}>',
    '<div class="lino-auto-height x-grid3-cell-inner x-grid3-col-{id}" unselectable="on" {attr}>{value}</div>',
'</td>'
);

Lino.GridPanel = Ext.extend(Ext.grid.EditorGridPanel,Lino.MainPanel);
Lino.GridPanel = Ext.extend(Lino.GridPanel,Lino.PanelMixin);
Lino.GridPanel = Ext.extend(Lino.GridPanel,{
  quick_search_text : '',
  is_searching : false,
  disabled_in_insert_window : true,
  clicksToEdit:2,
  enableColLock: false,
  autoHeight: false,
  params_panel_hidden : false,
  preview_limit : undefined, 
  //~ loadMask: true,
  //~ viewConfig: {
          //~ getRowClass: Lino.getRowClass,
          //~ emptyText:"$_('No data to display.')"
        //~ },
        
        
  loadMask: {msg:"Please wait..."},
  
  constructor : function(config){

    config.plugins = [new Lino.GridFilters()];
    
    
    Lino.GridPanel.superclass.constructor.call(this,config);
    
    //~ if (this.containing_window) {
        //~ console.log("20111206 install refresh");
        //~ this.containing_window.on('show',this.refresh,this);
    //~ }
    
  },
  
  init_containing_window : function(win) { 
    //~ console.log("20111206 install refresh");
    //~ win.on('show',this.refresh,this);
  }

  ,handle_key_event : function(e) { 
    // console.log("20140514 handle_key_event", e, this.keyhandlers);
    var h = this.keyhandlers[e.keyCode];
    if (h) {
      h(this);
      e.stopEvent();
    }
  }
  
  ,initComponent : function(){
    
    /* 
    Problem 20111206:
    When a GridPanel is the main item of the window, then it doesn't 
    have it's own header but uses the window's header bar.
    We must do this in initComponent because e.g. in beforerender 
    it's already to late: a header element has been created because 
    there was a title.
    But Lino.Window adds itself as `this.containing_window` 
    only after the GridPanel has been initialized.
    Workaround is to generate a line "params.containing_window = true;" 
    in the handler function.
    */ 
    //~ if (this.containing_window) {
    if (this.is_main_window) {
        //~ console.log(20111206, 'delete title',this.title,'from',this);
        //~ delete this.title;
        this.tools = undefined;  
        this.title = undefined;  /* simply deleting it 
          isn't enough because that would only 
          unhide the title defined in some base class. */
    } 
    //~ else console.log(20111206, 'dont delete title',this.title,'from',this);
    
    /* e.g. when slave gridwindow called from a permalink */
    //~ if (this.base_params) Ext.apply(bp,this.base_params);  
    //~ bp['fmt'] = 'json';
    
    //~ function on_proxy_write( proxy, action,data, response,rs,options) {
      //~ console.log('20120814 on_proxy_write',action,data,response)
      //~ this.getStore().doUpdate();
      //~ this.getStore().loadData(data);
    //~ }
    //~ function on_proxy_load( proxy, transactionObject, callbackOptions ) {
      //~ console.log('on_proxy_load',transactionObject)
    //~ }
    var proxy = new Ext.data.HttpProxy({ 
      // 20120814 
      url: '/api' + this.ls_url
      ,method: "GET"
      //~ ,url: ADMIN_URL + '/restful' + this.ls_url
      //~ ,restful: true 
      //~ ,listeners: {load:on_proxy_load} 
      //~ ,listeners: {write:on_proxy_write} 
    });
    //~ config.store = new Ext.data.JsonStore({ 
    //~ this.store = new Ext.data.ArrayStore({ 
    this.store = new Lino.GridStore({ 
      grid_panel: this
      ,listeners: { exception: Lino.on_store_exception }
      ,remoteSort: true
      ,totalProperty: "count"
      ,root: "rows"
      //~ ,id: "id" 
      ,proxy: proxy
      //~ autoLoad: this.containing_window ? true : false
      ,idIndex: this.pk_index
      //~ ,baseParams: bp
      ,fields: this.ls_store_fields
      ,idProperty: this.ls_id_property 
      // 20120814
      //~ ,writer : new Ext.data.JsonWriter({
        //~ writeAllFields: false
        //~ ,listful: true
      //~ })
      //~ ,restful : true
    });
      
    //~ console.log('config.pk_index',config.pk_index,config.store),
    delete this.ls_store_fields;
      
    var this_ = this;
    //~ var grid = this;
    this.store.on('load', function() {
        //~ console.log('20120814 GridStore.on(load)',this_.store);
        //~ var da = this_.store.reader.arrayData.disabled_actions;
        //~ if (da) {
            //~ this.cmenu.cascade(function(item){ 
              //~ console.log(20120531, item.itemId, da[item.itemId]);
              //~ if (da[item.itemId]) item.disable(); else item.enable();
            //~ });
        //~ };
        this_.set_param_values(this_.store.reader.arrayData.param_values);
        //~ this_.set_status(this_.store.reader.arrayData.status);
        //~ 20120918
        this.getView().getRowClass = Lino.getRowClass;
        
        if (this_.store.reader.arrayData.no_data_text) {
            //~ this.viewConfig.emptyText = this_.store.reader.arrayData.no_data_text;
            this.getView().emptyText = this_.store.reader.arrayData.no_data_text;
            this.getView().refresh();
        }
        if (this_.containing_window)
            this_.set_window_title(this_.store.reader.arrayData.title);
            //~ this_.containing_window.setTitle(this_.store.reader.arrayData.title);
        if (!this.is_searching) { // disabled 20121025: quick_search_field may not lose focus
          this.is_searching = false;
          if (this_.selModel.getSelectedCell){
              if (this_.getStore().getCount()) // there may be no data
                  this_.selModel.select(0,0); 
          } else {
              this_.selModel.selectFirstRow();
              this_.getView().focusEl.focus();
          }
        } 
        //~ else console.log("is_searching -> no focussing");
        //~ var t = this.getTopToolbar();
        //~ var activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);
        //~ this.quick_search_field.focus(); // 20121024
      }, this
    );
    var actions = Lino.build_buttons(this, this.ls_bbar_actions);
    //~ Ext.apply(config,Lino.build_buttons(this,config.ls_bbar_actions));
    //~ config.bbar, this.cmenu = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ this.cmenu = new Ext.menu.Menu({items: config.bbar});
    delete this.ls_bbar_actions
    if (actions) {
        this.cmenu = actions.cmenu;
        this.keyhandlers = actions.keyhandlers;
    }
    
    if (!this.hide_top_toolbar) {  
      var tbar = [ 
        this.quick_search_field = new Ext.form.TextField({ 
          //~ fieldLabel: "Search"
          listeners: { 
            scope:this_
            //~ ,change:this_.search_change
            
            ,render: Lino.quicktip_renderer("Quick Search","Enter a text to use as quick search filter")
            
            //~ ,keypress: this.search_keypress 
            ,blur: function() { this.is_searching = false}
          }
          ,validator:function(value) { return this_.search_validate(value) }
          //~ ,tooltip: "Enter a quick search text, then press TAB"
          //~ value: text
          //~ scope:this, 
          //~ ,enableKeyEvents: true
          //~ listeners: { keypress: this.search_keypress }, 
          //~ id: "seachString" 
      })];
      tbar = this.add_params_panel(tbar);
      tbar = tbar.concat([
        { scope:this, 
          tooltip: "Show this table in plain html", 
          iconCls: 'x-tbar-html',
          handler: function() { 
            var p = this.get_current_grid_config();
            Ext.apply(p, this.get_base_params());
            this.add_param_values(p, true);
            window.open(
                '/b' + 
                    this.ls_url + "?" + Ext.urlEncode(p)) 
          } }
      ]);
    
      var menu = [];
      var set_gc = function(index) {
        return function() {
          //~ console.log('set_gc() 20100812');
          this.getColumnModel().setConfig(
              this.apply_grid_config(index,this.ls_grid_configs,this.ls_columns));
        }
      }
      for (var i = 0; i < this.ls_grid_configs.length;i++) {
        var gc = this.ls_grid_configs[i];
        menu.push({text:gc.label,handler:set_gc(i),scope:this})
      }
      if(menu.length > 1) {
        tbar = tbar.concat([
          { text:"View",
            menu: menu,
            tooltip:"Select another view of this report"
          }
        ]);
      }
      
      if (actions) {
        tbar = tbar.concat(actions.bbar);
          //~ this.bbar = actions.bbar;
      }
      
      this.tbar = new Ext.PagingToolbar({ 
        store: this.store, 
        prependButtons: true, 
        //~ pageSize: this.page_length, 
        pageSize: 1, 
        displayInfo: true, 
        beforePageText: "Page",
        afterPageText: "of {0}",
        displayMsg: "Displaying {0} - {1} of {2}",
        firstText: "First page",
        lastText: "Last page",
        prevText: "Previous page",
        nextText: "Next page",
        items: tbar
      });
      //~ this.on('resize', function(cmp,aw,ah,rw,rh) {
          //~ var ps = this.calculatePageSize();
          //~ if (ps && ps != this.getTopToolbar().pageSize) {
              //~ // console.log('20120203 resize : pageSize',this.getTopToolbar().pageSize,'->',ps);
              //~ // this.getTopToolbar().pageSize =  ps;
              //~ cmp.refresh();
              //~ // this.getTopToolbar().doRefresh();
          //~ }
        //~ }, this);
      //~ this.on('resize', function(cmp,aw,ah,rw,rh) {
          //~ cmp.getTopToolbar().pageSize = this.calculatePageSize(aw,ah,rw,rh) || 10;
          //~ cmp.refresh();
        //~ }, this, {delay:500});
    }
    
    //~ delete this.page_length
    
    
      
    if (this.cell_edit) {
      this.selModel = new Ext.grid.CellSelectionModel()
      this.get_selected = function() {
        //~ console.log(this.getSelectionModel().selection);
        if (this.selModel.selection)
            return [ this.selModel.selection.record ];
        return [this.store.getAt(0)];
      };
      this.get_current_record = function() { 
        if (this.getSelectionModel().selection) 
          return this.selModel.selection.record;
        return this.store.getAt(0);
      };
    } else { 
      this.selModel = new Ext.grid.RowSelectionModel() 
      this.get_selected = function() {
        var sels = this.selModel.getSelections();
        if (sels.length == 0) sels = [this.store.getAt(0)];
        return sels
        //~ var sels = this.getSelectionModel().getSelections();
        //~ return Ext.pluck(sels,'id');
      };
      this.get_current_record = function() { 
        var rec = this.selModel.getSelected();
        if (rec == undefined) rec = this.store.getAt(0);
        return rec
      };
    };
    this.columns  = this.apply_grid_config(this.gc_name,this.ls_grid_configs,this.ls_columns);
    
    //~ var grid = this;
    //~ this.colModel = new Ext.grid.ColumnModel({
      //~ columns: this.apply_grid_config(this.gc_name,this.ls_grid_configs,this.ls_columns),
      //~ isCellEditable: function(col, row) {
        //~ var record = grid.store.getAt(row);
        //~ console.log('20120514',col,record); // dataIndex
        //~ var dataIndex = grid.colModel.getDataIndex(col);
        //~ if (dataIndex in record.data['disabled_fields']) {
            //~ Lino.notify("$_("This field is disabled")");
            //~ return false;
        //~ }
        //~ return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);
      //~ }
    //~ });    
    
    
    Lino.GridPanel.superclass.initComponent.call(this);
    
    //~ if (this.containing_window) 
        //~ this.on('afterlayout', this.refresh, this);
        //~ this.on('afterrender', this.refresh,this);
    //~ else
        //~ this.on('show', this.refresh,this);
    //~ this.on('afterlayout', function() {
      //~ if (this.id == "ext-comp-1157") 
        //~ console.log("20120213 afterlayout",this); 
      //~ // this.refresh();
      //~ },this);
    //~ this.on('afterrender', this.refresh);
    //~ this.on('resize', this.refresh,this,{delay:500});
    //~ this.on('resize', function(){console.log("20120213 resize",arguments)},this);
    this.on('resize', function(){
      //~ console.log("20120213 resize",arguments)
      this.refresh();
      },this);
    this.on('viewready', function(){
      //~ console.log("20120213 resize",arguments);
      this.view_is_ready = true;
      this.refresh(); // removed 20130911
      },this);
    this.on('afteredit', this.on_afteredit); // 20120814
    this.on('beforeedit', this.on_beforeedit);
    this.on('beforeedit',function(e) { this.before_row_edit(e.record)},this);
    if (this.cell_edit) {
        this.on('cellcontextmenu', Lino.cell_context_menu, this);
    } else {
        this.on('rowcontextmenu', Lino.row_context_menu, this);
    }
    //~ this.on('contextmenu', Lino.grid_context_menu, this);
    
    
    //~ if (this.id == "ext-comp-1157") captureEvents(this);    
    
    delete this.cell_edit;
    
  },
  
  //~ onResize : function(){
      //~ console.log("20120206 GridPanel.onResize",arguments);
      //~ Lino.GridPanel.superclass.onResize.apply(this, arguments);
      //~ this.refresh();
  //~ },
  
  
  get_status : function(){
    var st = { base_params : this.get_base_params()};
    if (!this.hide_top_toolbar) {
        st.current_page = this.getTopToolbar().current;
    }
    st.param_values = this.status_param_values;
    //~ console.log("20120213 GridPanel.get_status",st);
    return st;
  },
  
  /* 
  Lino.GridPanel.set_status() 
  */
  set_status : function(status, rp){
    this.requesting_panel = Ext.getCmp(rp);
    // console.log("20140527 GridPanel.set_status", status);
    this.clear_base_params();
    if (status == undefined) status = {base_params:{}};
    this.set_param_values(status.param_values);
    if (status.base_params) { 
      this.set_base_params(status.base_params);
    }
    if (status.show_params_panel != undefined) {
        if (this.toggle_params_panel_btn) {
            //~ this.toggle_params_panel_btn.toggle(status.show_params_panel=='true');
            this.toggle_params_panel_btn.toggle(status.show_params_panel);
        }
    }
    if (!this.hide_top_toolbar) {
      //~ console.log("20120213 GridPanel.getTopToolbar().changePage",
          //~ status.current_page || 1);
      this.getTopToolbar().changePage(status.current_page || 1);
    }
    //~ this.fireEvent('resize');
    //~ this.refresh.defer(100,this); 
    //~ this.onResize.defer(100,this); 
    //~ this.refresh(); 
    //~ this.doLayout(); 
    //~ this.onResize(); 
    //~ this.store.load();
  },
  
  refresh : function(unused) { 
    this.refresh_with_after();
  },
  /* GridPanel */
  refresh_with_after : function(after) { 
    // console.log('20140504 Lino.GridPanel.refresh '+ this.store.proxy.url);
    //~ var bp = { fmt:'json' }
    if (! this.view_is_ready) return;
    
    if (this.containing_panel) {
        //~ Ext.apply(p,this.master_panel.get_master_params());
        //~ Ext.apply(options.params,this.containing_panel.get_master_params());
        this.set_base_params(this.containing_panel.get_master_params());
        // 20130911
        if (!this.store.baseParams.mk) {  
            return;
        }
    }
    
    //~ console.log('20130911 Lino.GridPanel.refresh_with_after',this.containing_panel.get_master_params());
    
    var options = {};
    if (after) {
        options.callback = function(r,options,success) {if(success) after()}
    }
      
    //~ if (!this.rendered) {
        //~ console.log("20120206 GridPanel.refresh() must wait until rendered",options);
        //~ this.grid_panel.on('render',this.load.createDelegate(this,options))
        //~ return;
    //~ }
    
    this.store.load(options);
  },
  
  /* pageSize depends on grid height (Trying to remove scrollbar)
  Thanks to 
  - Christophe Badoit on http://www.sencha.com/forum/showthread.php?82647
  - http://www.sencha.com/forum/archive/index.php/t-37231.html
  */
  calculatePageSize : function(second_attempt) {
    //~ if (!this.rendered) { 
    if (!this.view_is_ready) { 
      //~ console.log('Cannot calculatePageSize() : not rendered');
      return false; }
    //~ if (!this.isVisible()) { 
      //~ console.log('calculatePageSize : not visible');
      //~ return false; }
      
    //~ console.log('getFrameHeight() is',this.getFrameHeight());
    //~ console.log('getView().scroller.getHeight() is',this.getView().scroller.getHeight());
    //~ console.log('mainBody.getHeight() is',this.getView().mainBody.getHeight());
    //~ console.log('getInnerHeight() is',this.getInnerHeight());
    //~ console.log('getHeight() is',this.getHeight());
    //~ console.log('el.getHeight() is',this.getEl().getHeight());
    //~ console.log('getGridEl().getHeight() is',this.getGridEl().getHeight());
    //~ console.log('getOuterSize().height is',this.getOuterSize().height);
    //~ console.log('getBox().height is',this.getBox().height);
    //~ console.log('getResizeEl.getHeight() is',this.getResizeEl().getHeight());
    //~ console.log('getLayoutTarget().getHeight() is',this.getLayoutTarget().getHeight());
      
    //~ var rowHeight = 52; // experimental value
    var row = this.view.getRow(0);
    if (row) {
      //~ console.log('20120213 yes');
      var rowHeight = Ext.get(row).getHeight();
    } else {
        //~ var rowHeight = this.getFrameHeight();
        //~ var rowHeight = 10; // reasonably smallest approximative value
        //~ There is no data yet. Construct a fake row and get its height
        var Element = Ext.Element;
        var gv = this.view;
        var fakeBody = new Element(Element.fly(gv.scroller).child('div.x-grid3-body'));
        var rowTemplate = gv.templates.row;
        var cellTemplate = gv.templates.cell;
        var tstyle  = 'width:' + gv.getGridInnerWidth() + 'px;';
        var cells = cellTemplate.apply({value:'&#160;'});
        var markup = rowTemplate.apply({
                tstyle: tstyle,
                cols  : 1,
                cells : cells,
                alt   : ''
            });        
        fakeBody.dom.innerHTML = gv.templates.body.apply({rows: markup});
        var row = fakeBody.dom.childNodes[0];
        var rowHeight = Ext.get(row).getHeight();
    }
    //~ console.log('rowHeight is ',rowHeight,this,caller);
    //~ this.getView().syncScroll();
    //~ this.getView().initTemplates();
    var height = this.getView().scroller.getHeight();
    //~ console.log('getView().scroller.getHeight() is',this.getView().scroller.getHeight());
    //~ console.log('getInnerHeight() - getFrameHeight() is',
      //~ this.getInnerHeight(), '-',
      //~ this.getFrameHeight(), '=',
      //~ this.getInnerHeight() - this.getFrameHeight());
    //~ var height = this.getView().mainBody.getHeight();
    //~ var height = this.getView().mainWrap.getHeight();
    //~ var height = this.getView().resizeMarker.getHeight();
    //~ this.syncSize();
    //~ var height = this.getInnerHeight() - this.getFrameHeight();
    //~ var height = this.getHeight() - this.getFrameHeight();
    height -= Ext.getScrollBarWidth(); // leave room for a possible horizontal scrollbar... 
    //~ height -= this.getView().scrollOffset;
    var ps = Math.floor(height / rowHeight);
    //~ console.log('20130816 calculatePageSize():',height,'/',rowHeight,'->',ps);
    ps -= 1; // leave room for a possible phantom row
    //~ return (ps > 1 ? ps : false);
    if (ps > 1) return ps;
    //~ console.log('calculatePageSize() found less than 1 row:',height,'/',rowHeight,'->',ps);
    //~ foo.bar = baz; // 20120213
    return 5; // preview_limit
    //~ if (second_attempt) {
        //~ console.log('calculatePageSize() abandons after second attempt:',
          //~ height,'/',rowHeight,'->',ps);
      //~ return 5;
    //~ }
    //~ return this.calculatePageSize.defer(500,this,[true]);
  },
  
  onCellDblClick : function(grid, row, col){
      //~ console.log("20120307 onCellDblClick",this,grid, row, col);
      if (this.ls_detail_handler) {
          //~ Lino.notify('show detail');
          Lino.show_detail(this);
          return false;
      }else{
        //~ console.log('startEditing');
        this.startEditing(row,col);
      }
  }
  ,get_base_params : function() {  /* Lino.GridPanel */
    var p = Ext.apply({}, this.store.baseParams);
    Lino.insert_subst_user(p);
    return p;
  },
  set_base_params : function(p) {
    //~ console.log('20130911 GridPanel.set_base_params',p)
    for (k in p) this.store.setBaseParam(k,p[k]);
    //~ this.store.baseParams = p;
    if (this.quick_search_field)
      this.quick_search_field.setValue(p.query || "");
    //~ if (p.param_values) 
        //~ this.set_param_values(p.param_values);  
  },
  clear_base_params : function() {
      this.store.baseParams = {};
      Lino.insert_subst_user(this.store.baseParams);
  },
  set_base_param : function(k,v) {
    this.store.setBaseParam(k,v);
  },
  
  //~ get_permalink_params : function() {
    //~ var p = {};
    //~ return p;
  //~ },
  
  before_row_edit : function(record) {},
    
  //~ search_keypress : function(){
    //~ console.log("2012124 search_keypress",arguments);
  //~ },
  search_validate : function(value) {
    if (value == this.quick_search_text) return true;
    this.is_searching = true;
    //~ console.log('search_validate',value)
    this.quick_search_text = value;
    this.set_base_param('query',value); 
    //~ this.getTopToolbar().changePage(1);
    this.getTopToolbar().moveFirst();
    //~ this.refresh();
    return true;
  },
  
  search_change : function(field,oldValue,newValue) {
    //~ console.log('search_change',field.getValue(),oldValue,newValue)
    this.set_base_param('query',field.getValue()); 
    this.getTopToolbar().moveFirst();
    //~ this.refresh();
  },
  
  apply_grid_config : function(index,grid_configs,rpt_columns) {
    //~ var rpt_columns = this.ls_columns;
    var gc = grid_configs[index];    
    //~ console.log('apply_grid_config() 20100812',name,gc);
    this.gc_name = index;
    if (gc == undefined) {
      return rpt_columns;
      //~ config.columns = config.ls_columns;
      //~ return;
    } 
    //~ delete config.ls_filters
    
    //~ console.log(20100805,config.ls_columns);
    var columns = Array(gc.columns.length);
    for (var j = 0; j < rpt_columns.length;j++) {
      var col = rpt_columns[j];
      for (var i = 0; i < gc.columns.length; i++) {
        if (col.dataIndex == gc.ci[i]) {
          col.width = gc.cw[i];
          col.hidden = gc.ch[i];
          columns[i] = col;
          break;
        }
      }
    }
    
    //~ var columns = Array(rpt_columns.length);
    //~ for (var i = 0; i < rpt_columns.length; i++) {
      //~ columns[i] = rpt_columns[gc.columns[i]];
      //~ columns[i].width = gc.widths[i];
    //~ }
    
    //~ if (gc.hidden_cols) {
      //~ for (var i = 0; i < gc.hidden_cols.length; i++) {
        //~ var hc = gc.hidden_cols[i];
        //~ for (var j = 0; j < columns.length;j++) {
          //~ var col = columns[j];
          //~ if (col.dataIndex == hc) {
            //~ col.hidden = true;
            //~ break
          //~ }
        //~ }
      //~ }
    //~ }
    if (gc.filters) {
      //~ console.log(20100811,'config.ls_filters',config.ls_filters);
      //~ console.log(20100811,'config.ls_grid_config.filters',config.ls_grid_config.filters);
      for (var i = 0; i < gc.filters.length; i++) {
        var fv = gc.filters[i];
        for (var j = 0; j < columns.length;j++) {
          var col = columns[j];
          if (col.dataIndex == fv.field) {
            //~ console.log(20100811, f,' == ',fv);
            if (fv.type == 'string') {
              col.filter.value = fv.value;
              //~ if (fv.comparison !== undefined) f.comparison = fv.comparison;
            } else {
              //~ console.log(20100811, fv);
              col.filter.value = {};
              col.filter.value[fv.comparison] = fv.value;
            }
            break;
          }
        };
      }
    }
    
    return columns;
    //~ config.columns = cols;
    //~ delete config.ls_columns
  },
  
  get_current_grid_config : function () {
    var cm = this.getColumnModel();
    var widths = Array(cm.config.length);
    var hiddens = Array(cm.config.length);
    //~ var hiddens = Array(cm.config.length);
    var columns = Array(cm.config.length);
    //~ var columns = Array(cm.config.length);
    //~ var hidden_cols = [];
    //~ var filters = this.filters.getFilterValues();
    var p = this.filters.buildQuery(this.filters.getFilterData())
    for (var i = 0; i < cm.config.length; i++) {
      var col = cm.config[i];
      columns[i] = col.dataIndex;
      //~ hiddens[i] = col.hidden;
      widths[i] = col.width;
      hiddens[i] = col.hidden;
      //~ if (col.hidden) hidden_cols.push(col.dataIndex);
    }
    //~ p['hidden_cols'] = hidden_cols;
    p.cw = widths;
    p.ch = hiddens;
    p.ci = columns;
    //~ p['widths'] = widths;
    //~ p['hiddens'] = hiddens;
    //~ p['columns'] = columns;
    p['name'] = this.gc_name;
    //~ var gc = this.ls_grid_configs[this.gc_name];
    //~ if (gc !== undefined) 
        //~ p['label'] = gc.label
    //~ console.log('20100810 save_grid_config',p);
    return p;
  },
  
  unused_manage_grid_configs : function() {
    var data = [];
    for (k in this.ls_grid_configs) {
      var v = this.ls_grid_configs[k];
      var i = [k,String(v.columns),String(v.hidden_cols),String(v.filters)];
      data.push(i)
    }
    if (this.ls_grid_configs[this.gc_name] == undefined) {
      var v = this.get_current_grid_config();
      var i = [k,String(v.columns),String(v.hidden_cols),String(v.filters)];
      data.push(i);
    }
    //~ console.log(20100811, data);
    var main = new Ext.grid.GridPanel({
      store: new Ext.data.ArrayStore({
        idIndex:0,
        fields:['name','columns','hidden_cols','filters'],
        autoDestroy:true,
        data: data}),
      //~ autoHeight:true,
      selModel: new Ext.grid.RowSelectionModel(),
      listeners: { 
        rowdblclick: function(grid,rowIndex,e) {
          console.log('row doubleclicked',grid, rowIndex,e);
        },
        rowclick: function(grid,rowIndex,e) {
          console.log('row clicked',grid, rowIndex,e);
        }
      },
      columns: [ 
        {dataIndex:'name',header:'Name'}, 
        {dataIndex:'columns',header:'columns'}, 
        {dataIndex:'hidden_cols',header:'hidden columns'}, 
        {dataIndex:'filters',header:'filters'} 
      ]
    });
    var win = new Ext.Window({title:'GridConfigs Manager',layout:'fit',items:main,height:200});
    win.show();
  },
  
  unused_edit_grid_config : function(name) {
    gc = this.ls_grid_configs[name];
    var win = new Ext.Window({
      title:'Edit Grid Config',layout:'vbox', 
      //~ layoutConfig:'stretch'
      items:[
        {xtype:'text', value: gc.name},
        {xtype:'text', value: gc.columns},
        {xtype:'text', value: gc.hidden_cols},
        {xtype:'text', value: gc.filters}
      ]
    });
    win.show();
  },
  
  unused_save_grid_config : function () {
    //~ console.log('TODO: save_grid_config',this);
    //~ p.column_widths = Ext.pluck(this.colModel.columns,'width');
    var a = { 
      params:this.get_current_grid_config(), 
      method:'PUT',
      url:'/grid_config' + this.ls_url,
      success: Lino.action_handler(this),
      scope: this,
      failure: Lino.ajax_error_handler(this)
    };
    this.loadMask.show(); // 20120211
    Ext.Ajax.request(a);
    //~ Lino.do_action(this,a);
  },
  
  on_beforeedit : function(e) {
    //~ console.log('20130128 GridPanel.on_beforeedit()',e,e.record.data.disable_editing);
    if(this.disable_editing | e.record.data.disable_editing) {
      e.cancel = true;
      Lino.notify("This record is disabled");
      return;
    }
    if(e.record.data.disabled_fields && e.record.data.disabled_fields[e.field]) {
      e.cancel = true;
      Lino.notify("This field is disabled");
      return;
    }
    //~ if (e.record.data.disabled_fields) {
      //~ for (i in e.record.data.disabled_fields) {
        //~ if(e.record.data.disabled_fields[i] == e.field) {
          //~ e.cancel = true;
          //~ Lino.notify(String.format('Field "{0}" is disabled for this record',e.field));
          //~ return
        //~ }
      //~ }
    //~ }
  },
  save_grid_data : function() {
      //~ console.log("20120814 save_grid_data");
      this.getStore().commitChanges();
  },
  on_afteredit : function(e) {
    /*
    e.grid - The grid that fired the event
    e.record - The record being edited
    e.field - The field name being edited
    e.value - The value being set
    e.originalValue - The original value for the field, before the edit.
    e.row - The grid row index
    e.column - The grid column index
    */
    var p = {};
    // console.log('20140403 afteredit: ',e.record);
    //~ console.log('20101130 value: ',e.value);
    //~ var p = e.record.getChanges();
    //~ console.log('20101130 getChanges: ',e.record.getChanges());
    //~ this.before_row_edit(e.record);

    for(k in e.record.getChanges()) {
        var v = e.record.get(k);
    //~ for(k in e.record.modified) {
        //~ console.log('20101130',k,'=',v);
        //~ var cm = e.grid.getColumnModel();
        //~ var di = cm.getDataIndex(k);
        var f = e.record.fields.get(k);
        //~ console.log('20101130 f = ',f);
        //~ var v = e.record.get(di);
        if (f.type.type == 'date') {
            p[k] = Ext.util.Format.date(v, f.dateFormat);
        }else{
            p[k] = v;
            var v = e.record.get(k+'Hidden');
            if (v !== undefined) {
              p[k+'Hidden'] = v;
            }
        }
    }
    // add value used by ForeignKeyStoreField CHOICES_HIDDEN_SUFFIX
    // not sure whether this is still needed:
    p[e.field+'Hidden'] = e.value;
    //~ p.su = Lino.subst_user;
    Lino.insert_subst_user(p);
    // this one is needed so that this field can serve as choice context:
    e.record.data[e.field+'Hidden'] = e.value;
    // p[pk] = e.record.data[pk];
    // console.log("grid_afteredit:",e.field,'=',e.value);
    Ext.apply(p, this.get_base_params()); // needed for POST, ignored for PUT
    //~ Ext.apply(p,this.containing_window.config.base_params);
    //~ 20121109 p['$ext_requests.URL_PARAM_ACTION_NAME'] = 'grid';
    var self = this;
    var req = {
        params:p,
        waitMsg: 'Saving your data...',
        success: Lino.action_handler( this, function(result) {
          //~ if (result.data_record) {
          if (result.refresh_all) {
              var cw = self.get_containing_window();
              if (cw) {
                  cw.main_item.refresh();
              }
              else console.log("20120123 cannot refresh_all",self);
          } else if (result.rows) {
              //~ self.getStore().loadData(result,true);
              var r = self.getStore().reader.readRecords(result);
              if (e.record.phantom) {
                  //~ console.log("20120816 afteredit.success POST",r);
                  self.getStore().insert(e.row,r.records);
              }else{
                  //~ console.log("20120816 afteredit.success PUT",r);
                  self.getStore().doUpdate(r.records[0]);
              }
              self.getStore().rejectChanges(); /* 
              get rid of the red triangles without saving the record again
              */
              //~ self.getStore().commitChanges(); // get rid of the red triangles
          } else {
              self.getStore().commitChanges(); // get rid of the red triangles
              self.getStore().reload();        // reload our datastore.
          }
          }),
        scope: this,
        failure: Lino.ajax_error_handler(this)
    };
    if (e.record.phantom) {
      req.params.an = 'grid_post'; // CreateRow.action_name
      Ext.apply(req,{
        method: 'POST',
        url: '/api' + this.ls_url
      });
    } else {
      req.params.an = 'grid_put'; // SaveRow.action_name
      Ext.apply(req,{
        method: 'PUT',
        url: '/api' + this.ls_url + '/' + e.record.id
      });
    }
    //~ console.log('20110406 on_afteredit',req);
    this.loadMask.show(); // 20120211
    Ext.Ajax.request(req);
  },

  afterRender : function() {
    Lino.GridPanel.superclass.afterRender.call(this);
    // this.getView().mainBody.focus();
    // console.log(20100114,this.getView().getRows());
    // if (this.getView().getRows().length > 0) {
    //  this.getView().focusRow(1);
    // }
    //~ this.my_load_mask = new Ext.LoadMask(this.getEl(), {
        //~ msg:'$_("Please wait...")',
        //~ store:this.store});
      
    var tbar = this.getTopToolbar();
    // tbar.on('change',function() {this.getView().focusRow(1);},this);
    // tbar.on('change',function() {this.getSelectionModel().selectFirstRow();this.getView().mainBody.focus();},this);
    // tbar.on('change',function() {this.getView().mainBody.focus();},this);
    // tbar.on('change',function() {this.getView().focusRow(1);},this);
    this.nav = new Ext.KeyNav(this.getEl(),{
      pageUp: function() {tbar.movePrevious(); },
      pageDown: function() {tbar.moveNext(); },
      home: function() {tbar.moveFirst(); },
      end: function() {tbar.moveLast(); },
      scope: this
    });
  },
  after_delete : function() {
    //~ console.log('Lino.GridPanel.after_delete');
    this.refresh();
  },
  add_row_listener : function(fn,scope) {
    this.getSelectionModel().addListener('rowselect',fn,scope);
  },
  postEditValue : function(value, originalValue, r, field){
    value = Lino.GridPanel.superclass.postEditValue.call(this,value,originalValue,r,field);
    //~ console.log('GridPanel.postEdit()',value, originalValue, r, field);
    return value;
  },
  
  set_start_value : function(v) {
      this.start_value = v;
  },
  preEditValue : function(r, field){
      if (this.start_value) {
        var v = this.start_value;
        delete this.start_value;
        this.activeEditor.selectOnFocus = false;
        return v;
      }
      var value = r.data[field];
      return this.autoEncode && Ext.isString(value) ? Ext.util.Format.htmlDecode(value) : value;
  },
  
  on_master_changed : function() {
    //~ if (! this.enabled) return;
    //~ cmp = this;
    //~ console.log('20130911 Lino.GridPanel.on_master_changed()',this.title,this.rendered);
    if (! this.rendered) return; // 20120213
    var todo = function() {
      if (this.disabled) return;
      //~ if (this.disabled) return;
      //~ if (this.enabled) {
          //~ var src = caller.config.url_data + "/" + record.id + ".jpg"
          //~ console.log(20111125, this.containing_window);
          //~ for (k in p) this.getStore().setBaseParam(k,p[k]);
          //~ console.log('Lino.GridPanel.on_master_changed()',this.title,p);
          this.refresh();
          //~ this.set_base_params(this.master_panel.get_master_params());
          //~ this.getStore().load(); 
      //~ }
    };
    Lino.do_when_visible(this,todo.createDelegate(this));
  },
  load_record_id : function(record_id,after) {
      Lino.run_detail_handler(this,record_id)
  }
  
});
  

//~ Lino.MainPanelMixin = {
  //~ tbar_items : function() {
      //~ return ;
  //~ }
//~ };

//~ Ext.override(Lino.GridPanel,Lino.MainPanelMixin);
//~ Ext.override(Lino.FormPanel,Lino.MainPanelMixin);

//~ Lino.grid_context_menu = function(e) {
  //~ console.log('contextmenu',arguments);
//~ }

Lino.row_context_menu = function(grid,row,col,e) {
  console.log('20130927 rowcontextmenu',grid,row,col,e,grid.store.reader.arrayData.rows[row]);
}

Lino.cell_context_menu = function(grid,row,col,e) {
  //~ console.log('20120531 cellcontextmenu',grid,row,col,e,grid.store.reader.arrayData.rows[row]);
  e.stopEvent();
  //~ grid.getView().focusCell(row,col);
  grid.getSelectionModel().select(row,col);
  //~ console.log(grid.store.getAt(row));
  //~ grid.getView().focusRow(row);
  //~ return;
  if(!grid.cmenu.el){grid.cmenu.render(); }
  //~ if(e.record.data.disabled_fields) {
  
  var da = grid.store.reader.arrayData.rows[row][grid.disabled_actions_index];
  if (da) {
      this.cmenu.cascade(function(item){ 
        //~ console.log(20120531, item.itemId, da[item.itemId]);
        if (da[item.itemId]) item.disable(); else item.enable();
      });
  };
  
  var xy = e.getXY();
  xy[1] -= grid.cmenu.el.getHeight();
  grid.cmenu.showAt(xy);
}


Lino.chooser_handler = function(combo,name) {
  return function(cmp,newValue,oldValue) {
    //~ console.log('Lino.chooser_handler()',cmp,oldValue,newValue);
    combo.setContextValue(name,newValue);
  }
};



Lino.ComboBox = Ext.extend(Ext.form.ComboBox,{
  forceSelection: "yes but select on tab",
  // forceSelection: true,
  triggerAction: 'all',
  minListWidth:280, // 20131022
  autoSelect: false,
  selectOnFocus: true, // select any existing text in the field immediately on focus.
  submitValue: true,
  displayField: 'text', // 'text', 
  valueField: 'value', // 'value',
  
  //~ initComponent : Ext.form.ComboBox.prototype.initComponent.createSequence(function() {
  initComponent : function(){
      this.contextParams = {};
      //~ Ext.form.ComboBox.initComponent(this);
      Lino.ComboBox.superclass.initComponent.call(this);
  },
  setValue : function(v,record_data){
      /*
      Based on feature request developed in http://extjs.net/forum/showthread.php?t=75751
      */
      /* `record_data` is used to get the text corresponding to this value */
      //~ if(this.name == 'city') 
      //~ console.log('20120203', this.name,'.setValue(', v ,') this=', this,'record_data=',record_data);
      var text = v;
      if(this.valueField){
        if(v == null || v == '') { 
            //~ if (this.name == 'birth_country') 
                //~ console.log(this.name,'.setValue',v,'no lookup needed, value is empty');
            //~ v = undefined;
            v = '';
            //~ text = '';
        } else if (Ext.isDefined(record_data)) {
          text = record_data[this.name];
          //~ if (this.name == 'birth_country') 
            //~ console.log(this.name,'.setValue',v,'got text ',text,' from record ',record);
        } else {
          // if(this.mode == 'remote' && !Ext.isDefined(this.store.totalLength)){
          if(this.mode == 'remote' && ( this.lastQuery === null || (!Ext.isDefined(this.store.totalLength)))){
              //~ if (this.name == 'birth_country') console.log(this.name,'.setValue',v,'store not yet loaded');
              this.store.on('load', this.setValue.createDelegate(this, arguments), null, {single: true});
              if(this.store.lastOptions === null || this.lastQuery === null){
                  var params;
                  if(this.valueParam){
                      params = {};
                      params[this.valueParam] = v;
                  }else{
                      var q = this.allQuery;
                      this.lastQuery = q;
                      this.store.setBaseParam(this.queryParam, q);
                      params = this.getParams(q);
                  }
                  //~ if (this.name == 'birth_country') 
                    //~ console.log(this.name,'.setValue',v,' : call load() with params ',params);
                  this.store.load({params: params});
              //~ }else{
                  //~ if (this.name == 'birth_country') 
                    //~ console.log(this.name,'.setValue',v,' : but store is loading',this.store.lastOptions);
              }
              return;
          //~ }else{
              //~ if (this.name == 'birth_country') 
                //~ console.log(this.name,'.setValue',v,' : store is loaded, lastQuery is "',this.lastQuery,'"');
          }
          var r = this.findRecord(this.valueField, v);
          if(r){
              text = r.data[this.displayField];
          }else if(this.valueNotFoundText !== undefined){
              text = this.valueNotFoundText;
          }
        }
      }
      this.lastSelectionText = text;
      //~ this.lastSelectionText = v;
      if(this.hiddenField){
          //~ this.hiddenField.originalValue = v;
          this.hiddenField.value = v;
      }
      Ext.form.ComboBox.superclass.setValue.call(this, text);
      this.value = v; // needed for grid.afteredit
  },
  
  getParams : function(q){
    // p = Ext.form.ComboBox.superclass.getParams.call(this, q);
    // causes "Ext.form.ComboBox.superclass.getParams is undefined"
    var p = {};
    //p[this.queryParam] = q;
    if(this.pageSize){
        //~ p.start = 0;
        //~ p.limit = this.pageSize;
        p['start'] = 0;
        p['limit'] = this.pageSize;
    }
    // now my code:
    if(this.contextParams) Ext.apply(p,this.contextParams);
    //~ if(this.contextParams && this.contextValues) {
      //~ for(i = 0; i <= this.contextParams.length; i++)
        //~ p[this.contextParams[i]] = this.contextValues[i];
    //~ }
    return p;
  },
  setContextValue : function(name,value) {
    //~ console.log('setContextValue',this,this.name,':',name,'=',value);
    //~ if (this.contextValues === undefined) {
        //~ this.contextValues = Array(); // this.contextParams.length);
    //~ }
    if (this.contextParams[name] != value) {
      //~ console.log('setContextValue 1',this.contextParams);
      this.contextParams[name] = value;
      this.lastQuery = null;
      //~ console.log('setContextValue 2',this.contextParams);
    }
  }
});

Lino.ChoicesFieldElement = Ext.extend(Lino.ComboBox,{
  mode: 'local'
});


Lino.SimpleRemoteComboStore = Ext.extend(Ext.data.JsonStore,{
  // forceSelection: true,  20140206 why was this here?
  constructor: function(config){
      Lino.SimpleRemoteComboStore.superclass.constructor.call(this, Ext.apply(config, {
          totalProperty: 'count',
          root: 'rows',
          id: 'value', // ext_requests.CHOICES_VALUE_FIELD
          fields: ['value' ], // ext_requests.CHOICES_VALUE_FIELD, // ext_requests.CHOICES_TEXT_FIELD
          listeners: { exception: Lino.on_store_exception }
      }));
  }
});

Lino.ComplexRemoteComboStore = Ext.extend(Ext.data.JsonStore,{
  constructor: function(config){
      Lino.ComplexRemoteComboStore.superclass.constructor.call(this, Ext.apply(config, {
          totalProperty: 'count',
          root: 'rows',
          id: 'value', // ext_requests.CHOICES_VALUE_FIELD
          fields: ['value','text'], // ext_requests.CHOICES_VALUE_FIELD, // ext_requests.CHOICES_TEXT_FIELD
          listeners: { exception: Lino.on_store_exception }
      }));
  }
});

Lino.RemoteComboFieldElement = Ext.extend(Lino.ComboBox,{
  mode: 'remote',
  //~ forceSelection:false,
  minChars: 2, // default 4 is too much
  queryDelay: 300, // default 500 is maybe slow
  queryParam: 'query', 
  //~ typeAhead: true,
  //~ selectOnFocus: true, // select any existing text in the field immediately on focus.
  resizable: true
  ,initList : function() {
      Lino.RemoteComboFieldElement.superclass.initList.call(this);
      if (this.pageTb) {
          
          var me = this;
          this.pageTb.on("beforechange", function(toolbar, o){
              if(me.contextParams)
                  Ext.apply(o, me.contextParams);
          });
          
          //~ 
          //~ var btn = ls_buttons
          //~ this.pageTb.items = this.pageTb.items.concat([btn]);
          //~ console.log("20131022 pageTb.items is", this.pageTb.items)
      }
  }
});

/*
Thanks to Animal for posting the basic idea:
http://www.sencha.com/forum/showthread.php?15842-2.0-SOLVED-Combobox-twintrigger-clear&p=76130&viewfull=1#post76130

*/
Lino.TwinCombo = Ext.extend(Lino.RemoteComboFieldElement,{
    trigger2Class : 'x-form-search-trigger',
    //~ trigger2Class : 'x-tbar-detail',
    initComponent : function() {
        //~ Lino.TwinCombo.superclass.initComponent.call(this);
        Lino.ComboBox.prototype.initComponent.call(this);
        Ext.form.TwinTriggerField.prototype.initComponent.call(this);
    },
    onTrigger2Click : function() {
        //~ console.log('onTrigger2Click',this,arguments);
    }
  });
//~ Lino.TwinCombo.prototype.initComponent = Ext.form.TwinTriggerField.prototype.initComponent;
Lino.TwinCombo.prototype.getTrigger = Ext.form.TwinTriggerField.prototype.getTrigger;
Lino.TwinCombo.prototype.getOuterSize = Ext.form.TwinTriggerField.prototype.getOuterSize;
Lino.TwinCombo.prototype.initTrigger = Ext.form.TwinTriggerField.prototype.initTrigger;
Lino.TwinCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;
//~ Lino.TwinCombo.prototype.onTrigger2Click = function() {
    //~ console.log('onTrigger2Click',arguments);
//~ };



Lino.SimpleRemoteComboFieldElement = Ext.extend(Lino.RemoteComboFieldElement,{
  displayField: 'value', 
  valueField: null,
  forceSelection: false
});




Lino.Window = Ext.extend(Ext.Window,{
  //~ layout: "fit", 
  closeAction : 'hide',
  renderTo: 'main_area', 
  constrain: true,
  maximized: true,
  draggable: false,
  width: 700,
  height: 500,
  maximizable: false,
  constructor : function (config) {
    if (config.main_item.params_panel) {
        config.layout = 'border';
        config.main_item.region = 'center';
        config.main_item.params_panel.region = 'north';
        //~ config.main_item.params_panel.autoHeight = false; // 20130924
        config.main_item.params_panel.hidden = config.main_item.params_panel_hidden;
        config.items = [config.main_item.params_panel, config.main_item];
        //~ 20130923b
    } else {
        config.layout = 'fit';
        config.items = config.main_item;
    }
    this.main_item = config.main_item; 
    
    delete config.main_item;
    //~ delete config.params_item;
    
    //~ this.main_item = config.items.get(0);
    this.main_item.containing_window = this;
    
    //~ console.log('20120110 Lino.Window.constructor() 1');
    //~ if (Lino.current_window) { // all windows except the top are closable
    if (this.main_item.hide_window_title) { 
      config.closable = false;
      config.frame = false;
      config.shadow = false;
      //~ config.border = true;
      //~ config.title = undefined;
      //~ config.tools = null;
      delete config.title;
      delete config.tools;
    } else {
      config.title = this.main_item.empty_title;
      config.closable = true;
      config.tools = [ 
        { qtip: 'permalink', handler: Lino.permalink_handler(this), id: "pin" }
      ];
      if (this.main_item.content_type && this.main_item.action_name != 'insert') {
        config.tools = [ {
          handler: Lino.help_text_editor,
          qtip: "Edit help texts for fields on this model.",
          scope: this.main_item,
          id: "gear"
        }].concat(config.tools);
      }
        
    //~ { qtip: '', handler: Lino.save_wc_handler(this), id: "save" }, 
    //~ { qtip: this.config.qtip, handler: Lino.save_wc_handler(this), id: "save" }, 
    //~ { qtip: 'Call doLayout() on main Container.', handler: Lino.refresh_handler(this), id: "refresh" },
    //~ if (this.main_item.params_panel) {
        //~ config.tools = config.tools.concat([ 
          //~ { qtip: 'Show/hide parameter panel', handler: this.toggle_params_panel, id: "gear", scope:this } 
        //~ ]);
    //~ }
    //~ if (config.closable !== false) {
      // if undefined, will take default behaviour
      //~ config.tools = config.tools.concat([ 
        //~ { qtip: 'close', handler: this.hide, id: "close", scope:this } 
      //~ ]);
    }
    
    this.main_item.config_containing_window(config);
    
    //~ console.log('20120110 Lino.Window.constructor() 2');
    Lino.Window.superclass.constructor.call(this,config);
    
    //~ console.log('20120110 Lino.Window.constructor() 3');
    
  },
  initComponent : function() {
    this.main_item.init_containing_window(this);
    Lino.Window.superclass.initComponent.call(this);
  
  },
  hide : function() { 
      this.main_item.do_when_clean(false,function() { 
        Lino.close_window(); });
  },
  hide_really : function() { 
    Lino.Window.superclass.hide.call(this);
  },
  onRender : function(ct, position){
    //~ console.log('20120110 Lino.Window.onRender() 1');
    Lino.Window.superclass.onRender.call(this, ct, position);
    var main_area = Ext.getCmp('main_area')
    //~ console.log('20120110 Lino.Window.onRender() 2');
  
    this.on('show', function(win) {
        //~ console.log('20120110 Lino.Window.on show 1');
        main_area.on('resize', win.onWindowResize, win);
    });
    this.on('hide', function(win) {
        main_area.un('resize', win.onWindowResize, win);
    });
    //~ console.log('20120110 Lino.Window.onRender() 3');
  }
});


Ext.override(Ext.form.BasicForm,{
    my_loadRecord : function(values){
    //~ loadRecord : function(record){
        /* Same as ExtJS's loadRecord() (setValues()), except that we 
        forward also the record to field.setValue() so that Lino.Combobox 
        can use it. 
        */
        //~ console.log('20120918 my_loadRecord',values)
        if(Ext.isArray(values)){ 
            for(var i = 0, len = values.length; i < len; i++){
                var v = values[i];
                var f = this.findField(v.id);
                if(f){
                    f.setValue(v.value,values);
                    if(this.trackResetOnLoad){
                        f.originalValue = f.getValue();
                    }
                }
            }
        }else{ 
            var field, id;
            for(id in values){
                if(!Ext.isFunction(values[id]) && (field = this.findField(id))){
                    field.setValue(values[id],values);
                    if(this.trackResetOnLoad){
                        field.originalValue = field.getValue();
                        //~ if (field.hiddenField) {
                          //~ field.hiddenField.originalValue = field.hiddenField.value;
                        //~ }
                    }
                }
            }
        }
        return this;
    }
});




function initializeFooBarDropZone(cmp) {
    //~ console.log('initializeFooBarDropZone',cmp);
    cmp.dropTarget = new Ext.dd.DropTarget(cmp.bwrap, {
      //~ ddGroup     : 'gridDDGroup',
      notifyEnter : function(ddSource, e, data) {
        console.log('notifyEnter',ddSource,e,data);
        //Add some flare to invite drop.
        cmp.body.stopFx();
        cmp.body.highlight();
      },
      notifyDrop  : function(ddSource, e, data){
        console.log('notifyDrop',ddSource,e,data);
        // Reference the record (single selection) for readability
        //~ var selectedRecord = ddSource.dragData.selections[0];


        // Load the record into the form
        //~ formPanel.getForm().my_loadRecord(selectedRecord);


        // Delete record from the grid.  not really required.
        //~ ddSource.grid.store.remove(selectedRecord);

        return(true);
      }
    })
}



Lino.show_mti_child = function(fieldname,detail_handler) {
  //~ console.log('show_mti_child',this);
  //~ console.log('show_mti_child',panel.find("main_area"));
  rec = Lino.current_window.main_item.get_current_record();
  //~ rec = panel.get_current_record();
  if (rec) {
    //~ console.log('show_mti_child',Lino.current_window,rec);
    if (rec.phantom) {
      Lino.notify('Not allowed on phantom record.');
    }else if (rec.data[fieldname]) {
      //~ console.log('show_mti_child',rec.id);
      //~ detail_handler(Lino.current_window.main_item,{},{record_id:rec.id});
      detail_handler.run(null,{record_id:rec.id});
      //~ window.open(urlroot + '/' + rec.id);
      //~ document.location = urlroot + '/' + rec.id;
      //~ window.open(urlroot + '/' + rec.id,'_blank');
    } else {
      Lino.alert("Cannot show MTI child if checkbox is off.");
    }
  } else {
    Lino.notify('No current record.');
  }
};



/*
captureEvents utility by Aaron Conran
<http://www.sencha.com/learn/grid-faq/>

Ext.onReady(function(){
    var grid = new Ext.grid.GridPanel({
        ... 
    });
    captureEvents(grid);
});
*/
function captureEvents(observable) {
    Ext.util.Observable.capture(
        observable,
        function(eventName) {
            console.info(eventName);
        },
        this
    );		
}

// settings.SITE.get_plugin_snippets()



Lino.main_menu = [ { "menu": { "items": [ { "text": "Persons", "handler": function() {Lino.contacts.Persons.grid.run(null)} }, { "text": "Organizations", "handler": function() {Lino.contacts.Companies.grid.run(null)} }, { "text": "Partners", "handler": function() {Lino.contacts.Partners.grid.run(null)} } ] }, "text": "Contacts" }, { "menu": { "items": [ { "text": "Products", "handler": function() {Lino.products.Products.grid.run(null)} }, { "text": "Product Categories", "handler": function() {Lino.products.ProductCats.grid.run(null)} } ] }, "text": "Products" }, { "menu": { "items": [ { "text": "My Excerpts", "handler": function() {Lino.excerpts.MyExcerpts.grid.run(null)} } ] }, "text": "Office" }, { "menu": { "items": [ { "text": "Sales invoices (S)", "handler": function() {Lino.sales.InvoicesByJournal.grid.run(null,{ "param_values": { "yearHidden": "14", "stateHidden": null, "journal": "Sales invoices (S)", "journalHidden": 1, "state": null, "year": "2014" }, "base_params": { "mt": 24, "mk": 1 } })} } ] }, "text": "Sales" }, { "menu": { "items": [ { "text": "Purchase invoices (P)", "handler": function() {Lino.ledger.InvoicesByJournal.grid.run(null,{ "param_values": { "pjournalHidden": null, "pyear": "2014", "ppartner": null, "ppartnerHidden": null, "pyearHidden": "14", "pjournal": null }, "base_params": { "mt": 24, "mk": 2 } })} }, { "text": "Payment Orders (PO)", "handler": function() {Lino.finan.PaymentOrdersByJournal.grid.run(null,{ "param_values": { "pjournalHidden": null, "pyearHidden": null, "pjournal": null, "pyear": null }, "base_params": { "mt": 24, "mk": 4 } })} } ] }, "text": "Purchases" }, { "menu": { "items": [ { "text": "Bestbank (B)", "handler": function() {Lino.finan.BankStatementsByJournal.grid.run(null,{ "param_values": { "pjournalHidden": null, "pyearHidden": null, "pjournal": null, "pyear": null }, "base_params": { "mt": 24, "mk": 3 } })} }, { "text": "Cash (C)", "handler": function() {Lino.finan.BankStatementsByJournal.grid.run(null,{ "param_values": { "pjournalHidden": null, "pyearHidden": null, "pjournal": null, "pyear": null }, "base_params": { "mt": 24, "mk": 5 } })} }, { "text": "Miscellaneous Journal Entries (M)", "handler": function() {Lino.finan.JournalEntriesByJournal.grid.run(null,{ "param_values": { "pjournalHidden": null, "pyearHidden": null, "pjournal": null, "pyear": null }, "base_params": { "mt": 24, "mk": 6 } })} }, { "text": "VAT declarations (V)", "handler": function() {Lino.declarations.DeclarationsByJournal.grid.run(null,{ "base_params": { "mt": 24, "mk": 7 } })} } ] }, "text": "Financial" }, { "menu": { "items": [ { "menu": { "items": [ { "text": "Situation", "listeners": { "render": Lino.quicktip_renderer("Foo","Overview of the financial situation on a given date.") }, "handler": function() {Lino.ledger.Situation.show.run(null,{ "record_id": -99998 })} }, { "text": "Activity Report", "listeners": { "render": Lino.quicktip_renderer("Foo","Overview of the financial activity during a given period.") }, "handler": function() {Lino.ledger.ActivityReport.show.run(null,{ "record_id": -99998 })} }, { "text": "Debtors", "listeners": { "render": Lino.quicktip_renderer("Foo","List of partners (usually clients)     who are in debt towards us.") }, "handler": function() {Lino.ledger.Debtors.grid.run(null)} }, { "text": "Creditors", "listeners": { "render": Lino.quicktip_renderer("Foo","List of partners (usually suppliers)     who are giving credit to us.") }, "handler": function() {Lino.ledger.Creditors.grid.run(null)} } ] }, "text": "Accounting" } ] }, "text": "Reports" }, { "menu": { "items": [ { "menu": { "items": [ { "text": "My Text Field Templates", "handler": function() {Lino.system.MyTextFieldTemplates.grid.run(null)} }, { "text": "Excerpt Types", "handler": function() {Lino.excerpts.ExcerptTypes.grid.run(null)} } ] }, "text": "Office" }, { "menu": { "items": [ { "text": "Site Parameters", "iconCls": "x-tbar-application_form", "handler": function() {Lino.system.SiteConfigs.detail.run(null,{ "record_id": 1 })} }, { "text": "Users", "listeners": { "render": Lino.quicktip_renderer("Foo","Shows the list of all users on this site.") }, "handler": function() {Lino.users.Users.grid.run(null)} }, { "text": "content types", "handler": function() {Lino.system.ContentTypes.grid.run(null)} }, { "text": "Help Texts", "handler": function() {Lino.system.HelpTexts.grid.run(null)} } ] }, "text": "System" }, { "menu": { "items": [ { "text": "Countries", "listeners": { "render": Lino.quicktip_renderer("Foo","\n    A country is a geographic entity considered a \"nation\".\n    ") }, "handler": function() {Lino.countries.Countries.grid.run(null)} }, { "text": "Places", "listeners": { "render": Lino.quicktip_renderer("Foo","\n    The table of known geographical places.\n    A geographical place can be a city, a town, a suburb,\n    a province, a lake... any named geographic entity,\n    except for countries because these have their own table.\n    ") }, "handler": function() {Lino.countries.Places.grid.run(null)} } ] }, "text": "Places" }, { "menu": { "items": [ { "text": "Organization Types", "handler": function() {Lino.contacts.CompanyTypes.grid.run(null)} }, { "text": "Functions", "handler": function() {Lino.contacts.RoleTypes.grid.run(null)} } ] }, "text": "Contacts" }, { "menu": { "items": [ { "text": "Account Charts", "handler": function() {Lino.accounts.Charts.grid.run(null)} }, { "text": "Account Groups", "handler": function() {Lino.accounts.Groups.grid.run(null)} }, { "text": "Accounts", "handler": function() {Lino.accounts.Accounts.grid.run(null)} }, { "text": "Journals", "handler": function() {Lino.ledger.Journals.grid.run(null)} } ] }, "text": "Accounting" }, { "menu": { "items": [ { "text": "Shipping Modes", "handler": function() {Lino.sales.ShippingModes.grid.run(null)} } ] }, "text": "Sales" }, { "menu": { "items": [ { "text": "Payment Terms", "handler": function() {Lino.vat.PaymentTerms.grid.run(null)} } ] }, "text": "VAT" } ] }, "text": "Configure" }, { "menu": { "items": [ { "menu": { "items": [ { "text": "Text Field Templates", "handler": function() {Lino.system.TextFieldTemplates.grid.run(null)} }, { "text": "Excerpts", "handler": function() {Lino.excerpts.Excerpts.grid.run(null)} } ] }, "text": "Office" }, { "menu": { "items": [ { "text": "Authorities", "handler": function() {Lino.users.Authorities.grid.run(null)} }, { "text": "User Groups", "handler": function() {Lino.lino.UserGroups.grid.run(null)} }, { "text": "User Levels", "handler": function() {Lino.lino.UserLevels.grid.run(null)} }, { "text": "User Profiles", "handler": function() {Lino.lino.UserProfiles.grid.run(null)} } ] }, "text": "System" }, { "menu": { "items": [ { "text": "Contact Persons", "handler": function() {Lino.contacts.Roles.grid.run(null)} } ] }, "text": "Contacts" }, { "menu": { "items": [ { "text": "Accounts", "handler": function() {Lino.sepa.Accounts.grid.run(null)} } ] }, "text": "SEPA" }, { "menu": { "items": [ { "text": "Invoices", "handler": function() {Lino.ledger.Invoices.grid.run(null)} }, { "text": "Vouchers", "handler": function() {Lino.ledger.Vouchers.grid.run(null)} }, { "text": "VoucherTypes", "handler": function() {Lino.ledger.VoucherTypes.grid.run(null)} }, { "text": "Movements", "handler": function() {Lino.ledger.Movements.grid.run(null)} }, { "text": "Fiscal Years", "handler": function() {Lino.ledger.FiscalYears.grid.run(null)} } ] }, "text": "Accounting" }, { "menu": { "items": [ { "text": "VatRegimes", "listeners": { "render": Lino.quicktip_renderer("Foo","Determines how the VAT is being handled,         i.e. whether and how it is to be paid.") }, "handler": function() {Lino.vat.VatRegimes.grid.run(null)} }, { "text": "TradeTypes", "listeners": { "render": Lino.quicktip_renderer("Foo","The type of trade: usually either `sales` or `purchases`.") }, "handler": function() {Lino.vat.TradeTypes.grid.run(null)} }, { "text": "VatClasses", "handler": function() {Lino.vat.VatClasses.grid.run(null)} }, { "text": "VAT declarations", "handler": function() {Lino.declarations.Declarations.grid.run(null)} } ] }, "text": "VAT" }, { "menu": { "items": [ { "text": "Bank Statements", "handler": function() {Lino.finan.BankStatements.grid.run(null)} }, { "text": "Journal Entries", "handler": function() {Lino.finan.JournalEntries.grid.run(null)} }, { "text": "Payment Orders", "handler": function() {Lino.finan.PaymentOrders.grid.run(null)} } ] }, "text": "Financial" } ] }, "text": "Explorer" }, { "menu": { "items": [ { "text": "About", "listeners": { "render": Lino.quicktip_renderer("Foo","Show information about this site.") }, "handler": function() {Lino.about.About.show.run(null,{ "record_id": -99998 })} } ] }, "text": "Site" }, { "text": "Home", "handler": function() {Lino.handle_home_button()} } ];
Ext.namespace('Lino.system.SiteConfigs')
Ext.namespace('Lino.system.ContentTypes')
Ext.namespace('Lino.system.HelpTexts')
Ext.namespace('Lino.system.TextFieldTemplates')
Ext.namespace('Lino.users.Users')
Ext.namespace('Lino.users.MySettings')
Ext.namespace('Lino.users.UsersOverview')
Ext.namespace('Lino.users.Authorities')
Ext.namespace('Lino.countries.Countries')
Ext.namespace('Lino.countries.Places')
Ext.namespace('Lino.contacts.CompanyTypes')
Ext.namespace('Lino.contacts.Partners')
Ext.namespace('Lino.contacts.Persons')
Ext.namespace('Lino.contacts.Companies')
Ext.namespace('Lino.contacts.RoleTypes')
Ext.namespace('Lino.contacts.Roles')
Ext.namespace('Lino.accounts.Charts')
Ext.namespace('Lino.accounts.Groups')
Ext.namespace('Lino.accounts.Accounts')
Ext.namespace('Lino.vat.PaymentTerms')
Ext.namespace('Lino.products.ProductCats')
Ext.namespace('Lino.products.Products')
Ext.namespace('Lino.sepa.Accounts')
Ext.namespace('Lino.excerpts.ExcerptTypes')
Ext.namespace('Lino.excerpts.Excerpts')
Ext.namespace('Lino.excerpts.ExcerptsByX')
Ext.namespace('Lino.ledger.Journals')
Ext.namespace('Lino.ledger.Vouchers')
Ext.namespace('Lino.ledger.Movements')
Ext.namespace('Lino.ledger.Invoices')
Ext.namespace('Lino.sales.ShippingModes')
Ext.namespace('Lino.sales.Invoices')
Ext.namespace('Lino.sales.DocumentsToSign')
Ext.namespace('Lino.declarations.Declarations')
Ext.namespace('Lino.finan.JournalEntries')
Ext.namespace('Lino.finan.PaymentOrders')
Ext.namespace('Lino.finan.BankStatements')
Ext.namespace('Lino.sales.InvoiceItemTable')
Ext.namespace('Lino.sessions.SessionTable')
Ext.namespace('Lino.ledger.InvoiceItemTable')
Ext.namespace('Lino.finan.JournalEntryItemTable')
Ext.namespace('Lino.finan.BankStatementItemTable')
Ext.namespace('Lino.finan.PaymentOrderItemTable')
Ext.namespace('Lino.system.MyTextFieldTemplates')
Ext.namespace('Lino.users.AuthoritiesGiven')
Ext.namespace('Lino.users.AuthoritiesTaken')
Ext.namespace('Lino.countries.PlacesByPlace')
Ext.namespace('Lino.countries.PlacesByCountry')
Ext.namespace('Lino.contacts.PartnersByCity')
Ext.namespace('Lino.contacts.PartnersByCountry')
Ext.namespace('Lino.contacts.RolesByCompany')
Ext.namespace('Lino.contacts.RolesByPerson')
Ext.namespace('Lino.accounts.GroupsByChart')
Ext.namespace('Lino.accounts.AccountsByGroup')
Ext.namespace('Lino.products.ProductsByCategory')
Ext.namespace('Lino.sepa.AccountsByPartner')
Ext.namespace('Lino.excerpts.MyExcerpts')
Ext.namespace('Lino.excerpts.ExcerptsByType')
Ext.namespace('Lino.excerpts.ExcerptsByCompany')
Ext.namespace('Lino.excerpts.ExcerptsByPerson')
Ext.namespace('Lino.ledger.MovementsByVoucher')
Ext.namespace('Lino.ledger.MovementsByPartner')
Ext.namespace('Lino.ledger.MovementsByAccount')
Ext.namespace('Lino.ledger.InvoicesByJournal')
Ext.namespace('Lino.ledger.ItemsByInvoice')
Ext.namespace('Lino.sales.ItemsByInvoice')
Ext.namespace('Lino.sales.ItemsByInvoicePrint')
Ext.namespace('Lino.sales.InvoiceItemsByProduct')
Ext.namespace('Lino.sales.InvoicesByJournal')
Ext.namespace('Lino.sales.InvoicesByPartner')
Ext.namespace('Lino.declarations.VouchersByDeclaration')
Ext.namespace('Lino.declarations.DeclarationsByJournal')
Ext.namespace('Lino.finan.PaymentOrdersByJournal')
Ext.namespace('Lino.finan.JournalEntriesByJournal')
Ext.namespace('Lino.finan.BankStatementsByJournal')
Ext.namespace('Lino.finan.ItemsByJournalEntry')
Ext.namespace('Lino.finan.ItemsByBankStatement')
Ext.namespace('Lino.finan.ItemsByPaymentOrder')
Ext.namespace('Lino.system.HelpTextsByModel')
Ext.namespace('Lino.excerpts.ExcerptsByOwner')
Ext.namespace('Lino.about.Models')
Ext.namespace('Lino.about.FieldsByModel')
Ext.namespace('Lino.about.Inspector')
Ext.namespace('Lino.about.SourceFiles')
Ext.namespace('Lino.ledger.VouchersByPartner')
Ext.namespace('Lino.ledger.ExpectedMovements')
Ext.namespace('Lino.ledger.DebtsByAccount')
Ext.namespace('Lino.ledger.DebtsByPartner')
Ext.namespace('Lino.ledger.GeneralAccountsBalance')
Ext.namespace('Lino.ledger.PartnerAccountsBalance')
Ext.namespace('Lino.ledger.ClientAccountsBalance')
Ext.namespace('Lino.ledger.SupplierAccountsBalance')
Ext.namespace('Lino.ledger.Debtors')
Ext.namespace('Lino.ledger.Creditors')
Ext.namespace('Lino.finan.SuggestionsByVoucher')
Ext.namespace('Lino.finan.SuggestionsByJournalEntry')
Ext.namespace('Lino.finan.SuggestionsByPaymentOrder')
Ext.namespace('Lino.finan.SuggestionsByBankStatement')
Ext.namespace('Lino.lino.Report')
Ext.namespace('Lino.about.About')
Ext.namespace('Lino.system.Home')
Ext.namespace('Lino.ledger.Situation')
Ext.namespace('Lino.ledger.ActivityReport')
Ext.namespace('Lino.lino.BuildMethods')
Ext.namespace('Lino.finan.VoucherStates')
Ext.namespace('Lino.ledger.FiscalYears')
Ext.namespace('Lino.lino.YesNo')
Ext.namespace('Lino.vat.TradeTypes')
Ext.namespace('Lino.declarations.DeclarationPeriods')
Ext.namespace('Lino.sales.InvoiceStates')
Ext.namespace('Lino.declarations.DeclarationStates')
Ext.namespace('Lino.lino.UserProfiles')
Ext.namespace('Lino.vat.VatRegimes')
Ext.namespace('Lino.lino.Genders')
Ext.namespace('Lino.vat.VatClasses')
Ext.namespace('Lino.declarations.DeclarationFields')
Ext.namespace('Lino.countries.PlaceTypes')
Ext.namespace('Lino.ledger.VoucherTypes')
Ext.namespace('Lino.ledger.InvoiceStates')
Ext.namespace('Lino.accounts.AccountTypes')
Ext.namespace('Lino.lino.UserGroups')
Ext.namespace('Lino.lino.UserLevels')
Ext.namespace('Lino.lino.PeriodEvents')

// ChoiceLists: 
Lino.lino.BuildMethods = [ [ "appyodt", "AppyOdtBuildMethod" ], [ "appydoc", "AppyDocBuildMethod" ], [ "appypdf", "AppyPdfBuildMethod" ], [ "appyrtf", "AppyRtfBuildMethod" ], [ "latex", "LatexBuildMethod" ], [ "pisa", "PisaBuildMethod" ], [ "rtf", "RtfBuildMethod" ] ];
Lino.finan.VoucherStates = [ [ "10", "Draft" ], [ "20", "Registered" ] ];
Lino.ledger.FiscalYears = [ [ "11", "2011" ], [ "12", "2012" ], [ "13", "2013" ], [ "14", "2014" ], [ "15", "2015" ], [ "16", "2016" ], [ "17", "2017" ], [ "18", "2018" ] ];
Lino.lino.YesNo = [ [ "y", "Yes" ], [ "n", "No" ] ];
Lino.vat.TradeTypes = [ [ "S", "Sales" ], [ "P", "Purchases" ], [ "W", "Wages" ] ];
Lino.declarations.DeclarationPeriods = [ [ "01", "January" ], [ "02", "February" ], [ "03", "March" ], [ "04", "April" ], [ "05", "May" ], [ "06", "June" ], [ "07", "July" ], [ "08", "August" ], [ "09", "September" ], [ "10", "October" ], [ "11", "November" ], [ "12", "December" ] ];
Lino.sales.InvoiceStates = [ [ "10", "Draft" ], [ "20", "Registered" ], [ "30", "Signed" ], [ "40", "Sent" ], [ "50", "Paid" ] ];
Lino.declarations.DeclarationStates = [ [ "00", "Draft" ], [ "10", "Registered" ], [ "20", "Submitted" ] ];
Lino.lino.UserProfiles = [ [ "000", "000 (Anonymous)" ], [ "100", "100 (User)" ], [ "900", "900 (Administrator)" ] ];
Lino.vat.VatRegimes = [ [ "10", "Private person" ], [ "20", "Subject to VAT" ], [ "25", "Co-contractor" ], [ "30", "Intra-community" ], [ "40", "Outside EU" ], [ "50", "Exempt" ] ];
Lino.lino.Genders = [ [ "M", "Male" ], [ "F", "Female" ] ];
Lino.vat.VatClasses = [ [ "0", "Exempt" ], [ "1", "Reduced" ], [ "2", "Normal" ] ];
Lino.declarations.DeclarationFields = [ [ "00", "Sales base" ], [ "10", "Sales VAT" ], [ "20", "Purchases base" ], [ "30", "Purchases VAT" ], [ "80", "Investments" ], [ "81", "Ware" ], [ "82", "Services" ] ];
Lino.countries.PlaceTypes = [ [ "10", "Member State" ], [ "11", "Division" ], [ "12", "Region" ], [ "13", "Community" ], [ "14", "Territory" ], [ "20", "County" ], [ "21", "Province" ], [ "22", "Shire" ], [ "23", "Subregion" ], [ "24", "Department" ], [ "25", "Arrondissement" ], [ "26", "Prefecture" ], [ "27", "District" ], [ "28", "Sector" ], [ "50", "City" ], [ "51", "Town" ], [ "52", "Municipality" ], [ "54", "Parish" ], [ "55", "Township" ], [ "56", "Quarter" ], [ "61", "Borough" ], [ "62", "Small borough" ], [ "70", "Village" ] ];
Lino.ledger.VoucherTypes = [ [ "ledger.AccountInvoice", "Invoice (ledger.AccountInvoice)" ], [ "declarations.Declaration", "VAT declaration (declarations.Declaration)" ], [ "finan.JournalEntry", "Journal Entry (finan.JournalEntry)" ], [ "finan.PaymentOrder", "Payment Order (finan.PaymentOrder)" ], [ "finan.BankStatement", "Bank Statement (finan.BankStatement)" ], [ "sales.Invoice", "Invoice (sales.Invoice)" ] ];
Lino.ledger.InvoiceStates = [ [ "10", "Draft" ], [ "20", "Registered" ], [ "40", "Paid" ] ];
Lino.accounts.AccountTypes = [ [ "A", "Assets" ], [ "L", "Liabilities" ], [ "I", "Incomes" ], [ "E", "Expenses" ], [ "C", "Capital" ], [ "B", "Bank accounts" ] ];
Lino.lino.UserGroups = [ [ "office", "office (Office)" ], [ "accounts", "accounts (Accounting)" ] ];
Lino.lino.UserLevels = [ [ "10", "Guest" ], [ "30", "User" ], [ "40", "Manager" ], [ "50", "Administrator" ] ];
Lino.lino.PeriodEvents = [ [ "10", "Started" ], [ "20", "Active" ], [ "30", "Ended" ] ];

Lino.about.Inspector.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoHeight: true,
  frame: true,
  layoutConfig: { "align": "stretchmax" },
  hideCheckBoxLabels: true,
  autoScroll: false,
  labelWidth: 153,
  border: false,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var inspected1217 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Inspected object", "name": "inspected", "maxLength": 100, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Inspected object","(about.Inspector.inspected) ") }, "anchor": "-20" });
    var show_callables1218 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "show_callables", "listeners": { "render": Lino.quicktip_renderer("show callables","(about.Inspector.show_callables) ") }, "boxLabel": "show callables", "selectOnFocus": true, "anchor": "-20" });
    this.items = [ { "flex": 67, "autoHeight": true, "layout": "form", "xtype": "panel", "items": inspected1217, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": show_callables1218, "labelAlign": "top" } ];
    this.fields = [ inspected1217, show_callables1218 ];
    Lino.about.Inspector.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Debtors.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoScroll: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var today1227 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Situation on</span>", "name": "today", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Situation on","(ledger.Debtors.today) Date of observation") }, "anchor": "-20" });
    this.items = [ { "items": today1227, "autoHeight": true, "layout": "form", "xtype": "panel", "labelAlign": "top" } ];
    this.fields = [ today1227 ];
    Lino.ledger.Debtors.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.finan.JournalEntries.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoHeight: true,
  frame: true,
  layoutConfig: { "align": "stretchmax" },
  hideCheckBoxLabels: true,
  autoScroll: false,
  labelWidth: 108,
  border: false,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var pjournal335 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "name": "pjournal", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.JournalEntries.pjournal) ") }, "selectOnFocus": true, "hiddenName": "pjournalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/pjournal", "method": "GET" }) }) });
    var pyear336 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "pyear", "hiddenName": "pyearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(finan.JournalEntries.pyear) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    this.items = [ { "flex": 74, "autoHeight": true, "layout": "form", "xtype": "panel", "items": pjournal335, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": pyear336, "labelAlign": "top" } ];
    this.fields = [ pjournal335, pyear336 ];
    Lino.finan.JournalEntries.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Creditors.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoScroll: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var today1230 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Situation on</span>", "name": "today", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Situation on","(ledger.Creditors.today) Date of observation") }, "anchor": "-20" });
    this.items = [ { "items": today1230, "autoHeight": true, "layout": "form", "xtype": "panel", "labelAlign": "top" } ];
    this.fields = [ today1230 ];
    Lino.ledger.Creditors.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Situation.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoScroll: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var today1242 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Situation on</span>", "name": "today", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Situation on","(ledger.Situation.today) Date of observation") }, "anchor": "-20" });
    this.items = [ { "items": today1242, "autoHeight": true, "layout": "form", "xtype": "panel", "labelAlign": "top" } ];
    this.fields = [ today1242 ];
    Lino.ledger.Situation.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.ActivityReport.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoHeight: true,
  frame: true,
  layoutConfig: { "align": "stretchmax" },
  hideCheckBoxLabels: true,
  autoScroll: false,
  labelWidth: 108,
  border: false,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_date1245 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "name": "start_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.ActivityReport.start_date) Start date of observed period") }, "anchor": "-20" });
    var end_date1246 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "name": "end_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("until","(ledger.ActivityReport.end_date) End date of observed period") }, "anchor": "-20" });
    this.items = [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": start_date1245, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": end_date1246, "labelAlign": "top" } ];
    this.fields = [ start_date1245, end_date1246 ];
    Lino.ledger.ActivityReport.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.ExpectedMovements.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoHeight: true,
  frame: true,
  layoutConfig: { "align": "stretchmax" },
  hideCheckBoxLabels: true,
  autoScroll: false,
  labelWidth: 99,
  border: false,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var trade_type1222 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Trade Type", "name": "trade_type", "hiddenName": "trade_typeHidden", "listeners": { "render": Lino.quicktip_renderer("Trade Type","(ledger.ExpectedMovements.trade_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.vat.TradeTypes) });
    var date_until1223 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "Date until", "name": "date_until", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date until","(ledger.ExpectedMovements.date_until) ") }, "anchor": "-20" });
    this.items = [ { "flex": 48, "autoHeight": true, "layout": "form", "xtype": "panel", "items": trade_type1222, "labelAlign": "top" }, { "flex": 52, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date_until1223, "labelAlign": "top" } ];
    this.fields = [ trade_type1222, date_until1223 ];
    Lino.ledger.ExpectedMovements.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.sales.Invoices.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoHeight: true,
  frame: true,
  layoutConfig: { "align": "stretchmax" },
  hideCheckBoxLabels: true,
  autoScroll: false,
  labelWidth: 108,
  border: false,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var journal154 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "name": "journal", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(sales.Invoices.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/journal", "method": "GET" }) }) });
    var state155 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "State", "name": "state", "hiddenName": "stateHidden", "listeners": { "render": Lino.quicktip_renderer("State","(sales.Invoices.state) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.sales.InvoiceStates) });
    var year156 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(sales.Invoices.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    this.items = [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal154, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": state155, "labelAlign": "top" }, { "flex": 17, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year156, "labelAlign": "top" } ];
    this.fields = [ journal154, state155, year156 ];
    Lino.sales.Invoices.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Invoices.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoHeight: true,
  frame: true,
  layoutConfig: { "align": "stretchmax" },
  hideCheckBoxLabels: true,
  autoScroll: false,
  labelWidth: 108,
  border: false,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var pjournal262 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "name": "pjournal", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.Invoices.pjournal) ") }, "selectOnFocus": true, "hiddenName": "pjournalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/pjournal", "method": "GET" }) }) });
    var pyear263 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "pyear", "hiddenName": "pyearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(ledger.Invoices.pyear) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var ppartner264 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "name": "ppartner", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "hiddenName": "ppartnerHidden", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.Invoices.ppartner) ") }, "selectOnFocus": true, "emptyText": "Select a Partner...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/ppartner", "method": "GET" }) }) });
    this.items = [ { "flex": 42, "autoHeight": true, "layout": "form", "xtype": "panel", "items": pjournal262, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": pyear263, "labelAlign": "top" }, { "flex": 42, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ppartner264, "labelAlign": "top" } ];
    this.fields = [ pjournal262, pyear263, ppartner264 ];
    Lino.ledger.Invoices.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Movements.ParamsPanel = Ext.extend(Ext.form.FormPanel,{
  autoScroll: false,
  autoHeight: true,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date102 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "name": "start_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.Movements.start_date) Start date of observed period") }, "value": null, "anchor": "-20" });
    var end_date103 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "name": "end_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("until","(ledger.Movements.end_date) End date of observed period") }, "value": null, "anchor": "-20" });
    var cleared104 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Show cleared movements", "name": "cleared", "hiddenName": "clearedHidden", "listeners": { "render": Lino.quicktip_renderer("Show cleared movements","(ledger.Movements.cleared) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.YesNo) });
    var main_1_panel105 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": start_date102, "labelAlign": "top" }, { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": end_date103, "labelAlign": "top" }, { "flex": 21, "autoHeight": true, "layout": "form", "xtype": "panel", "items": cleared104, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 207, "border": false, "anchor": "-20", "labelAlign": "top" });
    var pjournal109 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "name": "pjournal", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.Movements.pjournal) ") }, "selectOnFocus": true, "hiddenName": "pjournalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/pjournal", "method": "GET" }) }) });
    var pyear110 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "pyear", "hiddenName": "pyearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(ledger.Movements.pyear) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var ppartner111 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "name": "ppartner", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "hiddenName": "ppartnerHidden", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.Movements.ppartner) ") }, "selectOnFocus": true, "emptyText": "Select a Partner...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/ppartner", "method": "GET" }) }) });
    var paccount112 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Account", "name": "paccount", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Account","(ledger.Movements.paccount) ") }, "selectOnFocus": true, "hiddenName": "paccountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/paccount", "method": "GET" }) }) });
    var main_2_panel113 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 29, "autoHeight": true, "layout": "form", "xtype": "panel", "items": pjournal109, "labelAlign": "top" }, { "flex": 10, "autoHeight": true, "layout": "form", "xtype": "panel", "items": pyear110, "labelAlign": "top" }, { "flex": 29, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ppartner111, "labelAlign": "top" }, { "flex": 29, "autoHeight": true, "layout": "form", "xtype": "panel", "items": paccount112, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 108, "border": false, "anchor": "-20", "labelAlign": "top" });
    this.items = [ main_1_panel105, main_2_panel113 ];
    this.fields = [ start_date102, end_date103, cleared104, pjournal109, pyear110, ppartner111, paccount112 ];
    Lino.ledger.Movements.ParamsPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Companies.merge_row_ActionFormPanel = Ext.extend(Lino.ActionFormPanel,{
  autoScroll: false,
  autoHeight: true,
  border: false,
  layout: "form",
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  action_name: 'merge_row',
  ls_url: "/contacts/Companies",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to13 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "into...", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "emptyText": "Select a Organization...", "listeners": { "render": Lino.quicktip_renderer("into...","(<MergeAction merge_row (u'Merge')>.merge_to) ") }, "selectOnFocus": true, "hiddenName": "merge_toHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/apchoices/contacts/Companies/merge_row/merge_to", "method": "GET" }) }), "name": "merge_to" });
    this.reason14 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Reason", "name": "reason", "listeners": { "render": Lino.quicktip_renderer("Reason","(<MergeAction merge_row (u'Merge')>.reason) ") }, "maxLength": 100, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    this.items = [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.merge_to13, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.reason14, "anchor": "-20", "labelAlign": "top" } ];
    this.fields = [ this.merge_to13, this.reason14 ];
    Lino.contacts.Companies.merge_row_ActionFormPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Persons.merge_row_ActionFormPanel = Ext.extend(Lino.ActionFormPanel,{
  autoScroll: false,
  autoHeight: true,
  border: false,
  layout: "form",
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  action_name: 'merge_row',
  ls_url: "/contacts/Persons",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to8 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "into...", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "emptyText": "Select a Person...", "listeners": { "render": Lino.quicktip_renderer("into...","(<MergeAction merge_row (u'Merge')>.merge_to) ") }, "selectOnFocus": true, "hiddenName": "merge_toHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/apchoices/contacts/Persons/merge_row/merge_to", "method": "GET" }) }), "name": "merge_to" });
    this.reason9 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Reason", "name": "reason", "listeners": { "render": Lino.quicktip_renderer("Reason","(<MergeAction merge_row (u'Merge')>.reason) ") }, "maxLength": 100, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    this.items = [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.merge_to8, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.reason9, "anchor": "-20", "labelAlign": "top" } ];
    this.fields = [ this.merge_to8, this.reason9 ];
    Lino.contacts.Persons.merge_row_ActionFormPanel.superclass.initComponent.call(this);
  }
});


Lino.users.Users.change_password_ActionFormPanel = Ext.extend(Lino.ActionFormPanel,{
  autoScroll: false,
  autoHeight: true,
  border: false,
  layout: "form",
  labelWidth: 171,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  labelAlign: "top",
  action_name: 'change_password',
  ls_url: "/users/Users",
  window_title: "Change password",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.current1 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Current password", "name": "current", "inputType": "password", "listeners": { "render": Lino.quicktip_renderer("Current password","(<ChangePassword change_password (u'Change password')>.current) ") }, "maxLength": null, "selectOnFocus": true, "anchor": "-20" });
    this.new12 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "New password", "name": "new1", "inputType": "password", "listeners": { "render": Lino.quicktip_renderer("New password","(<ChangePassword change_password (u'Change password')>.new1) ") }, "maxLength": null, "selectOnFocus": true, "anchor": "-20" });
    this.new23 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "New password again", "name": "new2", "inputType": "password", "listeners": { "render": Lino.quicktip_renderer("New password again","(<ChangePassword change_password (u'Change password')>.new2) ") }, "maxLength": null, "selectOnFocus": true, "anchor": "-20" });
    this.items = [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.current1, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.new12, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": this.new23, "anchor": "-20", "labelAlign": "top" } ];
    this.fields = [ this.current1, this.new12, this.new23 ];
    Lino.users.Users.change_password_ActionFormPanel.superclass.initComponent.call(this);
  }
});


Lino.accounts.Accounts.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 18,
  initComponent : function() {
    var ref957 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "ref", "name": "ref", "maxLength": 20, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ref","(accounts.Accounts.ref) ") }, "anchor": "-20" });
    var group958 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Account Group", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Groups.detail,Lino.accounts.Groups.insert)}, "emptyText": "Select a Account Group...", "listeners": { "render": Lino.quicktip_renderer("Account Group","(accounts.Accounts.group) ") }, "selectOnFocus": true, "hiddenName": "groupHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/Accounts/group", "method": "GET" }) }), "name": "group" });
    var type959 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Account Type", "allowBlank": false, "hiddenName": "typeHidden", "listeners": { "render": Lino.quicktip_renderer("Account Type","(accounts.Accounts.type) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.accounts.AccountTypes, "name": "type" });
    var main_1_panel960 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ref957, "labelAlign": "top" }, { "flex": 35, "autoHeight": true, "layout": "form", "xtype": "panel", "items": group958, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": type959, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 126, "border": false, "anchor": "-20", "labelAlign": "top" });
    var name964 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Accounts.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et965 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(accounts.Accounts.name_et) ") }, "anchor": "-20" });
    var main_2_panel966 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name964, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et965, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 153, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel969 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel960, main_2_panel966 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel969;
    this.before_row_edit = function(record) {
    }
    Lino.accounts.Accounts.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.accounts.Accounts.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 18,
  initComponent : function() {
    var ref927 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "ref", "name": "ref", "maxLength": 20, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ref","(accounts.Accounts.ref) ") }, "anchor": "-20" });
    var name928 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Accounts.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et929 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(accounts.Accounts.name_et) ") }, "anchor": "-20" });
    var id930 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(accounts.Accounts.id) ") }, "anchor": "-20" });
    var main_1_panel931 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 17, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ref927, "labelAlign": "top" }, { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name928, "labelAlign": "top" }, { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et929, "labelAlign": "top" }, { "flex": 8, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id930, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var seqno936 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "Seq.No.", "name": "seqno", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Seq.No.","(accounts.Accounts.seqno) ") }, "anchor": "-20" });
    var chart937 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Account Chart", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Charts.detail,Lino.accounts.Charts.insert)}, "emptyText": "Select a Account Chart...", "listeners": { "render": Lino.quicktip_renderer("Account Chart","(accounts.Accounts.chart) ") }, "selectOnFocus": true, "hiddenName": "chartHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/Accounts/chart", "method": "GET" }) }), "name": "chart" });
    var group938 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Account Group", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Groups.detail,Lino.accounts.Groups.insert)}, "emptyText": "Select a Account Group...", "listeners": { "render": Lino.quicktip_renderer("Account Group","(accounts.Accounts.group) ") }, "selectOnFocus": true, "hiddenName": "groupHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/Accounts/group", "method": "GET" }) }), "name": "group" });
    var type939 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Account Type", "allowBlank": false, "hiddenName": "typeHidden", "listeners": { "render": Lino.quicktip_renderer("Account Type","(accounts.Accounts.type) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.accounts.AccountTypes, "name": "type" });
    var clearable940 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "clearable", "listeners": { "render": Lino.quicktip_renderer("Clearable","(accounts.Accounts.clearable) ") }, "boxLabel": "Clearable", "selectOnFocus": true, "anchor": "-20" });
    var main_2_panel941 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 126, "hideCheckBoxLabels": true, "items": [ { "flex": 7, "autoHeight": true, "layout": "form", "xtype": "panel", "items": seqno936, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": chart937, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": group938, "labelAlign": "top" }, { "flex": 22, "autoHeight": true, "layout": "form", "xtype": "panel", "items": type939, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": clearable940, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var ledger_MovementsByAccount_grid955 = new Lino.ledger.MovementsByAccount.GridPanel({ "flex": 71, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByAccount) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByAccount.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel956 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel931, main_2_panel941, ledger_MovementsByAccount_grid955 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel956;
    this.before_row_edit = function(record) {
      ledger_MovementsByAccount_grid955.on_master_changed();
    }
    Lino.accounts.Accounts.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Invoices.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 26,
  initComponent : function() {
    var id269 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(ledger.Invoices.id) ") }, "anchor": "-20" });
    var date270 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(ledger.Invoices.date) ") }, "anchor": "-20" });
    var partner271 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "emptyText": "Select a Partner...", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.Invoices.partner) ") }, "selectOnFocus": true, "hiddenName": "partnerHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/partner", "method": "GET" }) }), "name": "partner" });
    var user272 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(ledger.Invoices.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/user", "method": "GET" }) }) });
    var general_1_panel273 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 8, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id269, "labelAlign": "top" }, { "flex": 22, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date270, "labelAlign": "top" }, { "flex": 34, "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner271, "labelAlign": "top" }, { "flex": 34, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user272, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 72, "border": false, "anchor": "-20", "labelAlign": "top" });
    var due_date278 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "Due date", "name": "due_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Due date","(ledger.Invoices.due_date) ") }, "anchor": "-20" });
    var your_ref279 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Your reference", "name": "your_ref", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Your reference","(ledger.Invoices.your_ref) ") }, "anchor": "-20" });
    var vat_regime280 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "VAT Regime", "allowBlank": false, "hiddenName": "vat_regimeHidden", "listeners": { "render": Lino.quicktip_renderer("VAT Regime","(ledger.Invoices.vat_regime) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.vat.VatRegimes, "name": "vat_regime" });
    var general_2_panel281 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": due_date278, "labelAlign": "top" }, { "flex": 40, "autoHeight": true, "layout": "form", "xtype": "panel", "items": your_ref279, "labelAlign": "top" }, { "flex": 34, "autoHeight": true, "layout": "form", "xtype": "panel", "items": vat_regime280, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 135, "border": false, "anchor": "-20", "labelAlign": "top" });
    var ItemsByInvoice_grid292 = new Lino.ledger.ItemsByInvoice.GridPanel({ "flex": 75, "listeners": { "render": Lino.quicktip_renderer("Voucher items","(ledger.ledger.ItemsByInvoice) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.ItemsByInvoice.grid) ], "preview_limit": 15, "master_panel": this });
    var total_base293 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total excl. VAT", "name": "total_base", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total excl. VAT","(ledger.Invoices.total_base) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var total_vat294 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "VAT", "name": "total_vat", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("VAT","(ledger.Invoices.total_vat) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var total_incl295 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total incl. VAT", "name": "total_incl", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(ledger.Invoices.total_incl) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var workflow_buttons_disp296 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Workflow", "name": "workflow_buttons", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Workflow","(ledger.Invoices.workflow_buttons) ") }, "anchor": "-20" });
    var totals_panel297 = new Ext.Panel({ "flex": 25, "autoHeight": true, "layout": "form", "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_base293, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_vat294, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_incl295, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": workflow_buttons_disp296, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 144, "border": false, "labelAlign": "top" });
    var general_3_panel302 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "hideCheckBoxLabels": true, "items": [ ItemsByInvoice_grid292, totals_panel297 ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "anchor": "-20", "labelAlign": "top" });
    var general_panel303 = new Ext.Panel({ "autoHeight": true, "layout": "form", "title": "General", "items": [ general_1_panel273, general_2_panel281, general_3_panel302 ], "frame": true, "bodyBorder": false, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "labelAlign": "top" });
    var journal304 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.Invoices.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/journal", "method": "GET" }) }), "name": "journal" });
    var year305 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(ledger.Invoices.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number306 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "number", "name": "number", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("number","(ledger.Invoices.number) ") }, "anchor": "-20" });
    var narration307 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Narration", "name": "narration", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Narration","(ledger.Invoices.narration) ") }, "anchor": "-20" });
    var ledger_1_panel308 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 37, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal304, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year305, "labelAlign": "top" }, { "flex": 9, "autoHeight": true, "layout": "form", "xtype": "panel", "items": number306, "labelAlign": "top" }, { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": narration307, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var MovementsByVoucher_grid313 = new Lino.ledger.MovementsByVoucher.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByVoucher) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByVoucher.grid) ], "preview_limit": 15, "master_panel": this });
    var ledger_panel314 = new Ext.Panel({ "layout": "vbox", "title": "Ledger", "items": [ ledger_1_panel308, MovementsByVoucher_grid313 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var main_panel315 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel303, ledger_panel314 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel315;
    this.before_row_edit = function(record) {
      ItemsByInvoice_grid292.on_master_changed();
      MovementsByVoucher_grid313.on_master_changed();
    }
    Lino.ledger.Invoices.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Journals.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 24,
  initComponent : function() {
    var ref1146 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "ref", "name": "ref", "maxLength": 20, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ref","(ledger.Journals.ref) ") }, "anchor": "-20" });
    var trade_type1147 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Trade Type", "name": "trade_type", "hiddenName": "trade_typeHidden", "listeners": { "render": Lino.quicktip_renderer("Trade Type","(ledger.Journals.trade_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.vat.TradeTypes) });
    var seqno1148 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "Seq.No.", "name": "seqno", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Seq.No.","(ledger.Journals.seqno) ") }, "anchor": "-20" });
    var id1149 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(ledger.Journals.id) ") }, "anchor": "-20" });
    var voucher_type1150 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "voucher type", "allowBlank": false, "hiddenName": "voucher_typeHidden", "listeners": { "render": Lino.quicktip_renderer("voucher type","(ledger.Journals.voucher_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.ledger.VoucherTypes, "name": "voucher_type" });
    var main_1_panel1151 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ref1146, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": trade_type1147, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": seqno1148, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id1149, "labelAlign": "top" }, { "flex": 27, "autoHeight": true, "layout": "form", "xtype": "panel", "items": voucher_type1150, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 117, "border": false, "anchor": "-20", "labelAlign": "top" });
    var force_sequence1157 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "force_sequence", "listeners": { "render": Lino.quicktip_renderer("Force chronological sequence","(ledger.Journals.force_sequence) ") }, "boxLabel": "Force chronological sequence", "selectOnFocus": true, "anchor": "-20" });
    var account1158 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Account", "name": "account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Account","(ledger.Journals.account) ") }, "selectOnFocus": true, "hiddenName": "accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Journals/account", "method": "GET" }) }) });
    var dc1159 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": null, "name": "dc", "listeners": { "render": Lino.quicktip_renderer("dc","(ledger.Journals.dc) Debit (checked) or Credit (not checked)") }, "boxLabel": "dc", "selectOnFocus": true, "anchor": "-20" });
    var build_method1160 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Build method", "name": "build_method", "hiddenName": "build_methodHidden", "listeners": { "render": Lino.quicktip_renderer("Build method","(ledger.Journals.build_method) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var template1161 = new Lino.SimpleRemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Template", "name": "template", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Template","(ledger.Journals.template) ") }, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Journals/template", "method": "GET" }) }), "anchor": "-20" });
    var main_2_panel1162 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": force_sequence1157, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": account1158, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": dc1159, "labelAlign": "top" }, { "flex": 29, "autoHeight": true, "layout": "form", "xtype": "panel", "items": build_method1160, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": template1161, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 261, "border": false, "anchor": "-20", "labelAlign": "top" });
    var name1168 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(ledger.Journals.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et1169 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(ledger.Journals.name_et) ") }, "anchor": "-20" });
    var main_3_panel1170 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name1168, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et1169, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 153, "border": false, "anchor": "-20", "labelAlign": "top" });
    var printed_name1173 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "printed name", "name": "printed_name", "maxLength": 100, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("printed name","(ledger.Journals.printed_name) ") }, "anchor": "-20" });
    var printed_name_et1174 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "printed name (et)", "name": "printed_name_et", "maxLength": 100, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("printed name (et)","(ledger.Journals.printed_name_et) ") }, "anchor": "-20" });
    var main_4_panel1175 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": printed_name1173, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": printed_name_et1174, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 162, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel1178 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel1151, main_2_panel1162, main_3_panel1170, main_4_panel1175 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1178;
    this.before_row_edit = function(record) {
      account1158.setContextValue('chart', record ? record.data['chartHidden'] : undefined);
      template1161.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1161.setContextValue('voucher_type', record ? record.data['voucher_typeHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      build_method1160.on('change',Lino.chooser_handler(template1161,'build_method'));
      voucher_type1150.on('change',Lino.chooser_handler(template1161,'voucher_type'));
      Lino.ledger.Journals.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.ledger.Journals.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.products.ProductCats.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 16,
  initComponent : function() {
    var id991 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(products.ProductCats.id) ") }, "anchor": "-20" });
    var name992 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(products.ProductCats.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et993 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(products.ProductCats.name_et) ") }, "anchor": "-20" });
    var main_1_panel994 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 10, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id991, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name992, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et993, "labelAlign": "top" } ], "region": "north", "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "split": true, "autoScroll": false, "labelWidth": 153, "border": false, "frame": false, "labelAlign": "top" });
    var description998 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("description","(products.ProductCats.description) ") }, "fieldLabel": "description", "name": "description", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var ProductsByCategory_grid1051 = new Lino.products.ProductsByCategory.GridPanel({ "flex": 5, "hide_top_toolbar": true, "containing_panel": this, "region": "south", "preview_limit": 15, "master_panel": this, "listeners": { "render": Lino.quicktip_renderer("Products","(products.products.ProductsByCategory) ") }, "split": true, "tools": [ Lino.show_in_own_window_button(Lino.products.ProductsByCategory.grid) ] });
    var main_panel1052 = new Lino.VBorderPanel({ "autoScroll": false, "border": false, "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ main_1_panel994, { "flex": 5, "layout": "form", "xtype": "panel", "items": description998, "region": "center", "labelAlign": "top", "split": true }, ProductsByCategory_grid1051 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1052;
    this.before_row_edit = function(record) {
      ProductsByCategory_grid1051.on_master_changed();
    }
    Lino.products.ProductCats.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.lino.Report.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var body_htmlbox1233 = new Lino.HtmlBoxPanel({ "layout": "fit", "name": "body", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "bodyStyle": "overflow-x:hidden;", "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer(null,"(lino.Report.body) ") } });
    var main_panel1234 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "fit", "labelWidth": 0, "hideCheckBoxLabels": true, "items": [ body_htmlbox1233 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1234;
    this.before_row_edit = function(record) {
      body_htmlbox1233.refresh();
    }
    Lino.lino.Report.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Companies.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 11,
  initComponent : function() {
    var prefix816 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "prefix", "name": "prefix", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("prefix","(contacts.Companies.prefix) ") }, "anchor": "-20" });
    var name817 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Name", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Companies.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var type818 = new Lino.RemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Company type", "name": "type", "pageSize": 20, "emptyText": "Select a Organization Type...", "listeners": { "render": Lino.quicktip_renderer("Company type","(contacts.Companies.type) ") }, "selectOnFocus": true, "hiddenName": "typeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/type", "method": "GET" }) }) });
    var name_box_panel819 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": prefix816, "labelAlign": "top" }, { "flex": 34, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name817, "labelAlign": "top" }, { "flex": 49, "autoHeight": true, "layout": "form", "xtype": "panel", "items": type818, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 117, "border": false, "anchor": "-20", "labelAlign": "top" });
    var country823 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Country", "name": "country", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "emptyText": "Select a Country...", "listeners": { "render": Lino.quicktip_renderer("Country","(contacts.Companies.country) ") }, "selectOnFocus": true, "hiddenName": "countryHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/country", "method": "GET" }) }) });
    var region824 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Region", "name": "region", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("Region","(contacts.Companies.region) ") }, "selectOnFocus": true, "hiddenName": "regionHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/region", "method": "GET" }) }) });
    var city825 = new Lino.TwinCombo({ "autoHeight": true, "forceSelection": false, "fieldLabel": "City", "name": "city", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("City","(contacts.Companies.city) ") }, "selectOnFocus": true, "hiddenName": "cityHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/city", "method": "GET" }) }) });
    var zip_code826 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Zip code", "name": "zip_code", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Zip code","(contacts.Companies.zip_code) ") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var address_box_2_panel827 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": country823, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": region824, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": city825, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": zip_code826, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var addr1832 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Address line before street</span>", "name": "addr1", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Address line before street","(contacts.Companies.addr1) Address line before street") }, "anchor": "-20" });
    var street_prefix833 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Street prefix</span>", "name": "street_prefix", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Street prefix","(contacts.Companies.street_prefix) Text to print before name of street, but to ignore for sorting.") }, "anchor": "-20" });
    var street834 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Street</span>", "name": "street", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Street","(contacts.Companies.street) Name of street, without house number.") }, "anchor": "-20" });
    var street_no835 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "name": "street_no", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("No.","(contacts.Companies.street_no) House number.") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var street_box836 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Box</span>", "name": "street_box", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Box","(contacts.Companies.street_box) Text to print after street nuber on the same line.") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var address_box_4_panel837 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 30, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_prefix833, "labelAlign": "top" }, { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street834, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_no835, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_box836, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 126, "border": false, "anchor": "-20", "labelAlign": "top" });
    var addr2842 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Address line after street</span>", "name": "addr2", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Address line after street","(contacts.Companies.addr2) Address line to print below street line.") }, "anchor": "-20" });
    var address_box_panel843 = new Ext.form.FieldSet({ "flex": 66, "autoHeight": true, "layout": "form", "title": "Address", "items": [ name_box_panel819, address_box_2_panel827, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": addr1832, "anchor": "-20", "labelAlign": "top" }, address_box_4_panel837, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": addr2842, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 243, "border": false, "labelAlign": "top" });
    var id846 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Companies.id) ") }, "anchor": "-20" });
    var language847 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Companies.language) Die Sprache, in der Dokumente ausgestellt werden sollen.") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var info_box_panel848 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 20, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id846, "labelAlign": "top" }, { "flex": 80, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language847, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var email851 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "E-Mail", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("E-Mail","(contacts.Companies.email) ") }, "anchor": "-20" });
    var url852 = new Lino.URLField({ "autoHeight": true, "fieldLabel": "URL", "name": "url", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("URL","(contacts.Companies.url) ") }, "anchor": "-20" });
    var phone853 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Phone", "name": "phone", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Phone","(contacts.Companies.phone) ") }, "anchor": "-20" });
    var gsm854 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "GSM", "name": "gsm", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("GSM","(contacts.Companies.gsm) ") }, "anchor": "-20" });
    var fax855 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Fax", "name": "fax", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Fax","(contacts.Companies.fax) ") }, "anchor": "-20" });
    var contact_box_5_panel856 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": gsm854, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": fax855, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 36, "border": false, "anchor": "-20", "labelAlign": "top" });
    var contact_box_panel859 = new Ext.form.FieldSet({ "flex": 33, "autoHeight": true, "layout": "form", "title": "Contact", "items": [ info_box_panel848, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": email851, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": url852, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": phone853, "anchor": "-20", "labelAlign": "top" }, contact_box_5_panel856 ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 63, "border": false, "labelAlign": "top" });
    var general_1_panel863 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "hideCheckBoxLabels": true, "items": [ address_box_panel843, contact_box_panel859 ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var remarks864 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Remarks","(contacts.Companies.remarks) ") }, "fieldLabel": "Remarks", "name": "remarks", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var contacts_RolesByCompany_grid869 = new Lino.contacts.RolesByCompany.GridPanel({ "flex": 42, "listeners": { "render": Lino.quicktip_renderer("Contact persons","(contacts.contacts.RolesByCompany) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.contacts.RolesByCompany.grid) ], "preview_limit": 15, "master_panel": this });
    var bottom_box_1_panel870 = new Ext.Panel({ "flex": 50, "border": false, "layout": "hbox", "labelWidth": 72, "hideCheckBoxLabels": true, "items": [ { "items": remarks864, "labelAlign": "top", "layout": "form", "xtype": "panel", "flex": 57 }, contacts_RolesByCompany_grid869 ], "autoScroll": false, "layoutConfig": { "align": "stretch" }, "frame": false, "labelAlign": "top" });
    var general_panel872 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel863, bottom_box_1_panel870 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var VouchersByPartner_htmlbox873 = new Lino.HtmlBoxPanel({ "flex": 3, "layout": "fit", "name": "VouchersByPartner", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "region": "north", "title": "VAT vouchers", "master_panel": this, "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer("VAT vouchers","(contacts.Companies.VouchersByPartner) ") }, "bodyStyle": "overflow-x:hidden;", "split": true, "tools": [ Lino.show_in_own_window_button(Lino.ledger.VouchersByPartner.grid) ] });
    var ledger_MovementsByPartner_grid874 = new Lino.ledger.MovementsByPartner.GridPanel({ "flex": 5, "hide_top_toolbar": true, "containing_panel": this, "region": "center", "preview_limit": 15, "master_panel": this, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByPartner) ") }, "split": true, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByPartner.grid) ] });
    var ledger_panel875 = new Lino.VBorderPanel({ "autoScroll": false, "listeners": { "activate": Lino.on_tab_activate }, "border": false, "labelWidth": 117, "title": "Accounting", "hideCheckBoxLabels": true, "items": [ VouchersByPartner_htmlbox873, ledger_MovementsByPartner_grid874 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    var main_panel876 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel872, ledger_panel875 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel876;
    this.before_row_edit = function(record) {
      region824.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city825.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city825.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      contacts_RolesByCompany_grid869.on_master_changed();
      VouchersByPartner_htmlbox873.refresh();
      ledger_MovementsByPartner_grid874.on_master_changed();
    }
    this.onRender = function(ct, position) {
      country823.on('change',Lino.chooser_handler(region824,'country'));
      country823.on('change',Lino.chooser_handler(city825,'country'));
      region824.on('change',Lino.chooser_handler(city825,'region'));
      Lino.contacts.Companies.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.contacts.Companies.DetailFormPanel.superclass.initComponent.call(this);
    // active_fields:
    city825.on("change", function(){ this.save() }, this);
    zip_code826.on("change", function(){ this.save() }, this);
  }
});


Lino.products.Products.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 17,
  initComponent : function() {
    var id1008 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(products.Products.id) ") }, "anchor": "-20" });
    var cat1009 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Category", "name": "cat", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.ProductCats.detail,Lino.products.ProductCats.insert)}, "emptyText": "Select a Product Category...", "listeners": { "render": Lino.quicktip_renderer("Category","(products.Products.cat) ") }, "selectOnFocus": true, "hiddenName": "catHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/Products/cat", "method": "GET" }) }) });
    var sales_price1010 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Sales price", "name": "sales_price", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Sales price","(products.Products.sales_price) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var vat_class1011 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "VAT Class", "name": "vat_class", "hiddenName": "vat_classHidden", "listeners": { "render": Lino.quicktip_renderer("VAT Class","(products.Products.vat_class) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var general_1_panel1012 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 10, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id1008, "labelAlign": "top" }, { "flex": 42, "autoHeight": true, "layout": "form", "xtype": "panel", "items": cat1009, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": sales_price1010, "labelAlign": "top" }, { "flex": 21, "autoHeight": true, "layout": "form", "xtype": "panel", "items": vat_class1011, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var name1017 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(products.Products.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et1018 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(products.Products.name_et) ") }, "anchor": "-20" });
    var general_2_panel1019 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name1017, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et1018, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var description1022 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Long description","(products.Products.description) ") }, "fieldLabel": "Long description", "name": "description", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var general_panel1023 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel1012, general_2_panel1019, { "items": description1022, "labelAlign": "top", "layout": "form", "xtype": "panel", "flex": 71 } ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "labelWidth": 153, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var sales_InvoiceItemsByProduct_grid1036 = new Lino.sales.InvoiceItemsByProduct.GridPanel({ "listeners": { "activate": Lino.on_tab_activate }, "hide_top_toolbar": true, "containing_panel": this, "title": "Sales", "tools": [ Lino.show_in_own_window_button(Lino.sales.InvoiceItemsByProduct.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel1037 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel1023, sales_InvoiceItemsByProduct_grid1036 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel1037;
    this.before_row_edit = function(record) {
      sales_InvoiceItemsByProduct_grid1036.on_master_changed();
    }
    Lino.products.Products.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.products.Products.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 17,
  initComponent : function() {
    var cat1038 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Category", "name": "cat", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.ProductCats.detail,Lino.products.ProductCats.insert)}, "emptyText": "Select a Product Category...", "listeners": { "render": Lino.quicktip_renderer("Category","(products.Products.cat) ") }, "selectOnFocus": true, "hiddenName": "catHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/Products/cat", "method": "GET" }) }) });
    var sales_price1039 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Sales price", "name": "sales_price", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Sales price","(products.Products.sales_price) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var vat_class1040 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "VAT Class", "name": "vat_class", "hiddenName": "vat_classHidden", "listeners": { "render": Lino.quicktip_renderer("VAT Class","(products.Products.vat_class) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var main_1_panel1041 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 47, "autoHeight": true, "layout": "form", "xtype": "panel", "items": cat1038, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": sales_price1039, "labelAlign": "top" }, { "flex": 23, "autoHeight": true, "layout": "form", "xtype": "panel", "items": vat_class1040, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 108, "border": false, "anchor": "-20", "labelAlign": "top" });
    var name1045 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(products.Products.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et1046 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(products.Products.name_et) ") }, "anchor": "-20" });
    var main_2_panel1047 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name1045, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et1046, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 153, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel1050 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel1041, main_2_panel1047 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1050;
    this.before_row_edit = function(record) {
    }
    Lino.products.Products.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.system.TextFieldTemplates.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 5,
  initComponent : function() {
    var name600 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(system.TextFieldTemplates.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var user601 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(system.TextFieldTemplates.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/TextFieldTemplates/user", "method": "GET" }) }) });
    var main_panel602 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 108, "autoScroll": false, "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": name600, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": user601, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel602;
    this.before_row_edit = function(record) {
    }
    Lino.system.TextFieldTemplates.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.excerpts.Excerpts.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 23,
  initComponent : function() {
    var excerpt_type1116 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Excerpt Type", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.excerpts.ExcerptTypes.detail,Lino.excerpts.ExcerptTypes.insert)}, "emptyText": "Select a Excerpt Type...", "listeners": { "render": Lino.quicktip_renderer("Excerpt Type","(excerpts.Excerpts.excerpt_type) ") }, "selectOnFocus": true, "hiddenName": "excerpt_typeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/excerpt_type", "method": "GET" }) }), "name": "excerpt_type" });
    var company1117 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Recipient (Organization)", "name": "company", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "hiddenName": "companyHidden", "listeners": { "render": Lino.quicktip_renderer("Recipient (Organization)","(excerpts.Excerpts.company) ") }, "selectOnFocus": true, "emptyText": "Select a Organization...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/company", "method": "GET" }) }) });
    var language1118 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "Language", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(excerpts.Excerpts.language) ") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var main_2_panel1119 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": company1117, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language1118, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 225, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel1122 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 117, "autoScroll": false, "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": excerpt_type1116, "anchor": "-20", "labelAlign": "top" }, main_2_panel1119 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1122;
    this.before_row_edit = function(record) {
      excerpt_type1116.setContextValue('owner', record ? record.data['owner'] : undefined);
    }
    Lino.excerpts.Excerpts.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.system.SiteConfigs.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 3,
  initComponent : function() {
    var site_company548 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Site owner</span>", "name": "site_company", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "hiddenName": "site_companyHidden", "listeners": { "render": Lino.quicktip_renderer("Site owner","(system.SiteConfigs.site_company) The organisation who runs this site.\n        This is used e.g. as sender in documents.\n        Or, newly created partners inherit the country of the site owner.\n        ") }, "selectOnFocus": true, "emptyText": "Select a Organization...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/site_company", "method": "GET" }) }) });
    var next_partner_id549 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Next partner id</span>", "name": "next_partner_id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Next partner id","(system.SiteConfigs.next_partner_id) The next automatic id for any new partner.") }, "value": 100, "anchor": "-20" });
    var main_1_panel550 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 66, "autoHeight": true, "layout": "form", "xtype": "panel", "items": site_company548, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": next_partner_id549, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 144, "border": false, "anchor": "-20", "labelAlign": "top" });
    var default_build_method553 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Default build method", "name": "default_build_method", "hiddenName": "default_build_methodHidden", "listeners": { "render": Lino.quicktip_renderer("Default build method","(system.SiteConfigs.default_build_method) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var clients_account554 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Clients account", "name": "clients_account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Clients account","(system.SiteConfigs.clients_account) ") }, "selectOnFocus": true, "hiddenName": "clients_accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/clients_account", "method": "GET" }) }) });
    var sales_account555 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Sales Base account", "name": "sales_account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Sales Base account","(system.SiteConfigs.sales_account) ") }, "selectOnFocus": true, "hiddenName": "sales_accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/sales_account", "method": "GET" }) }) });
    var sales_vat_account556 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Sales VAT account", "name": "sales_vat_account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Sales VAT account","(system.SiteConfigs.sales_vat_account) ") }, "selectOnFocus": true, "hiddenName": "sales_vat_accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/sales_vat_account", "method": "GET" }) }) });
    var main_3_panel557 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": clients_account554, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": sales_account555, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": sales_vat_account556, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 171, "border": false, "anchor": "-20", "labelAlign": "top" });
    var suppliers_account561 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Suppliers account", "name": "suppliers_account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Suppliers account","(system.SiteConfigs.suppliers_account) ") }, "selectOnFocus": true, "hiddenName": "suppliers_accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/suppliers_account", "method": "GET" }) }) });
    var purchases_account562 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Purchases Base account", "name": "purchases_account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Purchases Base account","(system.SiteConfigs.purchases_account) ") }, "selectOnFocus": true, "hiddenName": "purchases_accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/purchases_account", "method": "GET" }) }) });
    var purchases_vat_account563 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Purchases VAT account", "name": "purchases_vat_account", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "emptyText": "Select a Account...", "listeners": { "render": Lino.quicktip_renderer("Purchases VAT account","(system.SiteConfigs.purchases_vat_account) ") }, "selectOnFocus": true, "hiddenName": "purchases_vat_accountHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/purchases_vat_account", "method": "GET" }) }) });
    var main_4_panel564 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": suppliers_account561, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_account562, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_vat_account563, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 207, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel568 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 189, "autoScroll": false, "items": [ main_1_panel550, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": default_build_method553, "anchor": "-20", "labelAlign": "top" }, main_3_panel557, main_4_panel564 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel568;
    this.before_row_edit = function(record) {
    }
    Lino.system.SiteConfigs.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.excerpts.ExcerptTypes.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 22,
  initComponent : function() {
    var name1126 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(excerpts.ExcerptTypes.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et1127 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(excerpts.ExcerptTypes.name_et) ") }, "anchor": "-20" });
    var main_1_panel1128 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name1126, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et1127, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 153, "border": false, "anchor": "-20", "labelAlign": "top" });
    var content_type1131 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Model</span>", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.system.ContentTypes.detail,Lino.system.ContentTypes.insert)}, "emptyText": "Select a content type...", "listeners": { "render": Lino.quicktip_renderer("Model","(excerpts.ExcerptTypes.content_type) The model that can issue printouts of this type.") }, "selectOnFocus": true, "hiddenName": "content_typeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/content_type", "method": "GET" }) }), "name": "content_type" });
    var primary1132 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "primary", "listeners": { "render": Lino.quicktip_renderer("Primary","(excerpts.ExcerptTypes.primary) There's at most one primary type per model.         Enabling this field will automatically make the other         types non-primary.") }, "boxLabel": "Primary", "selectOnFocus": true, "anchor": "-20" });
    var certifying1133 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "certifying", "listeners": { "render": Lino.quicktip_renderer("Certifying","(excerpts.ExcerptTypes.certifying) Whether an excerpt of this type is a unique printout.") }, "boxLabel": "Certifying", "selectOnFocus": true, "anchor": "-20" });
    var main_2_panel1134 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": content_type1131, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": primary1132, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": certifying1133, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var build_method1138 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Build method", "name": "build_method", "hiddenName": "build_methodHidden", "listeners": { "render": Lino.quicktip_renderer("Build method","(excerpts.ExcerptTypes.build_method) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var template1139 = new Lino.SimpleRemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Template", "name": "template", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Template","(excerpts.ExcerptTypes.template) ") }, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/template", "method": "GET" }) }), "anchor": "-20" });
    var body_template1140 = new Lino.SimpleRemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Body template</span>", "name": "body_template", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Body template","(excerpts.ExcerptTypes.body_template) The body template to be used when         rendering a printable of this type. This is a list of files         with extension `.body.html`.") }, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/body_template", "method": "GET" }) }), "anchor": "-20" });
    var main_3_panel1141 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 51, "autoHeight": true, "layout": "form", "xtype": "panel", "items": build_method1138, "labelAlign": "top" }, { "flex": 24, "autoHeight": true, "layout": "form", "xtype": "panel", "items": template1139, "labelAlign": "top" }, { "flex": 24, "autoHeight": true, "layout": "form", "xtype": "panel", "items": body_template1140, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 126, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel1145 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel1128, main_2_panel1134, main_3_panel1141 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1145;
    this.before_row_edit = function(record) {
      template1139.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1139.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      body_template1140.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      build_method1138.on('change',Lino.chooser_handler(template1139,'build_method'));
      content_type1131.on('change',Lino.chooser_handler(template1139,'content_type'));
      content_type1131.on('change',Lino.chooser_handler(body_template1140,'content_type'));
      Lino.excerpts.ExcerptTypes.InsertFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.excerpts.ExcerptTypes.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.declarations.Declarations.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 33,
  initComponent : function() {
    var date541 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(declarations.Declarations.date) ") }, "anchor": "-20" });
    var year542 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(declarations.Declarations.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var period543 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "VAT Period", "allowBlank": false, "hiddenName": "periodHidden", "listeners": { "render": Lino.quicktip_renderer("VAT Period","(declarations.Declarations.period) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.declarations.DeclarationPeriods, "name": "period" });
    var main_panel544 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 108, "autoScroll": false, "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": date541, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": year542, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": period543, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel544;
    this.before_row_edit = function(record) {
    }
    Lino.declarations.Declarations.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Companies.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 11,
  initComponent : function() {
    var name877 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Name", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Companies.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var language878 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Companies.language) Die Sprache, in der Dokumente ausgestellt werden sollen.") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var email879 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "E-Mail", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("E-Mail","(contacts.Companies.email) ") }, "anchor": "-20" });
    var main_2_panel880 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language878, "labelAlign": "top" }, { "flex": 66, "autoHeight": true, "layout": "form", "xtype": "panel", "items": email879, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var type883 = new Lino.RemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Company type", "name": "type", "pageSize": 20, "emptyText": "Select a Organization Type...", "listeners": { "render": Lino.quicktip_renderer("Company type","(contacts.Companies.type) ") }, "selectOnFocus": true, "hiddenName": "typeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/type", "method": "GET" }) }) });
    var id884 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Companies.id) ") }, "anchor": "-20" });
    var main_3_panel885 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 80, "autoHeight": true, "layout": "form", "xtype": "panel", "items": type883, "labelAlign": "top" }, { "flex": 20, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id884, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 117, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel888 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 45, "autoScroll": false, "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": name877, "anchor": "-20", "labelAlign": "top" }, main_2_panel880, main_3_panel885 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel888;
    this.before_row_edit = function(record) {
    }
    Lino.contacts.Companies.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.excerpts.ExcerptTypes.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 22,
  initComponent : function() {
    var id1054 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(excerpts.ExcerptTypes.id) ") }, "anchor": "-20" });
    var name1055 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(excerpts.ExcerptTypes.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et1056 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(excerpts.ExcerptTypes.name_et) ") }, "anchor": "-20" });
    var main_1_panel1057 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 10, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id1054, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name1055, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et1056, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var content_type1061 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Model</span>", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.system.ContentTypes.detail,Lino.system.ContentTypes.insert)}, "emptyText": "Select a content type...", "listeners": { "render": Lino.quicktip_renderer("Model","(excerpts.ExcerptTypes.content_type) The model that can issue printouts of this type.") }, "selectOnFocus": true, "hiddenName": "content_typeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/content_type", "method": "GET" }) }), "name": "content_type" });
    var build_method1062 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Build method", "name": "build_method", "hiddenName": "build_methodHidden", "listeners": { "render": Lino.quicktip_renderer("Build method","(excerpts.ExcerptTypes.build_method) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var template1063 = new Lino.SimpleRemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Template", "name": "template", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Template","(excerpts.ExcerptTypes.template) ") }, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/template", "method": "GET" }) }), "anchor": "-20" });
    var body_template1064 = new Lino.SimpleRemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Body template</span>", "name": "body_template", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Body template","(excerpts.ExcerptTypes.body_template) The body template to be used when         rendering a printable of this type. This is a list of files         with extension `.body.html`.") }, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/body_template", "method": "GET" }) }), "anchor": "-20" });
    var main_2_panel1065 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 126, "hideCheckBoxLabels": true, "items": [ { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": content_type1061, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": build_method1062, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": template1063, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": body_template1064, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var primary1070 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "primary", "listeners": { "render": Lino.quicktip_renderer("Primary","(excerpts.ExcerptTypes.primary) There's at most one primary type per model.         Enabling this field will automatically make the other         types non-primary.") }, "boxLabel": "Primary", "selectOnFocus": true, "anchor": "-20" });
    var certifying1071 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "certifying", "listeners": { "render": Lino.quicktip_renderer("Certifying","(excerpts.ExcerptTypes.certifying) Whether an excerpt of this type is a unique printout.") }, "boxLabel": "Certifying", "selectOnFocus": true, "anchor": "-20" });
    var backward_compat1072 = new Ext.form.Checkbox({ "autoHeight": true, "hideLabel": true, "checked": false, "name": "backward_compat", "listeners": { "render": Lino.quicktip_renderer("Backward compatible","(excerpts.ExcerptTypes.backward_compat) Check this to have `this` in template context point to owner instead of excerpt.") }, "boxLabel": "Backward compatible", "selectOnFocus": true, "anchor": "-20" });
    var main_3_panel1073 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 180, "hideCheckBoxLabels": true, "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": primary1070, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": certifying1071, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": backward_compat1072, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var excerpts_ExcerptsByType_grid1124 = new Lino.excerpts.ExcerptsByType.GridPanel({ "flex": 62, "listeners": { "render": Lino.quicktip_renderer("Excerpts","(excerpts.excerpts.ExcerptsByType) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.excerpts.ExcerptsByType.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel1125 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel1057, main_2_panel1065, main_3_panel1073, excerpts_ExcerptsByType_grid1124 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1125;
    this.before_row_edit = function(record) {
      template1063.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1063.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      body_template1064.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      excerpts_ExcerptsByType_grid1124.on_master_changed();
    }
    this.onRender = function(ct, position) {
      build_method1062.on('change',Lino.chooser_handler(template1063,'build_method'));
      content_type1061.on('change',Lino.chooser_handler(template1063,'content_type'));
      content_type1061.on('change',Lino.chooser_handler(body_template1064,'content_type'));
      Lino.excerpts.ExcerptTypes.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.excerpts.ExcerptTypes.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.finan.PaymentOrders.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 39,
  initComponent : function() {
    var date340 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(finan.PaymentOrders.date) ") }, "anchor": "-20" });
    var user341 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.PaymentOrders.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrders/user", "method": "GET" }) }) });
    var narration342 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Narration", "name": "narration", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Narration","(finan.PaymentOrders.narration) ") }, "anchor": "-20" });
    var total343 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total", "name": "total", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total","(finan.PaymentOrders.total) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var execution_date344 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "Execution date", "name": "execution_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Execution date","(finan.PaymentOrders.execution_date) ") }, "anchor": "-20" });
    var workflow_buttons_disp345 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Workflow", "name": "workflow_buttons", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Workflow","(finan.PaymentOrders.workflow_buttons) ") }, "anchor": "-20" });
    var general_1_panel346 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 135, "hideCheckBoxLabels": true, "items": [ { "flex": 11, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date340, "labelAlign": "top" }, { "flex": 18, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user341, "labelAlign": "top" }, { "flex": 19, "autoHeight": true, "layout": "form", "xtype": "panel", "items": narration342, "labelAlign": "top" }, { "flex": 11, "autoHeight": true, "layout": "form", "xtype": "panel", "items": total343, "labelAlign": "top" }, { "flex": 11, "autoHeight": true, "layout": "form", "xtype": "panel", "items": execution_date344, "labelAlign": "top" }, { "flex": 27, "autoHeight": true, "layout": "form", "xtype": "panel", "items": workflow_buttons_disp345, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var finan_ItemsByPaymentOrder_grid359 = new Lino.finan.ItemsByPaymentOrder.GridPanel({ "flex": 62, "listeners": { "render": Lino.quicktip_renderer("Items","(finan.finan.ItemsByPaymentOrder) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.finan.ItemsByPaymentOrder.grid) ], "preview_limit": 15, "master_panel": this });
    var general_panel360 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel346, finan_ItemsByPaymentOrder_grid359 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var id361 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(finan.PaymentOrders.id) ") }, "anchor": "-20" });
    var journal362 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.PaymentOrders.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrders/journal", "method": "GET" }) }), "name": "journal" });
    var year363 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(finan.PaymentOrders.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number364 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "number", "name": "number", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("number","(finan.PaymentOrders.number) ") }, "anchor": "-20" });
    var ledger_1_panel365 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id361, "labelAlign": "top" }, { "flex": 54, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal362, "labelAlign": "top" }, { "flex": 18, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year363, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": number364, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var ledger_MovementsByVoucher_grid370 = new Lino.ledger.MovementsByVoucher.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByVoucher) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByVoucher.grid) ], "preview_limit": 15, "master_panel": this });
    var ledger_panel371 = new Ext.Panel({ "layout": "vbox", "title": "Ledger", "items": [ ledger_1_panel365, ledger_MovementsByVoucher_grid370 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var main_panel372 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel360, ledger_panel371 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel372;
    this.before_row_edit = function(record) {
      finan_ItemsByPaymentOrder_grid359.on_master_changed();
      ledger_MovementsByVoucher_grid370.on_master_changed();
    }
    Lino.finan.PaymentOrders.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.finan.BankStatements.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 36,
  initComponent : function() {
    var date430 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(finan.BankStatements.date) ") }, "anchor": "-20" });
    var user431 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.BankStatements.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatements/user", "method": "GET" }) }) });
    var main_1_panel432 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date430, "labelAlign": "top" }, { "flex": 60, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user431, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 63, "border": false, "anchor": "-20", "labelAlign": "top" });
    var balance1435 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Old balance", "name": "balance1", "decimalSeparator": ",", "value": 0, "listeners": { "render": Lino.quicktip_renderer("Old balance","(finan.BankStatements.balance1) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var balance2436 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "New balance", "name": "balance2", "decimalSeparator": ",", "value": 0, "listeners": { "render": Lino.quicktip_renderer("New balance","(finan.BankStatements.balance2) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var main_panel437 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 108, "autoScroll": false, "items": [ main_1_panel432, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": balance1435, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": balance2436, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel437;
    this.before_row_edit = function(record) {
    }
    Lino.finan.BankStatements.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.system.Home.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var quick_links_htmlbox1239 = new Lino.HtmlBoxPanel({ "flex": 1, "layout": "fit", "name": "quick_links", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "region": "north", "bodyStyle": "overflow-x:hidden;", "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer(null,"(system.Home.quick_links) ") }, "split": true });
    var welcome_htmlbox1240 = new Lino.HtmlBoxPanel({ "flex": 3, "layout": "fit", "name": "welcome", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "region": "center", "title": "Welcome", "bodyStyle": "overflow-x:hidden;", "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer("Welcome","(system.Home.welcome) ") }, "split": true });
    var main_panel1241 = new Lino.VBorderPanel({ "autoScroll": false, "border": false, "labelWidth": 72, "hideCheckBoxLabels": true, "items": [ quick_links_htmlbox1239, welcome_htmlbox1240 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1241;
    this.before_row_edit = function(record) {
      quick_links_htmlbox1239.refresh();
      welcome_htmlbox1240.refresh();
    }
    Lino.system.Home.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.finan.BankStatements.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 36,
  initComponent : function() {
    var date392 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(finan.BankStatements.date) ") }, "anchor": "-20" });
    var balance1393 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Old balance", "name": "balance1", "decimalSeparator": ",", "value": 0, "listeners": { "render": Lino.quicktip_renderer("Old balance","(finan.BankStatements.balance1) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var balance2394 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "New balance", "name": "balance2", "decimalSeparator": ",", "value": 0, "listeners": { "render": Lino.quicktip_renderer("New balance","(finan.BankStatements.balance2) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var user395 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.BankStatements.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatements/user", "method": "GET" }) }) });
    var workflow_buttons_disp396 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Workflow", "name": "workflow_buttons", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Workflow","(finan.BankStatements.workflow_buttons) ") }, "anchor": "-20" });
    var general_1_panel397 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date392, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": balance1393, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": balance2394, "labelAlign": "top" }, { "flex": 22, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user395, "labelAlign": "top" }, { "flex": 34, "autoHeight": true, "layout": "form", "xtype": "panel", "items": workflow_buttons_disp396, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var finan_ItemsByBankStatement_grid416 = new Lino.finan.ItemsByBankStatement.GridPanel({ "flex": 62, "listeners": { "render": Lino.quicktip_renderer("Items","(finan.finan.ItemsByBankStatement) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.finan.ItemsByBankStatement.grid) ], "preview_limit": 15, "master_panel": this });
    var general_panel417 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel397, finan_ItemsByBankStatement_grid416 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var id418 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(finan.BankStatements.id) ") }, "anchor": "-20" });
    var journal419 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.BankStatements.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatements/journal", "method": "GET" }) }), "name": "journal" });
    var year420 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(finan.BankStatements.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number421 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "number", "name": "number", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("number","(finan.BankStatements.number) ") }, "anchor": "-20" });
    var ledger_1_panel422 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id418, "labelAlign": "top" }, { "flex": 54, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal419, "labelAlign": "top" }, { "flex": 18, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year420, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": number421, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var ledger_MovementsByVoucher_grid427 = new Lino.ledger.MovementsByVoucher.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByVoucher) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByVoucher.grid) ], "preview_limit": 15, "master_panel": this });
    var ledger_panel428 = new Ext.Panel({ "layout": "vbox", "title": "Ledger", "items": [ ledger_1_panel422, ledger_MovementsByVoucher_grid427 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var main_panel429 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel417, ledger_panel428 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel429;
    this.before_row_edit = function(record) {
      finan_ItemsByBankStatement_grid416.on_master_changed();
      ledger_MovementsByVoucher_grid427.on_master_changed();
    }
    Lino.finan.BankStatements.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Journals.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 24,
  initComponent : function() {
    var ref1179 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "ref", "name": "ref", "maxLength": 20, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ref","(ledger.Journals.ref) ") }, "anchor": "-20" });
    var name1180 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(ledger.Journals.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et1181 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(ledger.Journals.name_et) ") }, "anchor": "-20" });
    var main_1_panel1182 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ref1179, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name1180, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et1181, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 153, "border": false, "anchor": "-20", "labelAlign": "top" });
    var trade_type1186 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Trade Type", "name": "trade_type", "hiddenName": "trade_typeHidden", "listeners": { "render": Lino.quicktip_renderer("Trade Type","(ledger.Journals.trade_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.vat.TradeTypes) });
    var voucher_type1187 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "voucher type", "allowBlank": false, "hiddenName": "voucher_typeHidden", "listeners": { "render": Lino.quicktip_renderer("voucher type","(ledger.Journals.voucher_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.ledger.VoucherTypes, "name": "voucher_type" });
    var main_panel1188 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 117, "autoScroll": false, "items": [ main_1_panel1182, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": trade_type1186, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": voucher_type1187, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1188;
    this.before_row_edit = function(record) {
    }
    Lino.ledger.Journals.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.finan.JournalEntries.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 38,
  initComponent : function() {
    var date449 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(finan.JournalEntries.date) ") }, "anchor": "-20" });
    var user450 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.JournalEntries.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/user", "method": "GET" }) }) });
    var narration451 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Narration", "name": "narration", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Narration","(finan.JournalEntries.narration) ") }, "anchor": "-20" });
    var workflow_buttons_disp452 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Workflow", "name": "workflow_buttons", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Workflow","(finan.JournalEntries.workflow_buttons) ") }, "anchor": "-20" });
    var general_1_panel453 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 90, "hideCheckBoxLabels": true, "items": [ { "flex": 15, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date449, "labelAlign": "top" }, { "flex": 23, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user450, "labelAlign": "top" }, { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": narration451, "labelAlign": "top" }, { "flex": 35, "autoHeight": true, "layout": "form", "xtype": "panel", "items": workflow_buttons_disp452, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var finan_ItemsByJournalEntry_grid471 = new Lino.finan.ItemsByJournalEntry.GridPanel({ "flex": 62, "listeners": { "render": Lino.quicktip_renderer("Items","(finan.finan.ItemsByJournalEntry) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.finan.ItemsByJournalEntry.grid) ], "preview_limit": 15, "master_panel": this });
    var general_panel472 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel453, finan_ItemsByJournalEntry_grid471 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var id473 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(finan.JournalEntries.id) ") }, "anchor": "-20" });
    var journal474 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.JournalEntries.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/journal", "method": "GET" }) }), "name": "journal" });
    var year475 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(finan.JournalEntries.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number476 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "number", "name": "number", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("number","(finan.JournalEntries.number) ") }, "anchor": "-20" });
    var ledger_1_panel477 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id473, "labelAlign": "top" }, { "flex": 54, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal474, "labelAlign": "top" }, { "flex": 18, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year475, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": number476, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var ledger_MovementsByVoucher_grid482 = new Lino.ledger.MovementsByVoucher.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByVoucher) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByVoucher.grid) ], "preview_limit": 15, "master_panel": this });
    var ledger_panel483 = new Ext.Panel({ "layout": "vbox", "title": "Ledger", "items": [ ledger_1_panel477, ledger_MovementsByVoucher_grid482 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var main_panel484 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel472, ledger_panel483 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel484;
    this.before_row_edit = function(record) {
      finan_ItemsByJournalEntry_grid471.on_master_changed();
      ledger_MovementsByVoucher_grid482.on_master_changed();
    }
    Lino.finan.JournalEntries.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.Invoices.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 26,
  initComponent : function() {
    var journal1191 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.Invoices.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/journal", "method": "GET" }) }), "name": "journal" });
    var partner1192 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "emptyText": "Select a Partner...", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.Invoices.partner) ") }, "selectOnFocus": true, "hiddenName": "partnerHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/partner", "method": "GET" }) }), "name": "partner" });
    var main_1_panel1193 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal1191, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner1192, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 72, "border": false, "anchor": "-20", "labelAlign": "top" });
    var date1196 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(ledger.Invoices.date) ") }, "anchor": "-20" });
    var total_incl1197 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total incl. VAT", "name": "total_incl", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(ledger.Invoices.total_incl) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var main_2_panel1198 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 52, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date1196, "labelAlign": "top" }, { "flex": 48, "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_incl1197, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 144, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel1201 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel1193, main_2_panel1198 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1201;
    this.before_row_edit = function(record) {
    }
    Lino.ledger.Invoices.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.system.ContentTypes.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 2,
  initComponent : function() {
    var id570 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(system.ContentTypes.id) ") }, "anchor": "-20" });
    var name571 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "name", "name": "name", "listeners": { "render": Lino.quicktip_renderer("name","(system.ContentTypes.name) ") }, "maxLength": 100, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var app_label572 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "app label", "name": "app_label", "listeners": { "render": Lino.quicktip_renderer("app label","(system.ContentTypes.app_label) ") }, "maxLength": 100, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var model573 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "python model class name", "name": "model", "listeners": { "render": Lino.quicktip_renderer("python model class name","(system.ContentTypes.model) ") }, "maxLength": 100, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var base_classes_disp574 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Base classes", "name": "base_classes", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Base classes","(system.ContentTypes.base_classes) ") }, "anchor": "-20" });
    var main_1_panel575 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 216, "hideCheckBoxLabels": true, "items": [ { "flex": 5, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id570, "labelAlign": "top" }, { "flex": 21, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name571, "labelAlign": "top" }, { "flex": 21, "autoHeight": true, "layout": "form", "xtype": "panel", "items": app_label572, "labelAlign": "top" }, { "flex": 21, "autoHeight": true, "layout": "form", "xtype": "panel", "items": model573, "labelAlign": "top" }, { "flex": 30, "autoHeight": true, "layout": "form", "xtype": "panel", "items": base_classes_disp574, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var system_HelpTextsByModel_grid587 = new Lino.system.HelpTextsByModel.GridPanel({ "flex": 62, "listeners": { "render": Lino.quicktip_renderer("Help Texts","(system.system.HelpTextsByModel) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.system.HelpTextsByModel.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel588 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel575, system_HelpTextsByModel_grid587 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel588;
    this.before_row_edit = function(record) {
      system_HelpTextsByModel_grid587.on_master_changed();
    }
    Lino.system.ContentTypes.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.system.TextFieldTemplates.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 5,
  initComponent : function() {
    var id589 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(system.TextFieldTemplates.id) ") }, "anchor": "-20" });
    var name590 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(system.TextFieldTemplates.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var user591 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(system.TextFieldTemplates.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/TextFieldTemplates/user", "method": "GET" }) }) });
    var main_1_panel592 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 10, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id589, "labelAlign": "top" }, { "flex": 45, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name590, "labelAlign": "top" }, { "flex": 43, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user591, "labelAlign": "top" } ], "region": "north", "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "split": true, "autoScroll": false, "labelWidth": 108, "border": false, "frame": false, "labelAlign": "top" });
    var description596 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Description","(system.TextFieldTemplates.description) ") }, "fieldLabel": "Description", "name": "description", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var text597 = new Lino.RichTextPanel({ "flex": 5, "split": true, "containing_panel": this, "selectOnFocus": true, "region": "south", "title": "Template Text", "name": "text" });
    var main_panel598 = new Lino.VBorderPanel({ "autoScroll": false, "border": false, "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ main_1_panel592, { "flex": 5, "layout": "form", "xtype": "panel", "items": description596, "region": "center", "labelAlign": "top", "split": true }, text597 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel598;
    this.before_row_edit = function(record) {
      text597.refresh();
    }
    Lino.system.TextFieldTemplates.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.countries.Places.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 9,
  initComponent : function() {
    var name673 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(countries.Places.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et674 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(countries.Places.name_et) ") }, "anchor": "-20" });
    var country675 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Country", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "emptyText": "Select a Country...", "listeners": { "render": Lino.quicktip_renderer("Country","(countries.Places.country) ") }, "selectOnFocus": true, "hiddenName": "countryHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/Places/country", "method": "GET" }) }), "name": "country" });
    var main_1_panel676 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name673, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et674, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": country675, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var type680 = new Lino.RemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Place Type", "name": "type", "hiddenName": "typeHidden", "listeners": { "render": Lino.quicktip_renderer("Place Type","(countries.Places.type) ") }, "selectOnFocus": true, "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/Places/type", "method": "GET" }) }) });
    var parent681 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Part of</span>", "name": "parent", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("Part of","(countries.Places.parent) The superordinate geographic place         of which this place is a part.") }, "selectOnFocus": true, "hiddenName": "parentHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/Places/parent", "method": "GET" }) }) });
    var zip_code682 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "zip code", "name": "zip_code", "boxMinWidth": Lino.chars2width(8), "listeners": { "render": Lino.quicktip_renderer("zip code","(countries.Places.zip_code) ") }, "maxLength": 8, "selectOnFocus": true, "anchor": "-20" });
    var id683 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(countries.Places.id) ") }, "anchor": "-20" });
    var main_2_panel684 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 99, "hideCheckBoxLabels": true, "items": [ { "flex": 22, "autoHeight": true, "layout": "form", "xtype": "panel", "items": type680, "labelAlign": "top" }, { "flex": 45, "autoHeight": true, "layout": "form", "xtype": "panel", "items": parent681, "labelAlign": "top" }, { "flex": 20, "autoHeight": true, "layout": "form", "xtype": "panel", "items": zip_code682, "labelAlign": "top" }, { "flex": 11, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id683, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var PlacesByPlace_grid737 = new Lino.countries.PlacesByPlace.GridPanel({ "flex": 41, "listeners": { "render": Lino.quicktip_renderer("Subdivisions","(countries.countries.PlacesByPlace) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.countries.PlacesByPlace.grid) ], "preview_limit": 15, "master_panel": this });
    var contacts_PartnersByCity_grid738 = new Lino.contacts.PartnersByCity.GridPanel({ "flex": 41, "listeners": { "render": Lino.quicktip_renderer("Partners","(contacts.contacts.PartnersByCity) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.contacts.PartnersByCity.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel739 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel676, main_2_panel684, PlacesByPlace_grid737, contacts_PartnersByCity_grid738 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel739;
    this.before_row_edit = function(record) {
      type680.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      PlacesByPlace_grid737.on_master_changed();
      contacts_PartnersByCity_grid738.on_master_changed();
    }
    this.onRender = function(ct, position) {
      country675.on('change',Lino.chooser_handler(type680,'country'));
      Lino.countries.Places.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.countries.Places.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.ledger.InvoicesByJournal.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 26,
  initComponent : function() {
    var partner316 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "emptyText": "Select a Partner...", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.InvoicesByJournal.partner) ") }, "selectOnFocus": true, "hiddenName": "partnerHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoicesByJournal/partner", "method": "GET" }) }), "name": "partner" });
    var date317 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(ledger.InvoicesByJournal.date) ") }, "anchor": "-20" });
    var total_incl318 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total incl. VAT", "name": "total_incl", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(ledger.InvoicesByJournal.total_incl) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var main_2_panel319 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 52, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date317, "labelAlign": "top" }, { "flex": 48, "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_incl318, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 144, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel322 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 72, "autoScroll": false, "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner316, "anchor": "-20", "labelAlign": "top" }, main_2_panel319 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel322;
    this.before_row_edit = function(record) {
    }
    Lino.ledger.InvoicesByJournal.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Persons.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 12,
  initComponent : function() {
    var last_name742 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Last name</span>", "name": "last_name", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Last name","(contacts.Persons.last_name) Last name (family name).") }, "anchor": "-20" });
    var first_name743 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">First name</span>", "name": "first_name", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("First name","(contacts.Persons.first_name) First or given name.") }, "anchor": "-20" });
    var gender744 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Gender", "name": "gender", "hiddenName": "genderHidden", "listeners": { "render": Lino.quicktip_renderer("Gender","(contacts.Persons.gender) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.Genders) });
    var title745 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Title</span>", "name": "title", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Title","(contacts.Persons.title) Text to print before allocation and name as part of the first address line.") }, "anchor": "-20" });
    var name_box_panel746 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 38, "autoHeight": true, "layout": "form", "xtype": "panel", "items": last_name742, "labelAlign": "top" }, { "flex": 27, "autoHeight": true, "layout": "form", "xtype": "panel", "items": first_name743, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": gender744, "labelAlign": "top" }, { "flex": 18, "autoHeight": true, "layout": "form", "xtype": "panel", "items": title745, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var country751 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Country", "name": "country", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "emptyText": "Select a Country...", "listeners": { "render": Lino.quicktip_renderer("Country","(contacts.Persons.country) ") }, "selectOnFocus": true, "hiddenName": "countryHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/country", "method": "GET" }) }) });
    var region752 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Region", "name": "region", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("Region","(contacts.Persons.region) ") }, "selectOnFocus": true, "hiddenName": "regionHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/region", "method": "GET" }) }) });
    var city753 = new Lino.TwinCombo({ "autoHeight": true, "forceSelection": false, "fieldLabel": "City", "name": "city", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("City","(contacts.Persons.city) ") }, "selectOnFocus": true, "hiddenName": "cityHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/city", "method": "GET" }) }) });
    var zip_code754 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Zip code", "name": "zip_code", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Zip code","(contacts.Persons.zip_code) ") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var address_box_2_panel755 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": country751, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": region752, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": city753, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": zip_code754, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var addr1760 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Address line before street</span>", "name": "addr1", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Address line before street","(contacts.Persons.addr1) Address line before street") }, "anchor": "-20" });
    var street_prefix761 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Street prefix</span>", "name": "street_prefix", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Street prefix","(contacts.Persons.street_prefix) Text to print before name of street, but to ignore for sorting.") }, "anchor": "-20" });
    var street762 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Street</span>", "name": "street", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Street","(contacts.Persons.street) Name of street, without house number.") }, "anchor": "-20" });
    var street_no763 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "name": "street_no", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("No.","(contacts.Persons.street_no) House number.") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var street_box764 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Box</span>", "name": "street_box", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Box","(contacts.Persons.street_box) Text to print after street nuber on the same line.") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var address_box_4_panel765 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 30, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_prefix761, "labelAlign": "top" }, { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street762, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_no763, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_box764, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 126, "border": false, "anchor": "-20", "labelAlign": "top" });
    var addr2770 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Address line after street</span>", "name": "addr2", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Address line after street","(contacts.Persons.addr2) Address line to print below street line.") }, "anchor": "-20" });
    var address_box_panel771 = new Ext.form.FieldSet({ "flex": 66, "autoHeight": true, "layout": "form", "title": "Address", "items": [ name_box_panel746, address_box_2_panel755, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": addr1760, "anchor": "-20", "labelAlign": "top" }, address_box_4_panel765, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": addr2770, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 243, "border": false, "labelAlign": "top" });
    var id774 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Persons.id) ") }, "anchor": "-20" });
    var language775 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Persons.language) Die Sprache, in der Dokumente ausgestellt werden sollen.") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var info_box_panel776 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id774, "labelAlign": "top" }, { "flex": 66, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language775, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var email779 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "E-Mail", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("E-Mail","(contacts.Persons.email) ") }, "anchor": "-20" });
    var url780 = new Lino.URLField({ "autoHeight": true, "fieldLabel": "URL", "name": "url", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("URL","(contacts.Persons.url) ") }, "anchor": "-20" });
    var phone781 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Phone", "name": "phone", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Phone","(contacts.Persons.phone) ") }, "anchor": "-20" });
    var gsm782 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "GSM", "name": "gsm", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("GSM","(contacts.Persons.gsm) ") }, "anchor": "-20" });
    var fax783 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Fax", "name": "fax", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Fax","(contacts.Persons.fax) ") }, "anchor": "-20" });
    var contact_box_5_panel784 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": gsm782, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": fax783, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 36, "border": false, "anchor": "-20", "labelAlign": "top" });
    var contact_box_panel787 = new Ext.form.FieldSet({ "flex": 33, "autoHeight": true, "layout": "form", "title": "Contact", "items": [ info_box_panel776, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": email779, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": url780, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": phone781, "anchor": "-20", "labelAlign": "top" }, contact_box_5_panel784 ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 63, "border": false, "labelAlign": "top" });
    var general_1_panel791 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "hideCheckBoxLabels": true, "items": [ address_box_panel771, contact_box_panel787 ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var remarks792 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Remarks","(contacts.Persons.remarks) ") }, "fieldLabel": "Remarks", "name": "remarks", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var contacts_RolesByPerson_grid797 = new Lino.contacts.RolesByPerson.GridPanel({ "flex": 42, "listeners": { "render": Lino.quicktip_renderer("Contact for","(contacts.contacts.RolesByPerson) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.contacts.RolesByPerson.grid) ], "preview_limit": 15, "master_panel": this });
    var bottom_box_panel798 = new Ext.Panel({ "flex": 50, "border": false, "layout": "hbox", "labelWidth": 72, "hideCheckBoxLabels": true, "items": [ { "items": remarks792, "labelAlign": "top", "layout": "form", "xtype": "panel", "flex": 57 }, contacts_RolesByPerson_grid797 ], "autoScroll": false, "layoutConfig": { "align": "stretch" }, "frame": false, "labelAlign": "top" });
    var general_panel800 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel791, bottom_box_panel798 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var VouchersByPartner_htmlbox801 = new Lino.HtmlBoxPanel({ "flex": 3, "layout": "fit", "name": "VouchersByPartner", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "region": "north", "title": "VAT vouchers", "master_panel": this, "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer("VAT vouchers","(contacts.Persons.VouchersByPartner) ") }, "bodyStyle": "overflow-x:hidden;", "split": true, "tools": [ Lino.show_in_own_window_button(Lino.ledger.VouchersByPartner.grid) ] });
    var ledger_MovementsByPartner_grid802 = new Lino.ledger.MovementsByPartner.GridPanel({ "flex": 5, "hide_top_toolbar": true, "containing_panel": this, "region": "center", "preview_limit": 15, "master_panel": this, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByPartner) ") }, "split": true, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByPartner.grid) ] });
    var ledger_panel803 = new Lino.VBorderPanel({ "autoScroll": false, "listeners": { "activate": Lino.on_tab_activate }, "border": false, "labelWidth": 117, "title": "Accounting", "hideCheckBoxLabels": true, "items": [ VouchersByPartner_htmlbox801, ledger_MovementsByPartner_grid802 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    var main_panel804 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel800, ledger_panel803 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel804;
    this.before_row_edit = function(record) {
      region752.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city753.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city753.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      contacts_RolesByPerson_grid797.on_master_changed();
      VouchersByPartner_htmlbox801.refresh();
      ledger_MovementsByPartner_grid802.on_master_changed();
    }
    this.onRender = function(ct, position) {
      country751.on('change',Lino.chooser_handler(region752,'country'));
      country751.on('change',Lino.chooser_handler(city753,'country'));
      region752.on('change',Lino.chooser_handler(city753,'region'));
      Lino.contacts.Persons.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.contacts.Persons.DetailFormPanel.superclass.initComponent.call(this);
    // active_fields:
    city753.on("change", function(){ this.save() }, this);
    zip_code754.on("change", function(){ this.save() }, this);
  }
});


Lino.contacts.Partners.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 14,
  initComponent : function() {
    var name41 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Name", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Partners.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var country42 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Country", "name": "country", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "emptyText": "Select a Country...", "listeners": { "render": Lino.quicktip_renderer("Country","(contacts.Partners.country) ") }, "selectOnFocus": true, "hiddenName": "countryHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/country", "method": "GET" }) }) });
    var region43 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Region", "name": "region", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("Region","(contacts.Partners.region) ") }, "selectOnFocus": true, "hiddenName": "regionHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/region", "method": "GET" }) }) });
    var city44 = new Lino.TwinCombo({ "autoHeight": true, "forceSelection": false, "fieldLabel": "City", "name": "city", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,Lino.countries.Places.insert)}, "emptyText": "Select a Place...", "listeners": { "render": Lino.quicktip_renderer("City","(contacts.Partners.city) ") }, "selectOnFocus": true, "hiddenName": "cityHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/city", "method": "GET" }) }) });
    var zip_code45 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Zip code", "name": "zip_code", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Zip code","(contacts.Partners.zip_code) ") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var address_box_2_panel46 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": country42, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": region43, "labelAlign": "top" }, { "flex": 28, "autoHeight": true, "layout": "form", "xtype": "panel", "items": city44, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": zip_code45, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var addr151 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Address line before street</span>", "name": "addr1", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Address line before street","(contacts.Partners.addr1) Address line before street") }, "anchor": "-20" });
    var street_prefix52 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Street prefix</span>", "name": "street_prefix", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Street prefix","(contacts.Partners.street_prefix) Text to print before name of street, but to ignore for sorting.") }, "anchor": "-20" });
    var street53 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Street</span>", "name": "street", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Street","(contacts.Partners.street) Name of street, without house number.") }, "anchor": "-20" });
    var street_no54 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "name": "street_no", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("No.","(contacts.Partners.street_no) House number.") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var street_box55 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Box</span>", "name": "street_box", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Box","(contacts.Partners.street_box) Text to print after street nuber on the same line.") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var address_box_4_panel56 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 30, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_prefix52, "labelAlign": "top" }, { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street53, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_no54, "labelAlign": "top" }, { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": street_box55, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 126, "border": false, "anchor": "-20", "labelAlign": "top" });
    var addr261 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Address line after street</span>", "name": "addr2", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Address line after street","(contacts.Partners.addr2) Address line to print below street line.") }, "anchor": "-20" });
    var address_box_panel62 = new Ext.form.FieldSet({ "flex": 66, "autoHeight": true, "layout": "form", "title": "Address", "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": name41, "anchor": "-20", "labelAlign": "top" }, address_box_2_panel46, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": addr151, "anchor": "-20", "labelAlign": "top" }, address_box_4_panel56, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": addr261, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 243, "border": false, "labelAlign": "top" });
    var id66 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Partners.id) ") }, "anchor": "-20" });
    var language67 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Partners.language) Die Sprache, in der Dokumente ausgestellt werden sollen.") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var info_box_panel68 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 20, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id66, "labelAlign": "top" }, { "flex": 80, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language67, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var email71 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "E-Mail", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("E-Mail","(contacts.Partners.email) ") }, "anchor": "-20" });
    var url72 = new Lino.URLField({ "autoHeight": true, "fieldLabel": "URL", "name": "url", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("URL","(contacts.Partners.url) ") }, "anchor": "-20" });
    var phone73 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Phone", "name": "phone", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Phone","(contacts.Partners.phone) ") }, "anchor": "-20" });
    var gsm74 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "GSM", "name": "gsm", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("GSM","(contacts.Partners.gsm) ") }, "anchor": "-20" });
    var fax75 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Fax", "name": "fax", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Fax","(contacts.Partners.fax) ") }, "anchor": "-20" });
    var contact_box_5_panel76 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": gsm74, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": fax75, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 36, "border": false, "anchor": "-20", "labelAlign": "top" });
    var contact_box_panel79 = new Ext.form.FieldSet({ "flex": 33, "autoHeight": true, "layout": "form", "title": "Contact", "items": [ info_box_panel68, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": email71, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": url72, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": phone73, "anchor": "-20", "labelAlign": "top" }, contact_box_5_panel76 ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 63, "border": false, "labelAlign": "top" });
    var general_1_panel83 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "hideCheckBoxLabels": true, "items": [ address_box_panel62, contact_box_panel79 ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var remarks84 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Remarks","(contacts.Partners.remarks) ") }, "fieldLabel": "Remarks", "name": "remarks", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var is_person85 = new Ext.form.Checkbox({ "boxLabel": "is Person (<a href=\"javascript:Lino.show_mti_child('is_person',Lino.contacts.Persons.detail)\">show</a>)", "autoHeight": true, "hideLabel": true, "name": "is_person", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("is Person","(contacts.Partners.is_person) Whether this Partner is a Person.") }, "anchor": "-20" });
    var is_company86 = new Ext.form.Checkbox({ "boxLabel": "is Company (<a href=\"javascript:Lino.show_mti_child('is_company',Lino.contacts.Companies.detail)\">show</a>)", "autoHeight": true, "hideLabel": true, "name": "is_company", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("is Company","(contacts.Partners.is_company) Whether this Partner is a Company.") }, "anchor": "-20" });
    var bottom_box_2_panel87 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 99, "hideCheckBoxLabels": true, "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": is_person85, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": is_company86, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var bottom_box_panel90 = new Ext.Panel({ "flex": 54, "layout": "vbox", "items": [ { "items": remarks84, "labelAlign": "top", "layout": "form", "xtype": "panel", "flex": 83 }, bottom_box_2_panel87 ], "frame": true, "layoutConfig": { "align": "stretch" }, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 72, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var general_panel92 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel83, bottom_box_panel90 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var VouchersByPartner_htmlbox93 = new Lino.HtmlBoxPanel({ "flex": 3, "layout": "fit", "name": "VouchersByPartner", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "region": "north", "title": "VAT vouchers", "master_panel": this, "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer("VAT vouchers","(contacts.Partners.VouchersByPartner) ") }, "bodyStyle": "overflow-x:hidden;", "split": true, "tools": [ Lino.show_in_own_window_button(Lino.ledger.VouchersByPartner.grid) ] });
    var ledger_MovementsByPartner_grid119 = new Lino.ledger.MovementsByPartner.GridPanel({ "flex": 5, "hide_top_toolbar": true, "containing_panel": this, "region": "center", "preview_limit": 15, "master_panel": this, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByPartner) ") }, "split": true, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByPartner.grid) ] });
    var ledger_panel120 = new Lino.VBorderPanel({ "autoScroll": false, "listeners": { "activate": Lino.on_tab_activate }, "border": false, "labelWidth": 117, "title": "Accounting", "hideCheckBoxLabels": true, "items": [ VouchersByPartner_htmlbox93, ledger_MovementsByPartner_grid119 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    var main_panel121 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel92, ledger_panel120 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel121;
    this.before_row_edit = function(record) {
      region43.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city44.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city44.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      VouchersByPartner_htmlbox93.refresh();
      ledger_MovementsByPartner_grid119.on_master_changed();
    }
    this.onRender = function(ct, position) {
      country42.on('change',Lino.chooser_handler(region43,'country'));
      country42.on('change',Lino.chooser_handler(city44,'country'));
      region43.on('change',Lino.chooser_handler(city44,'region'));
      Lino.contacts.Partners.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.contacts.Partners.DetailFormPanel.superclass.initComponent.call(this);
    // active_fields:
    city44.on("change", function(){ this.save() }, this);
    zip_code45.on("change", function(){ this.save() }, this);
  }
});


Lino.about.Models.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var app_disp1202 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "app_label", "name": "app", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("app_label","(about.Models.app) ") }, "anchor": "-20" });
    var name_disp1203 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "name", "name": "name", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("name","(about.Models.name) ") }, "anchor": "-20" });
    var docstring_disp1204 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "docstring", "name": "docstring", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("docstring","(about.Models.docstring) ") }, "anchor": "-20" });
    var rows1205 = new Ext.form.NumberField({ "disabled": true, "autoHeight": true, "fieldLabel": "Rows", "name": "rows", "listeners": { "render": Lino.quicktip_renderer("Rows","(about.Models.rows) ") }, "anchor": "-20" });
    var main_1_panel1206 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 90, "hideCheckBoxLabels": true, "items": [ { "flex": 31, "autoHeight": true, "layout": "form", "xtype": "panel", "items": app_disp1202, "labelAlign": "top" }, { "flex": 31, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_disp1203, "labelAlign": "top" }, { "flex": 31, "autoHeight": true, "layout": "form", "xtype": "panel", "items": docstring_disp1204, "labelAlign": "top" }, { "flex": 5, "autoHeight": true, "layout": "form", "xtype": "panel", "items": rows1205, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var about_FieldsByModel_grid1215 = new Lino.about.FieldsByModel.GridPanel({ "flex": 62, "listeners": { "render": Lino.quicktip_renderer("Fields","(about.about.FieldsByModel) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.about.FieldsByModel.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel1216 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel1206, about_FieldsByModel_grid1215 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1216;
    this.before_row_edit = function(record) {
      about_FieldsByModel_grid1215.on_master_changed();
    }
    Lino.about.Models.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Partners.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 14,
  initComponent : function() {
    var name122 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Name", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Partners.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var language123 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Partners.language) Die Sprache, in der Dokumente ausgestellt werden sollen.") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var email124 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "E-Mail", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("E-Mail","(contacts.Partners.email) ") }, "anchor": "-20" });
    var main_2_panel125 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 48, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language123, "labelAlign": "top" }, { "flex": 51, "autoHeight": true, "layout": "form", "xtype": "panel", "items": email124, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel128 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 45, "autoScroll": false, "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": name122, "anchor": "-20", "labelAlign": "top" }, main_2_panel125 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel128;
    this.before_row_edit = function(record) {
    }
    Lino.contacts.Partners.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.declarations.Declarations.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 33,
  initComponent : function() {
    var date502 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(declarations.Declarations.date) ") }, "anchor": "-20" });
    var year503 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(declarations.Declarations.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var period504 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "VAT Period", "allowBlank": false, "hiddenName": "periodHidden", "listeners": { "render": Lino.quicktip_renderer("VAT Period","(declarations.Declarations.period) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.declarations.DeclarationPeriods, "name": "period" });
    var user505 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(declarations.Declarations.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/Declarations/user", "method": "GET" }) }) });
    var workflow_buttons_disp506 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Workflow", "name": "workflow_buttons", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Workflow","(declarations.Declarations.workflow_buttons) ") }, "anchor": "-20" });
    var main_1_panel507 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 15, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date502, "labelAlign": "top" }, { "flex": 8, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year503, "labelAlign": "top" }, { "flex": 14, "autoHeight": true, "layout": "form", "xtype": "panel", "items": period504, "labelAlign": "top" }, { "flex": 24, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user505, "labelAlign": "top" }, { "flex": 36, "autoHeight": true, "layout": "form", "xtype": "panel", "items": workflow_buttons_disp506, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var sales_base513 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Sales base", "name": "sales_base", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Sales base","(declarations.Declarations.sales_base) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var sales_vat514 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Sales VAT", "name": "sales_vat", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Sales VAT","(declarations.Declarations.sales_vat) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var fields_1_panel515 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": sales_base513, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": sales_vat514, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var purchases_base518 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Purchases base", "name": "purchases_base", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Purchases base","(declarations.Declarations.purchases_base) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var purchases_vat519 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Purchases VAT", "name": "purchases_vat", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Purchases VAT","(declarations.Declarations.purchases_vat) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var fields_2_panel520 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_base518, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_vat519, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 135, "border": false, "anchor": "-20", "labelAlign": "top" });
    var purchases_investments523 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Investments", "name": "purchases_investments", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Investments","(declarations.Declarations.purchases_investments) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var purchases_ware524 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Ware", "name": "purchases_ware", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Ware","(declarations.Declarations.purchases_ware) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var purchases_services525 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Services", "name": "purchases_services", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Services","(declarations.Declarations.purchases_services) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var fields_3_panel526 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_investments523, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_ware524, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": purchases_services525, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 108, "border": false, "anchor": "-20", "labelAlign": "top" });
    var fields_panel530 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "form", "hideCheckBoxLabels": true, "items": [ fields_1_panel515, fields_2_panel520, fields_3_panel526 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    var VouchersByDeclaration_grid539 = new Lino.declarations.VouchersByDeclaration.GridPanel({ "flex": 45, "listeners": { "render": Lino.quicktip_renderer("Vouchers","(declarations.declarations.VouchersByDeclaration) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.declarations.VouchersByDeclaration.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel540 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel507, fields_panel530, VouchersByDeclaration_grid539 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel540;
    this.before_row_edit = function(record) {
      VouchersByDeclaration_grid539.on_master_changed();
    }
    Lino.declarations.Declarations.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.sales.Invoices.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 30,
  initComponent : function() {
    var date161 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(sales.Invoices.date) ") }, "anchor": "-20" });
    var partner162 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "emptyText": "Select a Partner...", "listeners": { "render": Lino.quicktip_renderer("Partner","(sales.Invoices.partner) ") }, "selectOnFocus": true, "hiddenName": "partnerHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/partner", "method": "GET" }) }), "name": "partner" });
    var vat_regime163 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "VAT Regime", "allowBlank": false, "hiddenName": "vat_regimeHidden", "listeners": { "render": Lino.quicktip_renderer("VAT Regime","(sales.Invoices.vat_regime) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.vat.VatRegimes, "name": "vat_regime" });
    var invoice_header_1_panel164 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 25, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date161, "labelAlign": "top" }, { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner162, "labelAlign": "top" }, { "flex": 35, "autoHeight": true, "layout": "form", "xtype": "panel", "items": vat_regime163, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var subject168 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Subject line", "name": "subject", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Subject line","(sales.Invoices.subject) ") }, "anchor": "-20" });
    var your_ref169 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Your reference", "name": "your_ref", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Your reference","(sales.Invoices.your_ref) ") }, "anchor": "-20" });
    var invoice_header_2_panel170 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": subject168, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": your_ref169, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 135, "border": false, "anchor": "-20", "labelAlign": "top" });
    var payment_term173 = new Lino.RemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Payment Term", "name": "payment_term", "pageSize": 20, "emptyText": "Select a Payment Term...", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(sales.Invoices.payment_term) ") }, "selectOnFocus": true, "hiddenName": "payment_termHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/payment_term", "method": "GET" }) }) });
    var due_date174 = new Lino.DateField({ "autoHeight": true, "fieldLabel": "Date of payment", "name": "due_date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date of payment","(sales.Invoices.due_date) ") }, "anchor": "-20" });
    var invoice_header_3_panel175 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": payment_term173, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": due_date174, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 144, "border": false, "anchor": "-20", "labelAlign": "top" });
    var shipping_mode178 = new Lino.RemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "Shipping Mode", "name": "shipping_mode", "pageSize": 20, "emptyText": "Select a Shipping Mode...", "listeners": { "render": Lino.quicktip_renderer("Shipping Mode","(sales.Invoices.shipping_mode) ") }, "selectOnFocus": true, "hiddenName": "shipping_modeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/shipping_mode", "method": "GET" }) }) });
    var invoice_header_panel179 = new Ext.form.FieldSet({ "flex": 75, "autoHeight": true, "layout": "form", "title": "Header", "items": [ invoice_header_1_panel164, invoice_header_2_panel170, invoice_header_3_panel175, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": shipping_mode178, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 126, "border": false, "labelAlign": "top" });
    var total_base181 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total excl. VAT", "name": "total_base", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total excl. VAT","(sales.Invoices.total_base) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var total_vat182 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "VAT", "name": "total_vat", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("VAT","(sales.Invoices.total_vat) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var total_incl183 = new Ext.form.NumberField({ "autoHeight": true, "decimalPrecision": 2, "fieldLabel": "Total incl. VAT", "name": "total_incl", "decimalSeparator": ",", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(sales.Invoices.total_incl) ") }, "selectOnFocus": true, "anchor": "-20", "allowBlank": true });
    var workflow_buttons_disp184 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Workflow", "name": "workflow_buttons", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Workflow","(sales.Invoices.workflow_buttons) ") }, "anchor": "-20" });
    var totals_panel185 = new Ext.form.FieldSet({ "flex": 25, "autoHeight": true, "layout": "form", "title": "Totals", "items": [ { "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_base181, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_vat182, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": total_incl183, "anchor": "-20", "labelAlign": "top" }, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": workflow_buttons_disp184, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "autoScroll": false, "hideCheckBoxLabels": true, "labelWidth": 144, "border": false, "labelAlign": "top" });
    var general_1_panel190 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "hideCheckBoxLabels": true, "items": [ invoice_header_panel179, totals_panel185 ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var ItemsByInvoice_grid204 = new Lino.sales.ItemsByInvoice.GridPanel({ "flex": 45, "listeners": { "render": Lino.quicktip_renderer("invoice items","(sales.sales.ItemsByInvoice) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.sales.ItemsByInvoice.grid) ], "preview_limit": 15, "master_panel": this });
    var general_panel205 = new Ext.Panel({ "layout": "vbox", "title": "General", "items": [ general_1_panel190, ItemsByInvoice_grid204 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var id206 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(sales.Invoices.id) ") }, "anchor": "-20" });
    var user207 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(sales.Invoices.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/user", "method": "GET" }) }) });
    var language208 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "Language", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(sales.Invoices.language) ") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var more_1_panel209 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 81, "hideCheckBoxLabels": true, "items": [ { "flex": 11, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id206, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user207, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language208, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var intro213 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Introductive Text","(sales.Invoices.intro) ") }, "fieldLabel": "Introductive Text", "name": "intro", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var more_panel214 = new Ext.Panel({ "layout": "vbox", "title": "More", "items": [ more_1_panel209, { "items": intro213, "labelAlign": "top", "layout": "form", "xtype": "panel", "flex": 83 } ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "labelWidth": 162, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var journal216 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Journal", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "emptyText": "Select a Journal...", "listeners": { "render": Lino.quicktip_renderer("Journal","(sales.Invoices.journal) ") }, "selectOnFocus": true, "hiddenName": "journalHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/journal", "method": "GET" }) }), "name": "journal" });
    var year217 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Fiscal Year", "name": "year", "hiddenName": "yearHidden", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(sales.Invoices.year) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number218 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "number", "name": "number", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("number","(sales.Invoices.number) ") }, "anchor": "-20" });
    var narration219 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Narration", "name": "narration", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Narration","(sales.Invoices.narration) ") }, "anchor": "-20" });
    var ledger_1_panel220 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 108, "hideCheckBoxLabels": true, "items": [ { "flex": 37, "autoHeight": true, "layout": "form", "xtype": "panel", "items": journal216, "labelAlign": "top" }, { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": year217, "labelAlign": "top" }, { "flex": 9, "autoHeight": true, "layout": "form", "xtype": "panel", "items": number218, "labelAlign": "top" }, { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": narration219, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var ledger_MovementsByVoucher_grid232 = new Lino.ledger.MovementsByVoucher.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Movements","(ledger.ledger.MovementsByVoucher) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.ledger.MovementsByVoucher.grid) ], "preview_limit": 15, "master_panel": this });
    var ledger_panel233 = new Ext.Panel({ "layout": "vbox", "title": "Ledger", "items": [ ledger_1_panel220, ledger_MovementsByVoucher_grid232 ], "frame": true, "layoutConfig": { "align": "stretch" }, "hideCheckBoxLabels": true, "listeners": { "activate": Lino.on_tab_activate }, "autoScroll": false, "border": false, "bodyBorder": false, "labelAlign": "top" });
    var main_panel234 = new Ext.TabPanel({ "hideCheckBoxLabels": true, "border": false, "split": true, "autoScroll": false, "items": [ general_panel205, more_panel214, ledger_panel233 ], "activeTab": 0, "bodyBorder": false, "frame": true, "labelAlign": "top" });
    this.items = main_panel234;
    this.before_row_edit = function(record) {
      ItemsByInvoice_grid204.on_master_changed();
      ledger_MovementsByVoucher_grid232.on_master_changed();
    }
    Lino.sales.Invoices.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.about.About.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var server_status_disp1236 = new Ext.form.DisplayField({ "autoHeight": true, "fieldLabel": "Server status", "name": "server_status", "value": "<br/>", "always_enabled": true, "disabled": true, "listeners": { "render": Lino.quicktip_renderer("Server status","(about.About.server_status) ") }, "anchor": "-20" });
    var main_panel1237 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "labelWidth": 126, "hideCheckBoxLabels": true, "items": [ { "flex": 25, "html": "<div class=\"htmlText\"><span>This is <a href=\"http://www.lino-framework.org/cosi\" target=\"_blank\">Lino Cos&#236;</a> 0.1 using <a href=\"http://www.lino-framework.org\" target=\"_blank\">Lino</a> 1.6.14, <a href=\"http://north.lino-framework.org\" target=\"_blank\">North</a> 0.1.8, <a href=\"http://site.lino-framework.org\" target=\"_blank\">djangosite</a> 0.1.9, <a href=\"http://www.djangoproject.com\" target=\"_blank\">Django</a> 1.6.2, <a href=\"http://www.python.org/\" target=\"_blank\">Python</a> 2.7.4, <a href=\"http://babel.edgewall.org/\" target=\"_blank\">Babel</a> 1.3, <a href=\"http://jinja.pocoo.org/\" target=\"_blank\">Jinja</a> 2.7.2, <a href=\"http://sphinx-doc.org/\" target=\"_blank\">Sphinx</a> 1.3a0, <a href=\"http://labix.org/python-dateutil\" target=\"_blank\">python-dateutil</a> 2.1, <a href=\"http://pypi.python.org/pypi/odfpy\" target=\"_blank\">OdfPy</a> ODFPY/0.9.6, <a href=\"http://docutils.sourceforge.net/\" target=\"_blank\">docutils</a> 0.11, <a href=\"https://fedorahosted.org/suds/\" target=\"_blank\">suds</a> 0.4, <a href=\"http://pyyaml.org/\" target=\"_blank\">PyYaml</a> 3.10, <a href=\"http://appyframework.org/pod.html\" target=\"_blank\">Appy</a> 0.9.0 (2014/06/23 22:15), <a href=\"http://www.sencha.com\" target=\"_blank\">ExtJS</a> <a href=\"#\" onclick=\"alert('ExtJS client version is ' + Ext.version);\" title=\"Click to see ExtJS client version\">(version)</a>, <a href=\"http://www.famfamfam.com/lab/icons/silk/\" target=\"_blank\">Silk Icons</a> 1.3, <a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\">Bootstrap</a> 2.3.1?</span><p>Server uptime : <b>Saturday, June 28, 2014 at 14:50:26.927248</b></p><p>Source timestamps:</p><ul><li>lino : <b>Saturday, June 28, 2014 at 14:50:26.703985</b></li><li>atelier : <b>Friday, June 20, 2014 at 22:53:42.035233</b></li><li>djangosite : <b>Friday, June 20, 2014 at 15:02:27.416069</b></li><li>north : <b>Wednesday, June 18, 2014 at 22:00:01.566950</b></li><li>django : <b>Saturday, May 24, 2014 at 09:56:36.678359</b></li></ul></div>", "xtype": "label" }, { "items": server_status_disp1236, "autoHeight": true, "layout": "form", "xtype": "panel", "labelAlign": "top" } ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1237;
    this.before_row_edit = function(record) {
    }
    Lino.about.About.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.countries.Countries.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 8,
  initComponent : function() {
    var isocode657 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">ISO code</span>", "name": "isocode", "boxMinWidth": Lino.chars2width(4), "listeners": { "render": Lino.quicktip_renderer("ISO code","(countries.Countries.isocode)         The two-letter code for this country as defined by ISO 3166-1.\n        For countries that no longer exist it may be a 4-letter code.") }, "maxLength": 4, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name658 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(countries.Countries.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et659 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(countries.Countries.name_et) ") }, "anchor": "-20" });
    var short_code660 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Short code</span>", "name": "short_code", "boxMinWidth": Lino.chars2width(4), "listeners": { "render": Lino.quicktip_renderer("Short code","(countries.Countries.short_code) A short abbreviation for regional usage. Obsolete.") }, "maxLength": 4, "selectOnFocus": true, "anchor": "-20" });
    var main_1_panel661 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 9, "autoHeight": true, "layout": "form", "xtype": "panel", "items": isocode657, "labelAlign": "top" }, { "flex": 40, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name658, "labelAlign": "top" }, { "flex": 40, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et659, "labelAlign": "top" }, { "flex": 9, "autoHeight": true, "layout": "form", "xtype": "panel", "items": short_code660, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var countries_PlacesByCountry_grid740 = new Lino.countries.PlacesByCountry.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Places","(countries.countries.PlacesByCountry) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.countries.PlacesByCountry.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel741 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel661, countries_PlacesByCountry_grid740 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel741;
    this.before_row_edit = function(record) {
      countries_PlacesByCountry_grid740.on_master_changed();
    }
    Lino.countries.Countries.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.accounts.Charts.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 20,
  initComponent : function() {
    var name985 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Charts.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et986 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(accounts.Charts.name_et) ") }, "anchor": "-20" });
    var main_1_panel987 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name985, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et986, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var main_panel990 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "fit", "hideCheckBoxLabels": true, "items": [ main_1_panel987 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel990;
    this.before_row_edit = function(record) {
    }
    Lino.accounts.Charts.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.users.Users.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 6,
  initComponent : function() {
    var username605 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Username</span>", "name": "username", "listeners": { "render": Lino.quicktip_renderer("Username","(users.Users.username) Required. Must be unique.") }, "maxLength": 30, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var profile606 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">User Profile</span>", "name": "profile", "hiddenName": "profileHidden", "listeners": { "render": Lino.quicktip_renderer("User Profile","(users.Users.profile) Users with an empty `profile` field are considered inactive and cannot log in.") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.UserProfiles) });
    var partner607 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "name": "partner", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "hiddenName": "partnerHidden", "listeners": { "render": Lino.quicktip_renderer("Partner","(users.Users.partner) ") }, "selectOnFocus": true, "emptyText": "Select a Partner...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/Users/partner", "method": "GET" }) }) });
    var box1_1_panel608 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 34, "autoHeight": true, "layout": "form", "xtype": "panel", "items": username605, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": profile606, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner607, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 117, "border": false, "anchor": "-20", "labelAlign": "top" });
    var first_name612 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "First name", "name": "first_name", "maxLength": 30, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("First name","(users.Users.first_name) ") }, "anchor": "-20" });
    var last_name613 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Last name", "name": "last_name", "maxLength": 30, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Last name","(users.Users.last_name) ") }, "anchor": "-20" });
    var initials614 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Initials", "name": "initials", "boxMinWidth": Lino.chars2width(10), "listeners": { "render": Lino.quicktip_renderer("Initials","(users.Users.initials) ") }, "maxLength": 10, "selectOnFocus": true, "anchor": "-20" });
    var box1_2_panel615 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": first_name612, "labelAlign": "top" }, { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": last_name613, "labelAlign": "top" }, { "flex": 20, "autoHeight": true, "layout": "form", "xtype": "panel", "items": initials614, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var email619 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "e-mail address", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("e-mail address","(users.Users.email) ") }, "anchor": "-20" });
    var language620 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "Language", "name": "language", "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(users.Users.language) ") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var box1_3_panel621 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 51, "autoHeight": true, "layout": "form", "xtype": "panel", "items": email619, "labelAlign": "top" }, { "flex": 48, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language620, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 135, "border": false, "anchor": "-20", "labelAlign": "top" });
    var id624 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(users.Users.id) ") }, "anchor": "-20" });
    var created625 = new Ext.form.DisplayField({ "disabled": true, "autoHeight": true, "fieldLabel": "Created", "name": "created", "listeners": { "render": Lino.quicktip_renderer("Created","(users.Users.created) ") }, "value": "<br>", "anchor": "-20" });
    var modified626 = new Ext.form.DisplayField({ "disabled": true, "autoHeight": true, "fieldLabel": "Modified", "name": "modified", "listeners": { "render": Lino.quicktip_renderer("Modified","(users.Users.modified) ") }, "value": "<br>", "anchor": "-20" });
    var box1_4_panel627 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 13, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id624, "labelAlign": "top" }, { "flex": 43, "autoHeight": true, "layout": "form", "xtype": "panel", "items": created625, "labelAlign": "top" }, { "flex": 43, "autoHeight": true, "layout": "form", "xtype": "panel", "items": modified626, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var box1_panel631 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "form", "hideCheckBoxLabels": true, "items": [ box1_1_panel608, box1_2_panel615, box1_3_panel621, box1_4_panel627 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    var remarks632 = new Ext.form.TextArea({ "listeners": { "render": Lino.quicktip_renderer("Remarks","(users.Users.remarks) ") }, "fieldLabel": "Remarks", "name": "remarks", "growMax": 2000, "selectOnFocus": true, "anchor": "-20 -10" });
    var AuthoritiesGiven_grid635 = new Lino.users.AuthoritiesGiven.GridPanel({ "flex": 33, "hide_top_toolbar": true, "containing_panel": this, "preview_limit": 15, "master_panel": this, "listeners": { "render": Lino.quicktip_renderer("Authorities given","(users.users.AuthoritiesGiven) ") }, "tools": [ Lino.show_in_own_window_button(Lino.users.AuthoritiesGiven.grid) ], "hideHeaders": true });
    var main_2_panel636 = new Ext.Panel({ "flex": 55, "border": false, "layout": "hbox", "labelWidth": 72, "hideCheckBoxLabels": true, "items": [ { "items": remarks632, "labelAlign": "top", "layout": "form", "xtype": "panel", "flex": 66 }, AuthoritiesGiven_grid635 ], "autoScroll": false, "layoutConfig": { "align": "stretch" }, "frame": false, "labelAlign": "top" });
    var main_panel638 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ box1_panel631, main_2_panel636 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel638;
    this.before_row_edit = function(record) {
      AuthoritiesGiven_grid635.on_master_changed();
    }
    Lino.users.Users.DetailFormPanel.superclass.initComponent.call(this);
    // active_fields:
    partner607.on("change", function(){ this.save() }, this);
  }
});


Lino.users.Users.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 6,
  initComponent : function() {
    var username639 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Username</span>", "name": "username", "listeners": { "render": Lino.quicktip_renderer("Username","(users.Users.username) Required. Must be unique.") }, "maxLength": 30, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var email640 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "e-mail address", "name": "email", "maxLength": 75, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("e-mail address","(users.Users.email) ") }, "anchor": "-20" });
    var main_1_panel641 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": username639, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": email640, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 135, "border": false, "anchor": "-20", "labelAlign": "top" });
    var first_name644 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "First name", "name": "first_name", "maxLength": 30, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("First name","(users.Users.first_name) ") }, "anchor": "-20" });
    var last_name645 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Last name", "name": "last_name", "maxLength": 30, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Last name","(users.Users.last_name) ") }, "anchor": "-20" });
    var main_2_panel646 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": first_name644, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": last_name645, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var partner649 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "name": "partner", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "hiddenName": "partnerHidden", "listeners": { "render": Lino.quicktip_renderer("Partner","(users.Users.partner) ") }, "selectOnFocus": true, "emptyText": "Select a Partner...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/Users/partner", "method": "GET" }) }) });
    var language650 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "Language", "name": "language", "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(users.Users.language) ") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var profile651 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">User Profile</span>", "name": "profile", "hiddenName": "profileHidden", "listeners": { "render": Lino.quicktip_renderer("User Profile","(users.Users.profile) Users with an empty `profile` field are considered inactive and cannot log in.") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.UserProfiles) });
    var main_4_panel652 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 47, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language650, "labelAlign": "top" }, { "flex": 52, "autoHeight": true, "layout": "form", "xtype": "panel", "items": profile651, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 117, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel655 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 72, "autoScroll": false, "items": [ main_1_panel641, main_2_panel646, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner649, "anchor": "-20", "labelAlign": "top" }, main_4_panel652 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel655;
    this.before_row_edit = function(record) {
    }
    Lino.users.Users.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.excerpts.Excerpts.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 23,
  initComponent : function() {
    var id1090 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(excerpts.Excerpts.id) ") }, "anchor": "-20" });
    var excerpt_type1091 = new Lino.TwinCombo({ "autoHeight": true, "fieldLabel": "Excerpt Type", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.excerpts.ExcerptTypes.detail,Lino.excerpts.ExcerptTypes.insert)}, "emptyText": "Select a Excerpt Type...", "listeners": { "render": Lino.quicktip_renderer("Excerpt Type","(excerpts.Excerpts.excerpt_type) ") }, "selectOnFocus": true, "hiddenName": "excerpt_typeHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/excerpt_type", "method": "GET" }) }), "name": "excerpt_type" });
    var general_1_panel1092 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 117, "hideCheckBoxLabels": true, "items": [ { "flex": 16, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id1090, "labelAlign": "top" }, { "flex": 83, "autoHeight": true, "layout": "form", "xtype": "panel", "items": excerpt_type1091, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var company1095 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Recipient (Organization)", "name": "company", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "hiddenName": "companyHidden", "listeners": { "render": Lino.quicktip_renderer("Recipient (Organization)","(excerpts.Excerpts.company) ") }, "selectOnFocus": true, "emptyText": "Select a Organization...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/company", "method": "GET" }) }) });
    var contact_person1096 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Recipient (Person)", "name": "contact_person", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "hiddenName": "contact_personHidden", "listeners": { "render": Lino.quicktip_renderer("Recipient (Person)","(excerpts.Excerpts.contact_person) ") }, "selectOnFocus": true, "emptyText": "Select a Person...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/contact_person", "method": "GET" }) }) });
    var contact_role1097 = new Lino.RemoteComboFieldElement({ "autoHeight": true, "fieldLabel": "represented as", "name": "contact_role", "pageSize": 20, "emptyText": "Select a Function...", "listeners": { "render": Lino.quicktip_renderer("represented as","(excerpts.Excerpts.contact_role) ") }, "selectOnFocus": true, "hiddenName": "contact_roleHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/contact_role", "method": "GET" }) }) });
    var general_2_panel1098 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 225, "hideCheckBoxLabels": true, "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": company1095, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": contact_person1096, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": contact_role1097, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var user1102 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(excerpts.Excerpts.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/user", "method": "GET" }) }) });
    var language1103 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "Language", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(excerpts.Excerpts.language) ") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var owner_disp1104 = new Ext.form.DisplayField({ "disabled": true, "autoHeight": true, "fieldLabel": "Controlled by", "anchor": "-20", "name": "owner" });
    var build_method1105 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Build method", "allowBlank": false, "hiddenName": "build_methodHidden", "listeners": { "render": Lino.quicktip_renderer("Build method","(excerpts.Excerpts.build_method) ") }, "selectOnFocus": true, "anchor": "-20", "store": Lino.lino.BuildMethods, "name": "build_method" });
    var build_time1106 = new Ext.form.DisplayField({ "disabled": true, "autoHeight": true, "fieldLabel": "build time", "name": "build_time", "listeners": { "render": Lino.quicktip_renderer("build time","(excerpts.Excerpts.build_time) ") }, "value": "<br>", "anchor": "-20" });
    var general_3_panel1107 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 126, "hideCheckBoxLabels": true, "items": [ { "flex": 15, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user1102, "labelAlign": "top" }, { "flex": 12, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language1103, "labelAlign": "top" }, { "flex": 15, "autoHeight": true, "layout": "form", "xtype": "panel", "items": owner_disp1104, "labelAlign": "top" }, { "flex": 32, "autoHeight": true, "layout": "form", "xtype": "panel", "items": build_method1105, "labelAlign": "top" }, { "flex": 24, "autoHeight": true, "layout": "form", "xtype": "panel", "items": build_time1106, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var preview_htmlbox1113 = new Lino.HtmlBoxPanel({ "flex": 50, "layout": "fit", "name": "preview", "containing_panel": this, "items": new Ext.BoxComponent({autoScroll:true}), "title": "Preview", "bodyStyle": "overflow-x:hidden;", "value": "<br/>", "always_enabled": true, "listeners": { "render": Lino.quicktip_renderer("Preview","(excerpts.Excerpts.preview) ") } });
    var general_panel1114 = new Ext.form.FieldSet({ "layout": "vbox", "title": "General", "layoutConfig": { "align": "stretch" }, "frame": true, "bodyBorder": false, "autoScroll": false, "items": [ general_1_panel1092, general_2_panel1098, general_3_panel1107, preview_htmlbox1113 ], "hideCheckBoxLabels": true, "labelWidth": 72, "border": false, "labelAlign": "top" });
    var main_panel1115 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "fit", "hideCheckBoxLabels": true, "items": [ general_panel1114 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel1115;
    this.before_row_edit = function(record) {
      excerpt_type1091.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1096.setContextValue('company', record ? record.data['companyHidden'] : undefined);
      preview_htmlbox1113.refresh();
    }
    this.onRender = function(ct, position) {
      owner_disp1104.on('change',Lino.chooser_handler(excerpt_type1091,'owner'));
      company1095.on('change',Lino.chooser_handler(contact_person1096,'company'));
      Lino.excerpts.Excerpts.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
    Lino.excerpts.Excerpts.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.sales.Invoices.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 30,
  initComponent : function() {
    var partner235 = new Lino.TwinCombo({ "preferred_width": 20, "autoHeight": true, "fieldLabel": "Partner", "allowBlank": false, "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "emptyText": "Select a Partner...", "listeners": { "render": Lino.quicktip_renderer("Partner","(sales.Invoices.partner) ") }, "selectOnFocus": true, "hiddenName": "partnerHidden", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/partner", "method": "GET" }) }), "name": "partner" });
    var date236 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(sales.Invoices.date) ") }, "anchor": "-20" });
    var main_1_panel237 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 60, "autoHeight": true, "layout": "form", "xtype": "panel", "items": partner235, "labelAlign": "top" }, { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date236, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 72, "border": false, "anchor": "-20", "labelAlign": "top" });
    var subject240 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Subject line", "name": "subject", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Subject line","(sales.Invoices.subject) ") }, "anchor": "-20" });
    var main_panel241 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 117, "autoScroll": false, "items": [ main_1_panel237, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": subject240, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel241;
    this.before_row_edit = function(record) {
    }
    Lino.sales.Invoices.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.finan.JournalEntries.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 38,
  initComponent : function() {
    var date373 = new Lino.DateField({ "autoHeight": true, "allowBlank": false, "fieldLabel": "Date", "name": "date", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Date","(finan.JournalEntries.date) ") }, "anchor": "-20" });
    var user374 = new Lino.TwinCombo({ "preferred_width": 15, "autoHeight": true, "fieldLabel": "Author", "name": "user", "pageSize": 20, "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "hiddenName": "userHidden", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.JournalEntries.user) ") }, "selectOnFocus": true, "emptyText": "Select a User...", "anchor": "-20", "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/user", "method": "GET" }) }) });
    var main_1_panel375 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 39, "autoHeight": true, "layout": "form", "xtype": "panel", "items": date373, "labelAlign": "top" }, { "flex": 60, "autoHeight": true, "layout": "form", "xtype": "panel", "items": user374, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 63, "border": false, "anchor": "-20", "labelAlign": "top" });
    var narration378 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Narration", "name": "narration", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Narration","(finan.JournalEntries.narration) ") }, "anchor": "-20" });
    var main_panel379 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "labelWidth": 90, "autoScroll": false, "items": [ main_1_panel375, { "autoHeight": true, "layout": "form", "xtype": "panel", "items": narration378, "anchor": "-20", "labelAlign": "top" } ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel379;
    this.before_row_edit = function(record) {
    }
    Lino.finan.JournalEntries.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.contacts.Persons.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 12,
  initComponent : function() {
    var first_name805 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">First name</span>", "name": "first_name", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("First name","(contacts.Persons.first_name) First or given name.") }, "anchor": "-20" });
    var last_name806 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Last name</span>", "name": "last_name", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Last name","(contacts.Persons.last_name) Last name (family name).") }, "anchor": "-20" });
    var main_1_panel807 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": first_name805, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": last_name806, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 99, "border": false, "anchor": "-20", "labelAlign": "top" });
    var gender810 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Gender", "name": "gender", "hiddenName": "genderHidden", "listeners": { "render": Lino.quicktip_renderer("Gender","(contacts.Persons.gender) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.lino.Genders) });
    var language811 = new Lino.ChoicesFieldElement({ "autoHeight": true, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "allowBlank": false, "hiddenName": "languageHidden", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Persons.language) Die Sprache, in der Dokumente ausgestellt werden sollen.") }, "selectOnFocus": true, "anchor": "-20", "store": [ [ "en", "English" ], [ "et", "Estonian" ] ], "name": "language" });
    var main_2_panel812 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 31, "autoHeight": true, "layout": "form", "xtype": "panel", "items": gender810, "labelAlign": "top" }, { "flex": 68, "autoHeight": true, "layout": "form", "xtype": "panel", "items": language811, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 81, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel815 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel807, main_2_panel812 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel815;
    this.before_row_edit = function(record) {
    }
    Lino.contacts.Persons.InsertFormPanel.superclass.initComponent.call(this);
  }
});


Lino.accounts.Charts.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 20,
  initComponent : function() {
    var id890 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(accounts.Charts.id) ") }, "anchor": "-20" });
    var name891 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Charts.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et892 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(accounts.Charts.name_et) ") }, "anchor": "-20" });
    var main_1_panel893 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 10, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id890, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name891, "labelAlign": "top" }, { "flex": 44, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et892, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var GroupsByChart_grid983 = new Lino.accounts.GroupsByChart.GridPanel({ "flex": 83, "listeners": { "render": Lino.quicktip_renderer("Account Groups","(accounts.accounts.GroupsByChart) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.accounts.GroupsByChart.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel984 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel893, GroupsByChart_grid983 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel984;
    this.before_row_edit = function(record) {
      GroupsByChart_grid983.on_master_changed();
    }
    Lino.accounts.Charts.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.accounts.Groups.DetailFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  content_type: 19,
  initComponent : function() {
    var ref903 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "ref", "name": "ref", "maxLength": 20, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ref","(accounts.Groups.ref) ") }, "anchor": "-20" });
    var name904 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Groups.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et905 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(accounts.Groups.name_et) ") }, "anchor": "-20" });
    var main_1_panel906 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 153, "hideCheckBoxLabels": true, "items": [ { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ref903, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name904, "labelAlign": "top" }, { "flex": 33, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et905, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var account_type910 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Account Type", "name": "account_type", "hiddenName": "account_typeHidden", "listeners": { "render": Lino.quicktip_renderer("Account Type","(accounts.Groups.account_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.accounts.AccountTypes) });
    var id911 = new Ext.form.NumberField({ "autoHeight": true, "fieldLabel": "ID", "name": "id", "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ID","(accounts.Groups.id) ") }, "anchor": "-20" });
    var main_2_panel912 = new Ext.Panel({ "autoScroll": false, "autoHeight": true, "border": false, "layout": "hbox", "labelWidth": 117, "hideCheckBoxLabels": true, "items": [ { "flex": 76, "autoHeight": true, "layout": "form", "xtype": "panel", "items": account_type910, "labelAlign": "top" }, { "flex": 23, "autoHeight": true, "layout": "form", "xtype": "panel", "items": id911, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "labelAlign": "top" });
    var AccountsByGroup_grid970 = new Lino.accounts.AccountsByGroup.GridPanel({ "flex": 71, "listeners": { "render": Lino.quicktip_renderer("Accounts","(accounts.accounts.AccountsByGroup) ") }, "hide_top_toolbar": true, "containing_panel": this, "tools": [ Lino.show_in_own_window_button(Lino.accounts.AccountsByGroup.grid) ], "preview_limit": 15, "master_panel": this });
    var main_panel971 = new Ext.Panel({ "autoScroll": false, "border": false, "layout": "vbox", "hideCheckBoxLabels": true, "items": [ main_1_panel906, main_2_panel912, AccountsByGroup_grid970 ], "frame": true, "layoutConfig": { "align": "stretch" }, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel971;
    this.before_row_edit = function(record) {
      AccountsByGroup_grid970.on_master_changed();
    }
    Lino.accounts.Groups.DetailFormPanel.superclass.initComponent.call(this);
  }
});


Lino.accounts.Groups.InsertFormPanel = Ext.extend(Lino.FormPanel,{
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 19,
  initComponent : function() {
    var name972 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation", "name": "name", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Groups.name) ") }, "maxLength": 200, "selectOnFocus": true, "anchor": "-20", "allowBlank": false });
    var name_et973 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "Designation (et)", "name": "name_et", "maxLength": 200, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("Designation (et)","(accounts.Groups.name_et) ") }, "anchor": "-20" });
    var main_1_panel974 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name972, "labelAlign": "top" }, { "flex": 50, "autoHeight": true, "layout": "form", "xtype": "panel", "items": name_et973, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 153, "border": false, "anchor": "-20", "labelAlign": "top" });
    var account_type977 = new Lino.ChoicesFieldElement({ "autoHeight": true, "forceSelection": true, "fieldLabel": "Account Type", "name": "account_type", "hiddenName": "account_typeHidden", "listeners": { "render": Lino.quicktip_renderer("Account Type","(accounts.Groups.account_type) ") }, "selectOnFocus": true, "anchor": "-20", "store": [['','<br>']].concat(Lino.accounts.AccountTypes) });
    var ref978 = new Ext.form.TextField({ "autoHeight": true, "fieldLabel": "ref", "name": "ref", "maxLength": 20, "selectOnFocus": true, "listeners": { "render": Lino.quicktip_renderer("ref","(accounts.Groups.ref) ") }, "anchor": "-20" });
    var main_2_panel979 = new Ext.Panel({ "autoHeight": true, "layout": "hbox", "items": [ { "flex": 43, "autoHeight": true, "layout": "form", "xtype": "panel", "items": account_type977, "labelAlign": "top" }, { "flex": 56, "autoHeight": true, "layout": "form", "xtype": "panel", "items": ref978, "labelAlign": "top" } ], "frame": false, "layoutConfig": { "align": "stretchmax" }, "hideCheckBoxLabels": true, "autoScroll": false, "labelWidth": 117, "border": false, "anchor": "-20", "labelAlign": "top" });
    var main_panel982 = new Ext.Panel({ "hideCheckBoxLabels": true, "autoHeight": true, "border": false, "layout": "form", "autoScroll": false, "items": [ main_1_panel974, main_2_panel979 ], "frame": true, "bodyBorder": false, "labelAlign": "top" });
    this.items = main_panel982;
    this.before_row_edit = function(record) {
    }
    Lino.accounts.Groups.InsertFormPanel.superclass.initComponent.call(this);
  }
});

Lino.users.Users.change_password = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(50), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.users.Users.change_password_ActionFormPanel({});
});
Lino.contacts.Persons.merge_row = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(50), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.Persons.merge_row_ActionFormPanel({});
});
Lino.contacts.Companies.merge_row = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(50), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.Companies.merge_row_ActionFormPanel({});
});

// js_render_GridPanel_class system.SiteConfigs
Lino.system.SiteConfigs.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/system/SiteConfigs",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/system/SiteConfigs','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/SiteConfigs','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/SiteConfigs','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/system/SiteConfigs','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "do_build", "menu_item_text": "Rebuild site cache", "panel_btn_handler": Lino.row_action_handler('do_build','GET',null), "text": "Rebuild site cache", "overflowText": "Rebuild site cache", "auto_save": true } ],
  cell_edit : true,
  title : "Site configurations",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 19,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "default_build_method" }, 'default_build_methodHidden', { "type": "int", "name": "next_partner_id" }, { "name": "site_company" }, 'site_companyHidden', { "name": "clients_account" }, 'clients_accountHidden', { "name": "sales_vat_account" }, 'sales_vat_accountHidden', { "name": "sales_account" }, 'sales_accountHidden', { "name": "suppliers_account" }, 'suppliers_accountHidden', { "name": "purchases_vat_account" }, 'purchases_vat_accountHidden', { "name": "purchases_account" }, 'purchases_accountHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 3,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.system.SiteConfigs.detail;
    var ww = this.containing_window;
    var id1250 = new Ext.form.NumberField({ "selectOnFocus": true });
    var default_build_method1251 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var next_partner_id1252 = new Ext.form.NumberField({ "selectOnFocus": true, "value": 100 });
    var site_company1253 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/site_company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var clients_account1254 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/clients_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var sales_vat_account1255 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/sales_vat_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var sales_account1256 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/sales_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var suppliers_account1257 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/suppliers_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var purchases_vat_account1258 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/purchases_vat_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var purchases_account1259 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/SiteConfigs/purchases_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.SiteConfigs.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1250, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Default build method", "editable": true, "tooltip": "(system.SiteConfigs.default_build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": default_build_method1251, "dataIndex": "default_build_method" }, new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.SiteConfigs.next_partner_id) The next automatic id for any new partner.", "filter": { "type": "numeric" }, "header": "Next partner id", "editor": next_partner_id1252, "width": Lino.chars2width(6), "dataIndex": "next_partner_id" }), { "colIndex": 3, "sortable": true, "header": "Site owner", "editable": true, "tooltip": "(system.SiteConfigs.site_company) The organisation who runs this site.\n        This is used e.g. as sender in documents.\n        Or, newly created partners inherit the country of the site owner.\n        ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('site_companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "site_company", "editor": site_company1253 }, { "colIndex": 4, "sortable": true, "header": "Clients account", "editable": true, "tooltip": "(system.SiteConfigs.clients_account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('clients_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "clients_account", "editor": clients_account1254 }, { "colIndex": 5, "sortable": true, "header": "Sales VAT account", "editable": true, "tooltip": "(system.SiteConfigs.sales_vat_account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('sales_vat_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "sales_vat_account", "editor": sales_vat_account1255 }, { "colIndex": 6, "sortable": true, "header": "Sales Base account", "editable": true, "tooltip": "(system.SiteConfigs.sales_account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('sales_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "sales_account", "editor": sales_account1256 }, { "colIndex": 7, "sortable": true, "header": "Suppliers account", "editable": true, "tooltip": "(system.SiteConfigs.suppliers_account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('suppliers_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "suppliers_account", "editor": suppliers_account1257 }, { "colIndex": 8, "sortable": true, "header": "Purchases VAT account", "editable": true, "tooltip": "(system.SiteConfigs.purchases_vat_account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('purchases_vat_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "purchases_vat_account", "editor": purchases_vat_account1258 }, { "colIndex": 9, "sortable": true, "header": "Purchases Base account", "editable": true, "tooltip": "(system.SiteConfigs.purchases_account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('purchases_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "purchases_account", "editor": purchases_account1259 } ];
    Lino.system.SiteConfigs.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.system.SiteConfigs.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.SiteConfigs.detailPanel = Ext.extend(Lino.system.SiteConfigs.DetailFormPanel,{
  empty_title: "Detail Site configurations",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_build", "menu_item_text": "Rebuild site cache", "panel_btn_handler": Lino.row_action_handler('do_build','GET',null), "text": "Rebuild site cache", "overflowText": "Rebuild site cache", "auto_save": true } ],
  ls_url: "/system/SiteConfigs",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.SiteConfigs.detail;
    Lino.system.SiteConfigs.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.system.SiteConfigs.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.system.SiteConfigs.detailPanel(p);
});
Lino.system.SiteConfigs.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.system.SiteConfigs.GridPanel(p);
});
Lino.system.SiteConfigs.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.SiteConfigs.do_build = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/SiteConfigs","GET",pk,"do_build",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class system.ContentTypes
Lino.system.ContentTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/system/ContentTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/system/ContentTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/ContentTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/ContentTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/system/ContentTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "content types",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "app_label" }, { "name": "model" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 2,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.system.ContentTypes.detail;
    this.ls_insert_handler = Lino.system.ContentTypes.insert;
    var ww = this.containing_window;
    var id1261 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1262 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 100 });
    var app_label1263 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 100 });
    var model1264 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 100 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.ContentTypes.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1261, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "name", "editable": true, "tooltip": "(system.ContentTypes.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1262, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "app label", "editable": true, "tooltip": "(system.ContentTypes.app_label) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": app_label1263, "dataIndex": "app_label" }, { "colIndex": 3, "sortable": true, "header": "python model class name", "editable": true, "tooltip": "(system.ContentTypes.model) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": model1264, "dataIndex": "model" } ];
    Lino.system.ContentTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.system.ContentTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.ContentTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.ContentTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.ContentTypes.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.ContentTypes.insertPanel = Ext.extend(Lino.system.ContentTypes.DetailFormPanel,{
  empty_title: "New content types",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/system/ContentTypes",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.ContentTypes.detail;
    this.ls_insert_handler = Lino.system.ContentTypes.insert;
    Lino.system.ContentTypes.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.system.ContentTypes.insert = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.system.ContentTypes.insertPanel(p);
});
Lino.system.ContentTypes.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.ContentTypes.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.ContentTypes.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.ContentTypes.detailPanel = Ext.extend(Lino.system.ContentTypes.DetailFormPanel,{
  empty_title: "Detail content types",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/system/ContentTypes",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.ContentTypes.detail;
    this.ls_insert_handler = Lino.system.ContentTypes.insert;
    Lino.system.ContentTypes.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.system.ContentTypes.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.ContentTypes.detailPanel(p);
});
Lino.system.ContentTypes.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.ContentTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.ContentTypes.GridPanel(p);
});
Lino.system.ContentTypes.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/ContentTypes","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class system.HelpTexts
Lino.system.HelpTexts.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/system/HelpTexts",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/system/HelpTexts','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/HelpTexts','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/HelpTexts','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/system/HelpTexts','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Help Texts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 7,
  ls_store_fields : [ { "name": "field" }, { "name": "verbose_name" }, { "name": "help_text" }, { "type": "int", "name": "id" }, { "name": "content_type" }, 'content_typeHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 3,
  ls_grid_configs : [  ],
  content_type : 4,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var field1266 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/HelpTexts/field", "method": "GET" }) }) });
    var verbose_name1267 = new Ext.form.TextField({ "disabled": true, "maxLength": 200 });
    var help_text1268 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var id1269 = new Ext.form.NumberField({ "selectOnFocus": true });
    var content_type1270 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/HelpTexts/content_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a content type..." });
    this.before_row_edit = function(record) {
      field1266.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      content_type1270.on('change',Lino.chooser_handler(field1266,'content_type'));
      Lino.system.HelpTexts.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Field", "editable": true, "tooltip": "(system.HelpTexts.field) The name of the field.", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": field1266, "dataIndex": "field" }, { "header": "Verbose name", "colIndex": 1, "sortable": false, "dataIndex": "verbose_name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(system.HelpTexts.verbose_name) " }, { "colIndex": 2, "sortable": false, "header": "HelpText", "editable": true, "tooltip": "(system.HelpTexts.help_text) ", "filter": { "type": "string" }, "width": Lino.chars2width(61), "editor": help_text1268, "dataIndex": "help_text" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.HelpTexts.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1269, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "header": "Model", "editable": true, "tooltip": "(system.HelpTexts.content_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('content_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "content_type", "editor": content_type1270 } ];
    Lino.system.HelpTexts.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.system.HelpTexts.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTexts","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTexts.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.HelpTexts.GridPanel(p);
});

// js_render_GridPanel_class system.TextFieldTemplates
Lino.system.TextFieldTemplates.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/system/TextFieldTemplates",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/system/TextFieldTemplates','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/TextFieldTemplates','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/TextFieldTemplates','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/system/TextFieldTemplates','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Text Field Templates",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "name": "name" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 5,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.system.TextFieldTemplates.detail;
    this.ls_insert_handler = Lino.system.TextFieldTemplates.insert;
    var ww = this.containing_window;
    var id1272 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user1273 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/TextFieldTemplates/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var name1274 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.TextFieldTemplates.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1272, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Author", "editable": true, "tooltip": "(system.TextFieldTemplates.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1273 }, { "colIndex": 2, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(system.TextFieldTemplates.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1274, "dataIndex": "name" } ];
    Lino.system.TextFieldTemplates.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.system.TextFieldTemplates.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.TextFieldTemplates.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.TextFieldTemplates.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.TextFieldTemplates.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.TextFieldTemplates.insertPanel = Ext.extend(Lino.system.TextFieldTemplates.InsertFormPanel,{
  empty_title: "New Text Field Templates",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/system/TextFieldTemplates",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.TextFieldTemplates.detail;
    this.ls_insert_handler = Lino.system.TextFieldTemplates.insert;
    Lino.system.TextFieldTemplates.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.system.TextFieldTemplates.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.system.TextFieldTemplates.insertPanel(p);
});
Lino.system.TextFieldTemplates.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.TextFieldTemplates.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.TextFieldTemplates.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.TextFieldTemplates.detailPanel = Ext.extend(Lino.system.TextFieldTemplates.DetailFormPanel,{
  empty_title: "Detail Text Field Templates",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/system/TextFieldTemplates",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.TextFieldTemplates.detail;
    this.ls_insert_handler = Lino.system.TextFieldTemplates.insert;
    Lino.system.TextFieldTemplates.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.system.TextFieldTemplates.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.TextFieldTemplates.detailPanel(p);
});
Lino.system.TextFieldTemplates.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.TextFieldTemplates.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.TextFieldTemplates.GridPanel(p);
});
Lino.system.TextFieldTemplates.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/TextFieldTemplates","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class users.Users
Lino.users.Users.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/users/Users",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/users/Users','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/Users','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/Users','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/users/Users','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  cell_edit : true,
  title : "Users",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 17,
  ls_store_fields : [ { "name": "username" }, { "name": "profile" }, 'profileHidden', { "name": "first_name" }, { "name": "last_name" }, { "type": "int", "name": "id" }, { "name": "modified" }, { "name": "created" }, { "name": "password" }, { "name": "initials" }, { "name": "email" }, { "name": "remarks" }, { "name": "language" }, 'languageHidden', { "name": "partner" }, 'partnerHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 6,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.users.Users.detail;
    this.ls_insert_handler = Lino.users.Users.insert;
    var ww = this.containing_window;
    var username1276 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 30 });
    var profile1277 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.UserProfiles) });
    var first_name1278 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 30 });
    var last_name1279 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 30 });
    var id1280 = new Ext.form.NumberField({ "selectOnFocus": true });
    var modified1281 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var created1282 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var password1283 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 128 });
    var initials1284 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var email1285 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var remarks1286 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var language1287 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var partner1288 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/Users/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Username", "editable": true, "tooltip": "(users.Users.username) Required. Must be unique.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": username1276, "dataIndex": "username" }, { "colIndex": 1, "sortable": true, "header": "User Profile", "editable": true, "tooltip": "(users.Users.profile) Users with an empty `profile` field are considered inactive and cannot log in.", "filter": { "type": "string" }, "width": Lino.chars2width(23), "editor": profile1277, "dataIndex": "profile" }, { "colIndex": 2, "sortable": true, "header": "First name", "editable": true, "tooltip": "(users.Users.first_name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": first_name1278, "dataIndex": "first_name" }, { "colIndex": 3, "sortable": true, "header": "Last name", "editable": true, "tooltip": "(users.Users.last_name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": last_name1279, "dataIndex": "last_name" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(users.Users.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1280, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "width": Lino.chars2width(17), "editable": false, "tooltip": "(users.Users.modified) ", "header": "Modified", "dataIndex": "modified", "hidden": true }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(17), "editable": false, "tooltip": "(users.Users.created) ", "header": "Created", "dataIndex": "created", "hidden": true }, { "colIndex": 7, "sortable": true, "header": "Password", "editable": true, "tooltip": "(users.Users.password) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": password1283, "hidden": true, "dataIndex": "password" }, { "colIndex": 8, "sortable": true, "header": "Initials", "editable": true, "tooltip": "(users.Users.initials) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": initials1284, "hidden": true, "dataIndex": "initials" }, { "colIndex": 9, "sortable": true, "header": "e-mail address", "editable": true, "tooltip": "(users.Users.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email1285, "hidden": true, "dataIndex": "email" }, { "colIndex": 10, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(users.Users.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks1286, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 11, "sortable": true, "header": "Language", "editable": true, "tooltip": "(users.Users.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1287, "hidden": true, "dataIndex": "language" }, { "colIndex": 12, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(users.Users.partner) ", "filter": { "type": "string" }, "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "hidden": true, "editor": partner1288 } ];
    Lino.users.Users.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.users.Users.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Users.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Users.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Users.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.users.Users.insertPanel = Ext.extend(Lino.users.Users.InsertFormPanel,{
  empty_title: "New Users",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/users/Users",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.Users.detail;
    this.ls_insert_handler = Lino.users.Users.insert;
    Lino.users.Users.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.users.Users.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.users.Users.insertPanel(p);
});
Lino.users.Users.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Users.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Users.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.users.Users.detailPanel = Ext.extend(Lino.users.Users.DetailFormPanel,{
  empty_title: "Detail Users",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  ls_url: "/users/Users",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.Users.detail;
    this.ls_insert_handler = Lino.users.Users.insert;
    Lino.users.Users.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.users.Users.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.Users.detailPanel(p);
});
Lino.users.Users.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Users.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.Users.GridPanel(p);
});
Lino.users.Users.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Users","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class users.MySettings
Lino.users.MySettings.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/users/MySettings",
  ls_bbar_actions : [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  cell_edit : true,
  title : "Users",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 17,
  ls_store_fields : [ { "name": "username" }, { "name": "profile" }, 'profileHidden', { "name": "first_name" }, { "name": "last_name" }, { "type": "int", "name": "id" }, { "name": "modified" }, { "name": "created" }, { "name": "password" }, { "name": "initials" }, { "name": "email" }, { "name": "remarks" }, { "name": "language" }, 'languageHidden', { "name": "partner" }, 'partnerHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 6,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.users.MySettings.detail;
    this.ls_insert_handler = Lino.users.Users.insert;
    var ww = this.containing_window;
    var username1290 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 30 });
    var profile1291 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.UserProfiles) });
    var first_name1292 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 30 });
    var last_name1293 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 30 });
    var id1294 = new Ext.form.NumberField({ "selectOnFocus": true });
    var modified1295 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var created1296 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var password1297 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 128 });
    var initials1298 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var email1299 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var remarks1300 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var language1301 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var partner1302 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/MySettings/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Username", "editable": true, "tooltip": "(users.MySettings.username) Required. Must be unique.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": username1290, "dataIndex": "username" }, { "colIndex": 1, "sortable": true, "header": "User Profile", "editable": true, "tooltip": "(users.MySettings.profile) Users with an empty `profile` field are considered inactive and cannot log in.", "filter": { "type": "string" }, "width": Lino.chars2width(23), "editor": profile1291, "dataIndex": "profile" }, { "colIndex": 2, "sortable": true, "header": "First name", "editable": true, "tooltip": "(users.MySettings.first_name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": first_name1292, "dataIndex": "first_name" }, { "colIndex": 3, "sortable": true, "header": "Last name", "editable": true, "tooltip": "(users.MySettings.last_name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": last_name1293, "dataIndex": "last_name" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(users.MySettings.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1294, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "width": Lino.chars2width(17), "editable": false, "tooltip": "(users.MySettings.modified) ", "header": "Modified", "dataIndex": "modified", "hidden": true }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(17), "editable": false, "tooltip": "(users.MySettings.created) ", "header": "Created", "dataIndex": "created", "hidden": true }, { "colIndex": 7, "sortable": true, "header": "Password", "editable": true, "tooltip": "(users.MySettings.password) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": password1297, "hidden": true, "dataIndex": "password" }, { "colIndex": 8, "sortable": true, "header": "Initials", "editable": true, "tooltip": "(users.MySettings.initials) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": initials1298, "hidden": true, "dataIndex": "initials" }, { "colIndex": 9, "sortable": true, "header": "e-mail address", "editable": true, "tooltip": "(users.MySettings.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email1299, "hidden": true, "dataIndex": "email" }, { "colIndex": 10, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(users.MySettings.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks1300, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 11, "sortable": true, "header": "Language", "editable": true, "tooltip": "(users.MySettings.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1301, "hidden": true, "dataIndex": "language" }, { "colIndex": 12, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(users.MySettings.partner) ", "filter": { "type": "string" }, "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "hidden": true, "editor": partner1302 } ];
    Lino.users.MySettings.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.users.MySettings.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.MySettings.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.MySettings.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.MySettings.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.MySettings.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.MySettings.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.MySettings.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.users.MySettings.detailPanel = Ext.extend(Lino.users.Users.DetailFormPanel,{
  empty_title: "Users",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  ls_url: "/users/MySettings",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.MySettings.detail;
    this.ls_insert_handler = Lino.users.Users.insert;
    Lino.users.MySettings.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.users.MySettings.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.users.MySettings.detailPanel(p);
});

Lino.users.MySettings.detailPanel = Ext.extend(Lino.users.Users.DetailFormPanel,{
  empty_title: "Users",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  ls_url: "/users/MySettings",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.MySettings.detail;
    this.ls_insert_handler = Lino.users.Users.insert;
    Lino.users.MySettings.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.users.MySettings.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.users.MySettings.detailPanel(p);
});
Lino.users.MySettings.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/MySettings","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class users.UsersOverview
Lino.users.UsersOverview.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/users/UsersOverview",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  cell_edit : true,
  title : "Users",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 7,
  ls_store_fields : [ { "name": "username" }, { "name": "profile" }, 'profileHidden', { "name": "language" }, 'languageHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 6,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.users.UsersOverview.detail;
    this.ls_insert_handler = Lino.users.UsersOverview.insert;
    var ww = this.containing_window;
    var username1304 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 30 });
    var profile1305 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.UserProfiles) });
    var language1306 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Username", "editable": true, "tooltip": "(users.UsersOverview.username) Required. Must be unique.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": username1304, "dataIndex": "username" }, { "colIndex": 1, "sortable": true, "header": "User Profile", "editable": true, "tooltip": "(users.UsersOverview.profile) Users with an empty `profile` field are considered inactive and cannot log in.", "filter": { "type": "string" }, "width": Lino.chars2width(23), "editor": profile1305, "dataIndex": "profile" }, { "colIndex": 2, "sortable": true, "header": "Language", "editable": true, "tooltip": "(users.UsersOverview.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1306, "dataIndex": "language" } ];
    Lino.users.UsersOverview.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.users.UsersOverview.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.UsersOverview.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.UsersOverview.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.UsersOverview.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.users.UsersOverview.insertPanel = Ext.extend(Lino.users.Users.InsertFormPanel,{
  empty_title: "New Users",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/users/UsersOverview",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.UsersOverview.detail;
    this.ls_insert_handler = Lino.users.UsersOverview.insert;
    Lino.users.UsersOverview.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.users.UsersOverview.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.users.UsersOverview.insertPanel(p);
});
Lino.users.UsersOverview.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.UsersOverview.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.UsersOverview.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.users.UsersOverview.detailPanel = Ext.extend(Lino.users.Users.DetailFormPanel,{
  empty_title: "Detail Users",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "change_password", "menu_item_text": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": "Change password", "overflowText": "Change password", "auto_save": true } ],
  ls_url: "/users/UsersOverview",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.UsersOverview.detail;
    this.ls_insert_handler = Lino.users.UsersOverview.insert;
    Lino.users.UsersOverview.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.users.UsersOverview.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.UsersOverview.detailPanel(p);
});
Lino.users.UsersOverview.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.UsersOverview.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.UsersOverview.GridPanel(p);
});
Lino.users.UsersOverview.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/UsersOverview","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class users.Authorities
Lino.users.Authorities.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/users/Authorities",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/users/Authorities','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/Authorities','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/Authorities','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/users/Authorities','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Authorities",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 6,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "name": "authorized" }, 'authorizedHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 7,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1308 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user1309 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/Authorities/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var authorized1310 = new Lino.RemoteComboFieldElement({ "preferred_width": 15, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/Authorities/authorized", "method": "GET" }) }), "emptyText": "Select a User..." });
    this.before_row_edit = function(record) {
      authorized1310.setContextValue('user', record ? record.data['userHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      user1309.on('change',Lino.chooser_handler(authorized1310,'user'));
      Lino.users.Authorities.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(users.Authorities.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1308, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Author", "editable": true, "tooltip": "(users.Authorities.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1309 }, { "colIndex": 2, "sortable": true, "header": "User", "editable": true, "tooltip": "(users.Authorities.authorized) The user who gets authority to act in your name.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('authorizedHidden','Lino.users.Users.detail'), "dataIndex": "authorized", "editor": authorized1310 } ];
    Lino.users.Authorities.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.users.Authorities.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/Authorities","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.Authorities.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.Authorities.GridPanel(p);
});

// js_render_GridPanel_class countries.Countries
Lino.countries.Countries.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/countries/Countries",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/countries/Countries','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/Countries','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/Countries','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/countries/Countries','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Countries",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 6,
  ls_store_fields : [ { "name": "name" }, { "name": "name_et" }, { "name": "isocode" }, { "name": "short_code" }, { "name": "iso3" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 2,
  ls_grid_configs : [  ],
  content_type : 8,
  ls_id_property : "isocode",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.Countries.detail;
    this.ls_insert_handler = Lino.countries.Countries.insert;
    var ww = this.containing_window;
    var name1312 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1313 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var isocode1314 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(4), "allowBlank": false, "maxLength": 4 });
    var short_code1315 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(4), "maxLength": 4 });
    var iso31316 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(3), "maxLength": 3 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(countries.Countries.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1312, "dataIndex": "name" }, { "colIndex": 1, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(countries.Countries.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1313, "dataIndex": "name_et" }, { "colIndex": 2, "sortable": true, "header": "ISO code", "editable": true, "tooltip": "(countries.Countries.isocode)         The two-letter code for this country as defined by ISO 3166-1.\n        For countries that no longer exist it may be a 4-letter code.", "filter": { "type": "string" }, "width": Lino.chars2width(6), "editor": isocode1314, "dataIndex": "isocode" }, { "colIndex": 3, "sortable": true, "header": "Short code", "editable": true, "tooltip": "(countries.Countries.short_code) A short abbreviation for regional usage. Obsolete.", "filter": { "type": "string" }, "width": Lino.chars2width(6), "editor": short_code1315, "hidden": true, "dataIndex": "short_code" }, { "colIndex": 4, "sortable": true, "header": "ISO-3 code", "editable": true, "tooltip": "(countries.Countries.iso3) The three-letter code for this country as defined by ISO 3166-1.", "filter": { "type": "string" }, "width": Lino.chars2width(5), "editor": iso31316, "hidden": true, "dataIndex": "iso3" } ];
    Lino.countries.Countries.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.Countries.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Countries.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Countries.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Countries.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.Countries.insertPanel = Ext.extend(Lino.countries.Countries.DetailFormPanel,{
  empty_title: "New Countries",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/countries/Countries",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.Countries.detail;
    this.ls_insert_handler = Lino.countries.Countries.insert;
    Lino.countries.Countries.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.Countries.insert = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.countries.Countries.insertPanel(p);
});
Lino.countries.Countries.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Countries.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Countries.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.Countries.detailPanel = Ext.extend(Lino.countries.Countries.DetailFormPanel,{
  empty_title: "Detail Countries",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/countries/Countries",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.Countries.detail;
    this.ls_insert_handler = Lino.countries.Countries.insert;
    Lino.countries.Countries.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.Countries.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.Countries.detailPanel(p);
});
Lino.countries.Countries.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Countries.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.Countries.GridPanel(p);
});
Lino.countries.Countries.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Countries","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class countries.Places
Lino.countries.Places.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/countries/Places",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/countries/Places','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/Places','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/Places','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/countries/Places','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Places",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 11,
  ls_store_fields : [ { "name": "country" }, 'countryHidden', { "name": "name" }, { "name": "name_et" }, { "name": "type" }, 'typeHidden', { "name": "zip_code" }, { "name": "parent" }, 'parentHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 9,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.Places.detail;
    this.ls_insert_handler = Lino.countries.Places.insert;
    var ww = this.containing_window;
    var country1318 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/Places/country", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Country..." });
    var name1319 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1320 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var type1321 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/Places/type", "method": "GET" }) }) });
    var zip_code1322 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(8), "maxLength": 8 });
    var parent1323 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/Places/parent", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var id1324 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
      type1321.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      country1318.on('change',Lino.chooser_handler(type1321,'country'));
      Lino.countries.Places.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Country", "editable": true, "tooltip": "(countries.Places.country) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('countryHidden','Lino.countries.Countries.detail'), "dataIndex": "country", "editor": country1318 }, { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(countries.Places.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1319, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(countries.Places.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1320, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": true, "header": "Place Type", "editable": true, "tooltip": "(countries.Places.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": type1321, "dataIndex": "type" }, { "colIndex": 4, "sortable": true, "header": "zip code", "editable": true, "tooltip": "(countries.Places.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(10), "editor": zip_code1322, "dataIndex": "zip_code" }, { "colIndex": 5, "sortable": true, "header": "Part of", "editable": true, "tooltip": "(countries.Places.parent) The superordinate geographic place         of which this place is a part.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('parentHidden','Lino.countries.Places.detail'), "dataIndex": "parent", "editor": parent1323 }, new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "format": "0", "editable": true, "tooltip": "(countries.Places.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1324, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.countries.Places.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.Places.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Places.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Places.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Places.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.Places.insertPanel = Ext.extend(Lino.countries.Places.DetailFormPanel,{
  empty_title: "New Places",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/countries/Places",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.Places.detail;
    this.ls_insert_handler = Lino.countries.Places.insert;
    Lino.countries.Places.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.Places.insert = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.countries.Places.insertPanel(p);
});
Lino.countries.Places.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Places.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Places.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.Places.detailPanel = Ext.extend(Lino.countries.Places.DetailFormPanel,{
  empty_title: "Detail Places",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/countries/Places",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.Places.detail;
    this.ls_insert_handler = Lino.countries.Places.insert;
    Lino.countries.Places.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.Places.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.Places.detailPanel(p);
});
Lino.countries.Places.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.Places.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.Places.GridPanel(p);
});
Lino.countries.Places.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/Places","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.CompanyTypes
Lino.contacts.CompanyTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/CompanyTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/CompanyTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/CompanyTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/CompanyTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/CompanyTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Organization Types",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 6,
  ls_store_fields : [ { "name": "name" }, { "name": "name_et" }, { "type": "int", "name": "id" }, { "name": "abbr" }, { "name": "abbr_et" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 2,
  ls_grid_configs : [  ],
  content_type : 15,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var name1326 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1327 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var id1328 = new Ext.form.NumberField({ "selectOnFocus": true });
    var abbr1329 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 30 });
    var abbr_et1330 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 30 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(contacts.CompanyTypes.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1326, "dataIndex": "name" }, { "colIndex": 1, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(contacts.CompanyTypes.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1327, "dataIndex": "name_et" }, new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.CompanyTypes.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1328, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 3, "sortable": true, "header": "Abbreviation", "editable": true, "tooltip": "(contacts.CompanyTypes.abbr) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": abbr1329, "hidden": true, "dataIndex": "abbr" }, { "colIndex": 4, "sortable": true, "header": "Abbreviation (et)", "editable": true, "tooltip": "(contacts.CompanyTypes.abbr_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": abbr_et1330, "hidden": true, "dataIndex": "abbr_et" } ];
    Lino.contacts.CompanyTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.CompanyTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/CompanyTypes","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.CompanyTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.CompanyTypes.GridPanel(p);
});

// js_render_GridPanel_class contacts.Partners
Lino.contacts.Partners.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/Partners",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/Partners','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Partners','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Partners','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true }, { "itemId": "print_labels", "menu_item_text": "Labels", "tooltip": "Generate mailing labels for these recipients", "panel_btn_handler": Lino.list_action_handler('/contacts/Partners','print_labels','GET',Lino.get_current_grid_config), "text": "Labels", "overflowText": "Labels", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/Partners','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  cell_edit : true,
  title : "Partners",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 30,
  ls_store_fields : [ { "name": "name" }, { "name": "email" }, { "name": "country" }, 'countryHidden', { "name": "city" }, 'cityHidden', { "name": "zip_code" }, { "name": "region" }, 'regionHidden', { "name": "addr1" }, { "name": "street_prefix" }, { "name": "street" }, { "name": "street_no" }, { "name": "street_box" }, { "name": "addr2" }, { "name": "language" }, 'languageHidden', { "name": "url" }, { "name": "phone" }, { "name": "gsm" }, { "name": "fax" }, { "name": "remarks" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "invoice_recipient" }, 'invoice_recipientHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 28,
  ls_grid_configs : [  ],
  content_type : 14,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Partners.detail;
    this.ls_insert_handler = Lino.contacts.Partners.insert;
    var ww = this.containing_window;
    var name18 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var email19 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var country20 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/country", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Country..." });
    var city21 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "forceSelection": false, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/city", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var zip_code22 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var region23 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/region", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var addr124 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_prefix25 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street26 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_no27 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var street_box28 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var addr229 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var language30 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var url31 = new Lino.URLField({ "selectOnFocus": true, "maxLength": 200 });
    var phone32 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var gsm33 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var fax34 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var remarks35 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var vat_regime36 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatRegimes) });
    var payment_term37 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var invoice_recipient38 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Partners/invoice_recipient", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var id39 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
      city21.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city21.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      region23.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      country20.on('change',Lino.chooser_handler(city21,'country'));
      region23.on('change',Lino.chooser_handler(city21,'region'));
      country20.on('change',Lino.chooser_handler(region23,'country'));
      Lino.contacts.Partners.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Name", "editable": true, "tooltip": "(contacts.Partners.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name18, "dataIndex": "name" }, { "colIndex": 1, "sortable": true, "header": "E-Mail", "editable": true, "tooltip": "(contacts.Partners.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email19, "dataIndex": "email" }, { "colIndex": 2, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Partners.country) ", "filter": { "type": "string" }, "header": "Country", "renderer": Lino.fk_renderer('countryHidden','Lino.countries.Countries.detail'), "dataIndex": "country", "hidden": true, "editor": country20 }, { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Partners.city) ", "filter": { "type": "string" }, "header": "City", "renderer": Lino.fk_renderer('cityHidden','Lino.countries.Places.detail'), "dataIndex": "city", "hidden": true, "editor": city21 }, { "colIndex": 4, "sortable": true, "header": "Zip code", "editable": true, "tooltip": "(contacts.Partners.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": zip_code22, "hidden": true, "dataIndex": "zip_code" }, { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Partners.region) ", "filter": { "type": "string" }, "header": "Region", "renderer": Lino.fk_renderer('regionHidden','Lino.countries.Places.detail'), "dataIndex": "region", "hidden": true, "editor": region23 }, { "colIndex": 6, "sortable": true, "header": "Address line before street", "editable": true, "tooltip": "(contacts.Partners.addr1) Address line before street", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr124, "hidden": true, "dataIndex": "addr1" }, { "colIndex": 7, "sortable": true, "header": "Street prefix", "editable": true, "tooltip": "(contacts.Partners.street_prefix) Text to print before name of street, but to ignore for sorting.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street_prefix25, "hidden": true, "dataIndex": "street_prefix" }, { "colIndex": 8, "sortable": true, "header": "Street", "editable": true, "tooltip": "(contacts.Partners.street) Name of street, without house number.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street26, "hidden": true, "dataIndex": "street" }, { "colIndex": 9, "sortable": true, "header": "No.", "editable": true, "tooltip": "(contacts.Partners.street_no) House number.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_no27, "hidden": true, "dataIndex": "street_no" }, { "colIndex": 10, "sortable": true, "header": "Box", "editable": true, "tooltip": "(contacts.Partners.street_box) Text to print after street nuber on the same line.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_box28, "hidden": true, "dataIndex": "street_box" }, { "colIndex": 11, "sortable": true, "header": "Address line after street", "editable": true, "tooltip": "(contacts.Partners.addr2) Address line to print below street line.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr229, "hidden": true, "dataIndex": "addr2" }, { "colIndex": 12, "sortable": true, "header": "Language", "editable": true, "tooltip": "(contacts.Partners.language) Die Sprache, in der Dokumente ausgestellt werden sollen.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language30, "hidden": true, "dataIndex": "language" }, { "colIndex": 13, "sortable": true, "header": "URL", "editable": true, "tooltip": "(contacts.Partners.url) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": url31, "hidden": true, "dataIndex": "url" }, { "colIndex": 14, "sortable": true, "header": "Phone", "editable": true, "tooltip": "(contacts.Partners.phone) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": phone32, "hidden": true, "dataIndex": "phone" }, { "colIndex": 15, "sortable": true, "header": "GSM", "editable": true, "tooltip": "(contacts.Partners.gsm) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": gsm33, "hidden": true, "dataIndex": "gsm" }, { "colIndex": 16, "sortable": true, "header": "Fax", "editable": true, "tooltip": "(contacts.Partners.fax) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": fax34, "hidden": true, "dataIndex": "fax" }, { "colIndex": 17, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(contacts.Partners.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks35, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 18, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(contacts.Partners.vat_regime) The default VAT regime for         sales and purchases of this partner.", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime36, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 19, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(contacts.Partners.payment_term) The default payment term for sales invoices to this customer.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term37, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 20, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Partners.invoice_recipient) ", "filter": { "type": "string" }, "header": "Invoicing address", "renderer": Lino.fk_renderer('invoice_recipientHidden','Lino.contacts.Partners.detail'), "dataIndex": "invoice_recipient", "hidden": true, "editor": invoice_recipient38 }, new Lino.NullNumberColumn({ "colIndex": 21, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.Partners.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id39, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.contacts.Partners.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Partners.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.print_labels = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"print_labels",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.Partners.insertPanel = Ext.extend(Lino.contacts.Partners.InsertFormPanel,{
  empty_title: "New Partners",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/contacts/Partners",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Partners.detail;
    this.ls_insert_handler = Lino.contacts.Partners.insert;
    Lino.contacts.Partners.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Partners.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.Partners.insertPanel(p);
});
Lino.contacts.Partners.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.Partners.detailPanel = Ext.extend(Lino.contacts.Partners.DetailFormPanel,{
  empty_title: "Detail Partners",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  ls_url: "/contacts/Partners",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Partners.detail;
    this.ls_insert_handler = Lino.contacts.Partners.insert;
    Lino.contacts.Partners.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Partners.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Partners.detailPanel(p);
});
Lino.contacts.Partners.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Partners.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Partners.GridPanel(p);
});
Lino.contacts.Partners.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Partners","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.Persons
Lino.contacts.Persons.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/Persons",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/Persons','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Persons','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Persons','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true }, { "itemId": "print_labels", "menu_item_text": "Labels", "tooltip": "Generate mailing labels for these recipients", "panel_btn_handler": Lino.list_action_handler('/contacts/Persons','print_labels','GET',Lino.get_current_grid_config), "text": "Labels", "overflowText": "Labels", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/Persons','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "merge_row", "menu_item_text": "Merge", "tooltip": "Merge this object into another object of same class.", "panel_btn_handler": Lino.param_action_handler(Lino.contacts.Persons.merge_row), "iconCls": "x-tbar-arrow_join", "overflowText": "Merge", "auto_save": true }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  cell_edit : true,
  title : "Persons",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 39,
  ls_store_fields : [ { "name": "name_column" }, { "name": "address_column" }, { "name": "email" }, { "name": "phone" }, { "name": "gsm" }, { "type": "int", "name": "id" }, { "name": "language" }, 'languageHidden', { "name": "country" }, 'countryHidden', { "name": "city" }, 'cityHidden', { "name": "zip_code" }, { "name": "region" }, 'regionHidden', { "name": "addr1" }, { "name": "street_prefix" }, { "name": "street" }, { "name": "street_no" }, { "name": "street_box" }, { "name": "addr2" }, { "name": "name" }, { "name": "url" }, { "name": "fax" }, { "name": "remarks" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "invoice_recipient" }, 'invoice_recipientHidden', { "name": "first_name" }, { "name": "middle_name" }, { "name": "last_name" }, { "name": "gender" }, 'genderHidden', { "name": "birth_date" }, { "name": "title" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 14,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Persons.detail;
    this.ls_insert_handler = Lino.contacts.Persons.insert;
    var ww = this.containing_window;
    var name_column_disp1332 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var address_column_disp1333 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var email1334 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var phone1335 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var gsm1336 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var id1337 = new Ext.form.NumberField({ "selectOnFocus": true });
    var language1338 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var country1339 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/country", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Country..." });
    var city1340 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "forceSelection": false, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/city", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var zip_code1341 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var region1342 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/region", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var addr11343 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_prefix1344 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street1345 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_no1346 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var street_box1347 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var addr21348 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var name1349 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var url1350 = new Lino.URLField({ "selectOnFocus": true, "maxLength": 200 });
    var fax1351 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var remarks1352 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var vat_regime1353 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatRegimes) });
    var payment_term1354 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var invoice_recipient1355 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Persons/invoice_recipient", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var first_name1356 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var middle_name1357 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var last_name1358 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var gender1359 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.Genders) });
    var birth_date1360 = new Lino.IncompleteDateField({ "selectOnFocus": true });
    var title1361 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    this.before_row_edit = function(record) {
      city1340.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city1340.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      region1342.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      country1339.on('change',Lino.chooser_handler(city1340,'country'));
      region1342.on('change',Lino.chooser_handler(city1340,'region'));
      country1339.on('change',Lino.chooser_handler(region1342,'country'));
      Lino.contacts.Persons.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "Name", "colIndex": 0, "sortable": false, "dataIndex": "name_column", "width": Lino.chars2width(21), "editable": false, "tooltip": "(contacts.Persons.name_column) " }, { "header": "Address", "colIndex": 1, "sortable": false, "dataIndex": "address_column", "width": Lino.chars2width(31), "editable": false, "tooltip": "(contacts.Persons.address_column) " }, { "colIndex": 2, "sortable": true, "header": "E-Mail", "editable": true, "tooltip": "(contacts.Persons.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email1334, "dataIndex": "email" }, { "colIndex": 3, "sortable": true, "header": "Phone", "editable": true, "tooltip": "(contacts.Persons.phone) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": phone1335, "dataIndex": "phone" }, { "colIndex": 4, "sortable": true, "header": "GSM", "editable": true, "tooltip": "(contacts.Persons.gsm) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": gsm1336, "dataIndex": "gsm" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.Persons.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1337, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 6, "sortable": true, "header": "Language", "editable": true, "tooltip": "(contacts.Persons.language) Die Sprache, in der Dokumente ausgestellt werden sollen.", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": language1338, "dataIndex": "language" }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Persons.country) ", "filter": { "type": "string" }, "header": "Country", "renderer": Lino.fk_renderer('countryHidden','Lino.countries.Countries.detail'), "dataIndex": "country", "hidden": true, "editor": country1339 }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Persons.city) ", "filter": { "type": "string" }, "header": "City", "renderer": Lino.fk_renderer('cityHidden','Lino.countries.Places.detail'), "dataIndex": "city", "hidden": true, "editor": city1340 }, { "colIndex": 9, "sortable": true, "header": "Zip code", "editable": true, "tooltip": "(contacts.Persons.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": zip_code1341, "hidden": true, "dataIndex": "zip_code" }, { "colIndex": 10, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Persons.region) ", "filter": { "type": "string" }, "header": "Region", "renderer": Lino.fk_renderer('regionHidden','Lino.countries.Places.detail'), "dataIndex": "region", "hidden": true, "editor": region1342 }, { "colIndex": 11, "sortable": true, "header": "Address line before street", "editable": true, "tooltip": "(contacts.Persons.addr1) Address line before street", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr11343, "hidden": true, "dataIndex": "addr1" }, { "colIndex": 12, "sortable": true, "header": "Street prefix", "editable": true, "tooltip": "(contacts.Persons.street_prefix) Text to print before name of street, but to ignore for sorting.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street_prefix1344, "hidden": true, "dataIndex": "street_prefix" }, { "colIndex": 13, "sortable": true, "header": "Street", "editable": true, "tooltip": "(contacts.Persons.street) Name of street, without house number.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street1345, "hidden": true, "dataIndex": "street" }, { "colIndex": 14, "sortable": true, "header": "No.", "editable": true, "tooltip": "(contacts.Persons.street_no) House number.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_no1346, "hidden": true, "dataIndex": "street_no" }, { "colIndex": 15, "sortable": true, "header": "Box", "editable": true, "tooltip": "(contacts.Persons.street_box) Text to print after street nuber on the same line.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_box1347, "hidden": true, "dataIndex": "street_box" }, { "colIndex": 16, "sortable": true, "header": "Address line after street", "editable": true, "tooltip": "(contacts.Persons.addr2) Address line to print below street line.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr21348, "hidden": true, "dataIndex": "addr2" }, { "colIndex": 17, "sortable": true, "header": "Name", "editable": true, "tooltip": "(contacts.Persons.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1349, "hidden": true, "dataIndex": "name" }, { "colIndex": 18, "sortable": true, "header": "URL", "editable": true, "tooltip": "(contacts.Persons.url) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": url1350, "hidden": true, "dataIndex": "url" }, { "colIndex": 19, "sortable": true, "header": "Fax", "editable": true, "tooltip": "(contacts.Persons.fax) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": fax1351, "hidden": true, "dataIndex": "fax" }, { "colIndex": 20, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(contacts.Persons.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks1352, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 21, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(contacts.Persons.vat_regime) The default VAT regime for         sales and purchases of this partner.", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime1353, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 22, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(contacts.Persons.payment_term) The default payment term for sales invoices to this customer.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term1354, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 23, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Persons.invoice_recipient) ", "filter": { "type": "string" }, "header": "Invoicing address", "renderer": Lino.fk_renderer('invoice_recipientHidden','Lino.contacts.Partners.detail'), "dataIndex": "invoice_recipient", "hidden": true, "editor": invoice_recipient1355 }, { "colIndex": 24, "sortable": true, "header": "First name", "editable": true, "tooltip": "(contacts.Persons.first_name) First or given name.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": first_name1356, "hidden": true, "dataIndex": "first_name" }, { "colIndex": 25, "sortable": true, "header": "Middle name", "editable": true, "tooltip": "(contacts.Persons.middle_name) Space-separated list of all middle names.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": middle_name1357, "hidden": true, "dataIndex": "middle_name" }, { "colIndex": 26, "sortable": true, "header": "Last name", "editable": true, "tooltip": "(contacts.Persons.last_name) Last name (family name).", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": last_name1358, "hidden": true, "dataIndex": "last_name" }, { "colIndex": 27, "sortable": true, "header": "Gender", "editable": true, "tooltip": "(contacts.Persons.gender) ", "filter": { "type": "string" }, "width": Lino.chars2width(10), "editor": gender1359, "hidden": true, "dataIndex": "gender" }, { "colIndex": 28, "sortable": true, "header": "Birth date", "editable": true, "tooltip": "(contacts.Persons.birth_date) Uncomplete dates are allowed, e.g. \n\"00.00.1980\" means \"some day in 1980\", \n\"00.07.1980\" means \"in July 1980\"\nor \"23.07.0000\" means \"on a 23th of July\".", "filter": { "type": "string" }, "width": Lino.chars2width(13), "editor": birth_date1360, "hidden": true, "dataIndex": "birth_date" }, { "colIndex": 29, "sortable": true, "header": "Title", "editable": true, "tooltip": "(contacts.Persons.title) Text to print before allocation and name as part of the first address line.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1361, "hidden": true, "dataIndex": "title" } ];
    Lino.contacts.Persons.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Persons.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.print_labels = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"print_labels",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.Persons.insertPanel = Ext.extend(Lino.contacts.Persons.InsertFormPanel,{
  empty_title: "New Persons",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/contacts/Persons",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Persons.detail;
    this.ls_insert_handler = Lino.contacts.Persons.insert;
    Lino.contacts.Persons.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Persons.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.Persons.insertPanel(p);
});
Lino.contacts.Persons.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.Persons.detailPanel = Ext.extend(Lino.contacts.Persons.DetailFormPanel,{
  empty_title: "Detail Persons",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "merge_row", "menu_item_text": "Merge", "tooltip": "Merge this object into another object of same class.", "panel_btn_handler": Lino.param_action_handler(Lino.contacts.Persons.merge_row), "iconCls": "x-tbar-arrow_join", "overflowText": "Merge", "auto_save": true }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  ls_url: "/contacts/Persons",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Persons.detail;
    this.ls_insert_handler = Lino.contacts.Persons.insert;
    Lino.contacts.Persons.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Persons.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Persons.detailPanel(p);
});
Lino.contacts.Persons.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Persons.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Persons.GridPanel(p);
});
Lino.contacts.Persons.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Persons","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.Companies
Lino.contacts.Companies.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/Companies",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/Companies','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Companies','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Companies','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true }, { "itemId": "print_labels", "menu_item_text": "Labels", "tooltip": "Generate mailing labels for these recipients", "panel_btn_handler": Lino.list_action_handler('/contacts/Companies','print_labels','GET',Lino.get_current_grid_config), "text": "Labels", "overflowText": "Labels", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/Companies','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "merge_row", "menu_item_text": "Merge", "tooltip": "Merge this object into another object of same class.", "panel_btn_handler": Lino.param_action_handler(Lino.contacts.Companies.merge_row), "iconCls": "x-tbar-arrow_join", "overflowText": "Merge", "auto_save": true }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  cell_edit : true,
  title : "Organizations",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 34,
  ls_store_fields : [ { "name": "name" }, { "name": "email" }, { "name": "country" }, 'countryHidden', { "name": "city" }, 'cityHidden', { "name": "zip_code" }, { "name": "region" }, 'regionHidden', { "name": "addr1" }, { "name": "street_prefix" }, { "name": "street" }, { "name": "street_no" }, { "name": "street_box" }, { "name": "addr2" }, { "name": "language" }, 'languageHidden', { "name": "url" }, { "name": "phone" }, { "name": "gsm" }, { "name": "fax" }, { "name": "remarks" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "invoice_recipient" }, 'invoice_recipientHidden', { "name": "prefix" }, { "name": "type" }, 'typeHidden', { "name": "vat_id" }, { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 32,
  ls_grid_configs : [  ],
  content_type : 14,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Companies.detail;
    this.ls_insert_handler = Lino.contacts.Companies.insert;
    var ww = this.containing_window;
    var name1363 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var email1364 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var country1365 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/country", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Country..." });
    var city1366 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "forceSelection": false, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/city", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var zip_code1367 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var region1368 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/region", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var addr11369 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_prefix1370 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street1371 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_no1372 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var street_box1373 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var addr21374 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var language1375 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var url1376 = new Lino.URLField({ "selectOnFocus": true, "maxLength": 200 });
    var phone1377 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var gsm1378 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var fax1379 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var remarks1380 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var vat_regime1381 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatRegimes) });
    var payment_term1382 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var invoice_recipient1383 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/invoice_recipient", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var prefix1384 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var type1385 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Companies/type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization Type..." });
    var vat_id1386 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var id1387 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
      city1366.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city1366.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      region1368.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      country1365.on('change',Lino.chooser_handler(city1366,'country'));
      region1368.on('change',Lino.chooser_handler(city1366,'region'));
      country1365.on('change',Lino.chooser_handler(region1368,'country'));
      Lino.contacts.Companies.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Name", "editable": true, "tooltip": "(contacts.Companies.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1363, "dataIndex": "name" }, { "colIndex": 1, "sortable": true, "header": "E-Mail", "editable": true, "tooltip": "(contacts.Companies.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email1364, "dataIndex": "email" }, { "colIndex": 2, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Companies.country) ", "filter": { "type": "string" }, "header": "Country", "renderer": Lino.fk_renderer('countryHidden','Lino.countries.Countries.detail'), "dataIndex": "country", "hidden": true, "editor": country1365 }, { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Companies.city) ", "filter": { "type": "string" }, "header": "City", "renderer": Lino.fk_renderer('cityHidden','Lino.countries.Places.detail'), "dataIndex": "city", "hidden": true, "editor": city1366 }, { "colIndex": 4, "sortable": true, "header": "Zip code", "editable": true, "tooltip": "(contacts.Companies.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": zip_code1367, "hidden": true, "dataIndex": "zip_code" }, { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Companies.region) ", "filter": { "type": "string" }, "header": "Region", "renderer": Lino.fk_renderer('regionHidden','Lino.countries.Places.detail'), "dataIndex": "region", "hidden": true, "editor": region1368 }, { "colIndex": 6, "sortable": true, "header": "Address line before street", "editable": true, "tooltip": "(contacts.Companies.addr1) Address line before street", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr11369, "hidden": true, "dataIndex": "addr1" }, { "colIndex": 7, "sortable": true, "header": "Street prefix", "editable": true, "tooltip": "(contacts.Companies.street_prefix) Text to print before name of street, but to ignore for sorting.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street_prefix1370, "hidden": true, "dataIndex": "street_prefix" }, { "colIndex": 8, "sortable": true, "header": "Street", "editable": true, "tooltip": "(contacts.Companies.street) Name of street, without house number.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street1371, "hidden": true, "dataIndex": "street" }, { "colIndex": 9, "sortable": true, "header": "No.", "editable": true, "tooltip": "(contacts.Companies.street_no) House number.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_no1372, "hidden": true, "dataIndex": "street_no" }, { "colIndex": 10, "sortable": true, "header": "Box", "editable": true, "tooltip": "(contacts.Companies.street_box) Text to print after street nuber on the same line.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_box1373, "hidden": true, "dataIndex": "street_box" }, { "colIndex": 11, "sortable": true, "header": "Address line after street", "editable": true, "tooltip": "(contacts.Companies.addr2) Address line to print below street line.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr21374, "hidden": true, "dataIndex": "addr2" }, { "colIndex": 12, "sortable": true, "header": "Language", "editable": true, "tooltip": "(contacts.Companies.language) Die Sprache, in der Dokumente ausgestellt werden sollen.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1375, "hidden": true, "dataIndex": "language" }, { "colIndex": 13, "sortable": true, "header": "URL", "editable": true, "tooltip": "(contacts.Companies.url) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": url1376, "hidden": true, "dataIndex": "url" }, { "colIndex": 14, "sortable": true, "header": "Phone", "editable": true, "tooltip": "(contacts.Companies.phone) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": phone1377, "hidden": true, "dataIndex": "phone" }, { "colIndex": 15, "sortable": true, "header": "GSM", "editable": true, "tooltip": "(contacts.Companies.gsm) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": gsm1378, "hidden": true, "dataIndex": "gsm" }, { "colIndex": 16, "sortable": true, "header": "Fax", "editable": true, "tooltip": "(contacts.Companies.fax) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": fax1379, "hidden": true, "dataIndex": "fax" }, { "colIndex": 17, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(contacts.Companies.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks1380, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 18, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(contacts.Companies.vat_regime) The default VAT regime for         sales and purchases of this partner.", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime1381, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 19, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(contacts.Companies.payment_term) The default payment term for sales invoices to this customer.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term1382, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 20, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.Companies.invoice_recipient) ", "filter": { "type": "string" }, "header": "Invoicing address", "renderer": Lino.fk_renderer('invoice_recipientHidden','Lino.contacts.Partners.detail'), "dataIndex": "invoice_recipient", "hidden": true, "editor": invoice_recipient1383 }, { "colIndex": 21, "sortable": true, "header": "prefix", "editable": true, "tooltip": "(contacts.Companies.prefix) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": prefix1384, "hidden": true, "dataIndex": "prefix" }, { "colIndex": 22, "sortable": true, "header": "Company type", "editable": true, "tooltip": "(contacts.Companies.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": type1385, "hidden": true, "dataIndex": "type" }, { "colIndex": 23, "sortable": true, "header": "VAT id", "editable": true, "tooltip": "(contacts.Companies.vat_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": vat_id1386, "hidden": true, "dataIndex": "vat_id" }, new Lino.NullNumberColumn({ "colIndex": 24, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.Companies.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1387, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.contacts.Companies.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Companies.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.print_labels = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"print_labels",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.Companies.insertPanel = Ext.extend(Lino.contacts.Companies.InsertFormPanel,{
  empty_title: "New Organizations",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/contacts/Companies",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Companies.detail;
    this.ls_insert_handler = Lino.contacts.Companies.insert;
    Lino.contacts.Companies.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Companies.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.Companies.insertPanel(p);
});
Lino.contacts.Companies.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.Companies.detailPanel = Ext.extend(Lino.contacts.Companies.DetailFormPanel,{
  empty_title: "Detail Organizations",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "merge_row", "menu_item_text": "Merge", "tooltip": "Merge this object into another object of same class.", "panel_btn_handler": Lino.param_action_handler(Lino.contacts.Companies.merge_row), "iconCls": "x-tbar-arrow_join", "overflowText": "Merge", "auto_save": true }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  ls_url: "/contacts/Companies",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.Companies.detail;
    this.ls_insert_handler = Lino.contacts.Companies.insert;
    Lino.contacts.Companies.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Companies.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Companies.detailPanel(p);
});
Lino.contacts.Companies.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Companies.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Companies.GridPanel(p);
});
Lino.contacts.Companies.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Companies","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.RoleTypes
Lino.contacts.RoleTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/RoleTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/RoleTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/RoleTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/RoleTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/RoleTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Functions",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 4,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 10,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1389 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1390 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1391 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.RoleTypes.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1389, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(contacts.RoleTypes.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1390, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(contacts.RoleTypes.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1391, "dataIndex": "name_et" } ];
    Lino.contacts.RoleTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.RoleTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RoleTypes","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RoleTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.RoleTypes.GridPanel(p);
});

// js_render_GridPanel_class contacts.Roles
Lino.contacts.Roles.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/Roles",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/Roles','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Roles','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/Roles','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/Roles','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Contact Persons",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "type" }, 'typeHidden', { "name": "person" }, 'personHidden', { "name": "company" }, 'companyHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 13,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1393 = new Ext.form.NumberField({ "selectOnFocus": true });
    var type1394 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Roles/type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var person1395 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Roles/person", "method": "GET" }) }), "emptyText": "Select a Person..." });
    var company1396 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/Roles/company", "method": "GET" }) }), "emptyText": "Select a Organization..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.Roles.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1393, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Contact Role", "editable": true, "tooltip": "(contacts.Roles.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": type1394, "dataIndex": "type" }, { "colIndex": 2, "sortable": true, "header": "Person", "editable": true, "tooltip": "(contacts.Roles.person) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('personHidden','Lino.contacts.Persons.detail'), "dataIndex": "person", "editor": person1395 }, { "colIndex": 3, "sortable": true, "header": "Organization", "editable": true, "tooltip": "(contacts.Roles.company) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "editor": company1396 } ];
    Lino.contacts.Roles.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.Roles.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/Roles","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.Roles.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.Roles.GridPanel(p);
});

// js_render_GridPanel_class accounts.Charts
Lino.accounts.Charts.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/accounts/Charts",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/accounts/Charts','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/Charts','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/Charts','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/accounts/Charts','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Account Charts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 4,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 20,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Charts.detail;
    this.ls_insert_handler = Lino.accounts.Charts.insert;
    var ww = this.containing_window;
    var id1398 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1399 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1400 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.Charts.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1398, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(accounts.Charts.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1399, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(accounts.Charts.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1400, "dataIndex": "name_et" } ];
    Lino.accounts.Charts.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Charts.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Charts.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Charts.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Charts.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.Charts.insertPanel = Ext.extend(Lino.accounts.Charts.InsertFormPanel,{
  empty_title: "New Account Charts",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/accounts/Charts",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Charts.detail;
    this.ls_insert_handler = Lino.accounts.Charts.insert;
    Lino.accounts.Charts.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Charts.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.accounts.Charts.insertPanel(p);
});
Lino.accounts.Charts.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Charts.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Charts.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.Charts.detailPanel = Ext.extend(Lino.accounts.Charts.DetailFormPanel,{
  empty_title: "Detail Account Charts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/accounts/Charts",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Charts.detail;
    this.ls_insert_handler = Lino.accounts.Charts.insert;
    Lino.accounts.Charts.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Charts.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.Charts.detailPanel(p);
});
Lino.accounts.Charts.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Charts.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.Charts.GridPanel(p);
});
Lino.accounts.Charts.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Charts","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class accounts.Groups
Lino.accounts.Groups.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/accounts/Groups",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/accounts/Groups','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/Groups','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/Groups','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/accounts/Groups','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Account Groups",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 9,
  ls_store_fields : [ { "name": "chart" }, 'chartHidden', { "name": "ref" }, { "name": "name" }, { "name": "name_et" }, { "name": "account_type" }, 'account_typeHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 7,
  ls_grid_configs : [  ],
  content_type : 19,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Groups.detail;
    this.ls_insert_handler = Lino.accounts.Groups.insert;
    var ww = this.containing_window;
    var chart1402 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/Groups/chart", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account Chart..." });
    var ref1403 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 20 });
    var name1404 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1405 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var account_type1406 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.accounts.AccountTypes) });
    var id1407 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Account Chart", "editable": true, "tooltip": "(accounts.Groups.chart) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('chartHidden','Lino.accounts.Charts.detail'), "dataIndex": "chart", "editor": chart1402 }, { "colIndex": 1, "sortable": true, "header": "ref", "editable": true, "tooltip": "(accounts.Groups.ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": ref1403, "dataIndex": "ref" }, { "colIndex": 2, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(accounts.Groups.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1404, "dataIndex": "name" }, { "colIndex": 3, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(accounts.Groups.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1405, "dataIndex": "name_et" }, { "colIndex": 4, "sortable": true, "header": "Account Type", "editable": true, "tooltip": "(accounts.Groups.account_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(17), "editor": account_type1406, "dataIndex": "account_type" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.Groups.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1407, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.accounts.Groups.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Groups.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Groups.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Groups.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Groups.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.Groups.insertPanel = Ext.extend(Lino.accounts.Groups.InsertFormPanel,{
  empty_title: "New Account Groups",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/accounts/Groups",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Groups.detail;
    this.ls_insert_handler = Lino.accounts.Groups.insert;
    Lino.accounts.Groups.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Groups.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.accounts.Groups.insertPanel(p);
});
Lino.accounts.Groups.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Groups.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Groups.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.Groups.detailPanel = Ext.extend(Lino.accounts.Groups.DetailFormPanel,{
  empty_title: "Detail Account Groups",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/accounts/Groups",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Groups.detail;
    this.ls_insert_handler = Lino.accounts.Groups.insert;
    Lino.accounts.Groups.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Groups.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.Groups.detailPanel(p);
});
Lino.accounts.Groups.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Groups.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.Groups.GridPanel(p);
});
Lino.accounts.Groups.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Groups","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class accounts.Accounts
Lino.accounts.Accounts.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/accounts/Accounts",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/accounts/Accounts','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/Accounts','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/Accounts','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/accounts/Accounts','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Accounts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 16,
  ls_store_fields : [ { "name": "ref" }, { "name": "name" }, { "name": "name_et" }, { "name": "group" }, 'groupHidden', { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "chart" }, 'chartHidden', { "name": "type" }, 'typeHidden', { "type": "boolean", "name": "sales_allowed" }, { "type": "boolean", "name": "purchases_allowed" }, { "type": "boolean", "name": "wages_allowed" }, { "type": "boolean", "name": "clearable" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 18,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Accounts.detail;
    this.ls_insert_handler = Lino.accounts.Accounts.insert;
    var ww = this.containing_window;
    var ref1409 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 20 });
    var name1410 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1411 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var group1412 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/Accounts/group", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account Group..." });
    var id1413 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno1414 = new Ext.form.NumberField({ "selectOnFocus": true });
    var chart1415 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/Accounts/chart", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account Chart..." });
    var type1416 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.accounts.AccountTypes });
    var sales_allowed1417 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var purchases_allowed1418 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var wages_allowed1419 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var clearable1420 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "ref", "editable": true, "tooltip": "(accounts.Accounts.ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": ref1409, "dataIndex": "ref" }, { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(accounts.Accounts.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1410, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(accounts.Accounts.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1411, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": true, "header": "Account Group", "editable": true, "tooltip": "(accounts.Accounts.group) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('groupHidden','Lino.accounts.Groups.detail'), "dataIndex": "group", "editor": group1412 }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.Accounts.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1413, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.Accounts.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1414, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(accounts.Accounts.chart) ", "filter": { "type": "string" }, "header": "Account Chart", "renderer": Lino.fk_renderer('chartHidden','Lino.accounts.Charts.detail'), "dataIndex": "chart", "hidden": true, "editor": chart1415 }, { "colIndex": 7, "sortable": true, "header": "Account Type", "editable": true, "tooltip": "(accounts.Accounts.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(17), "editor": type1416, "hidden": true, "dataIndex": "type" }, { "colIndex": 8, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.Accounts.sales_allowed) ", "filter": { "type": "boolean" }, "header": "Sales", "dataIndex": "sales_allowed", "hidden": true }, { "colIndex": 9, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.Accounts.purchases_allowed) ", "filter": { "type": "boolean" }, "header": "Purchases", "dataIndex": "purchases_allowed", "hidden": true }, { "colIndex": 10, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.Accounts.wages_allowed) ", "filter": { "type": "boolean" }, "header": "Wages", "dataIndex": "wages_allowed", "hidden": true }, { "colIndex": 11, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.Accounts.clearable) ", "filter": { "type": "boolean" }, "header": "Clearable", "dataIndex": "clearable", "hidden": true } ];
    Lino.accounts.Accounts.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Accounts.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.Accounts.insertPanel = Ext.extend(Lino.accounts.Accounts.InsertFormPanel,{
  empty_title: "New Accounts",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/accounts/Accounts",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Accounts.detail;
    this.ls_insert_handler = Lino.accounts.Accounts.insert;
    Lino.accounts.Accounts.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Accounts.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.accounts.Accounts.insertPanel(p);
});
Lino.accounts.Accounts.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.Accounts.detailPanel = Ext.extend(Lino.accounts.Accounts.DetailFormPanel,{
  empty_title: "Detail Accounts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  ls_url: "/accounts/Accounts",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.Accounts.detail;
    this.ls_insert_handler = Lino.accounts.Accounts.insert;
    Lino.accounts.Accounts.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.Accounts.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.Accounts.detailPanel(p);
});
Lino.accounts.Accounts.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.Accounts.GridPanel(p);
});
Lino.accounts.Accounts.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.Accounts.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/Accounts","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class vat.PaymentTerms
Lino.vat.PaymentTerms.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/vat/PaymentTerms",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/vat/PaymentTerms','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/PaymentTerms','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/PaymentTerms','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/vat/PaymentTerms','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Payment Terms",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 7,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "type": "int", "name": "days" }, { "type": "int", "name": "months" }, { "type": "boolean", "name": "end_of_month" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 32,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1422 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1423 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1424 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var days1425 = new Ext.form.NumberField({ "selectOnFocus": true, "allowBlank": false, "value": 0 });
    var months1426 = new Ext.form.NumberField({ "selectOnFocus": true, "allowBlank": false, "value": 0 });
    var end_of_month1427 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(vat.PaymentTerms.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1422, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(vat.PaymentTerms.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1423, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(vat.PaymentTerms.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1424, "dataIndex": "name_et" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(vat.PaymentTerms.days) ", "filter": { "type": "numeric" }, "header": "days", "editor": days1425, "width": Lino.chars2width(6), "dataIndex": "days" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(vat.PaymentTerms.months) ", "filter": { "type": "numeric" }, "header": "months", "editor": months1426, "width": Lino.chars2width(6), "dataIndex": "months" }), { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(vat.PaymentTerms.end_of_month) ", "filter": { "type": "boolean" }, "header": "end of month", "dataIndex": "end_of_month" } ];
    Lino.vat.PaymentTerms.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.vat.PaymentTerms.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/PaymentTerms","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.PaymentTerms.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.vat.PaymentTerms.GridPanel(p);
});

// js_render_GridPanel_class products.ProductCats
Lino.products.ProductCats.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/products/ProductCats",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/products/ProductCats','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/products/ProductCats','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/products/ProductCats','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/products/ProductCats','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Product Categories",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "name": "description" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 16,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.products.ProductCats.detail;
    this.ls_insert_handler = Lino.products.ProductCats.insert;
    var ww = this.containing_window;
    var id1429 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1430 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1431 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var description1432 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(products.ProductCats.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1429, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(products.ProductCats.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1430, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(products.ProductCats.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1431, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": false, "header": "description", "editable": true, "tooltip": "(products.ProductCats.description) ", "filter": { "type": "string" }, "width": Lino.chars2width(61), "editor": description1432, "dataIndex": "description" } ];
    Lino.products.ProductCats.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.products.ProductCats.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductCats.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductCats.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductCats.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.products.ProductCats.insertPanel = Ext.extend(Lino.products.ProductCats.DetailFormPanel,{
  empty_title: "New Product Categories",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/products/ProductCats",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.products.ProductCats.detail;
    this.ls_insert_handler = Lino.products.ProductCats.insert;
    Lino.products.ProductCats.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.products.ProductCats.insert = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.products.ProductCats.insertPanel(p);
});
Lino.products.ProductCats.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductCats.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductCats.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.products.ProductCats.detailPanel = Ext.extend(Lino.products.ProductCats.DetailFormPanel,{
  empty_title: "Detail Product Categories",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/products/ProductCats",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.products.ProductCats.detail;
    this.ls_insert_handler = Lino.products.ProductCats.insert;
    Lino.products.ProductCats.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.products.ProductCats.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.products.ProductCats.detailPanel(p);
});
Lino.products.ProductCats.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductCats.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.products.ProductCats.GridPanel(p);
});
Lino.products.ProductCats.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductCats","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class products.Products
Lino.products.Products.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/products/Products",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/products/Products','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/products/Products','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/products/Products','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/products/Products','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Products",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 13,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "name": "cat" }, 'catHidden', { "name": "vat_class" }, 'vat_classHidden', { "name": "sales_price" }, { "name": "sales_account" }, 'sales_accountHidden', { "name": "purchases_account" }, 'purchases_accountHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 17,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.products.Products.detail;
    this.ls_insert_handler = Lino.products.Products.insert;
    var ww = this.containing_window;
    var id1434 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1435 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1436 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var cat1437 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/Products/cat", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Product Category..." });
    var vat_class1438 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var sales_price1439 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var sales_account1440 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/Products/sales_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var purchases_account1441 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/Products/purchases_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(products.Products.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1434, "width": Lino.chars2width(4), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(products.Products.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1435, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(products.Products.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1436, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": true, "header": "Category", "editable": true, "tooltip": "(products.Products.cat) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('catHidden','Lino.products.ProductCats.detail'), "dataIndex": "cat", "editor": cat1437 }, { "colIndex": 4, "sortable": true, "header": "VAT Class", "editable": true, "tooltip": "(products.Products.vat_class) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": vat_class1438, "dataIndex": "vat_class" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Sales price", "editable": true, "tooltip": "(products.Products.sales_price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(7), "editor": sales_price1439, "dataIndex": "sales_price" }), { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(products.Products.sales_account) ", "filter": { "type": "string" }, "header": "Sales Base account", "renderer": Lino.fk_renderer('sales_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "sales_account", "hidden": true, "editor": sales_account1440 }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(products.Products.purchases_account) ", "filter": { "type": "string" }, "header": "Purchases Base account", "renderer": Lino.fk_renderer('purchases_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "purchases_account", "hidden": true, "editor": purchases_account1441 } ];
    Lino.products.Products.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.products.Products.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.Products.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.Products.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.Products.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.products.Products.insertPanel = Ext.extend(Lino.products.Products.InsertFormPanel,{
  empty_title: "New Products",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/products/Products",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.products.Products.detail;
    this.ls_insert_handler = Lino.products.Products.insert;
    Lino.products.Products.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.products.Products.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.products.Products.insertPanel(p);
});
Lino.products.Products.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.Products.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.Products.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.products.Products.detailPanel = Ext.extend(Lino.products.Products.DetailFormPanel,{
  empty_title: "Detail Products",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/products/Products",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.products.Products.detail;
    this.ls_insert_handler = Lino.products.Products.insert;
    Lino.products.Products.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.products.Products.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.products.Products.detailPanel(p);
});
Lino.products.Products.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.Products.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.products.Products.GridPanel(p);
});
Lino.products.Products.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/Products","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sepa.Accounts
Lino.sepa.Accounts.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sepa/Accounts",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sepa/Accounts','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sepa/Accounts','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sepa/Accounts','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sepa/Accounts','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Accounts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "iban" }, { "name": "bic" }, { "name": "partner" }, 'partnerHidden', { "name": "remark" }, { "type": "boolean", "name": "primary" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 21,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1443 = new Ext.form.NumberField({ "selectOnFocus": true });
    var iban1444 = new Lino.UppercaseTextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 34 });
    var bic1445 = new Lino.UppercaseTextField({ "selectOnFocus": true, "maxLength": 11 });
    var partner1446 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sepa/Accounts/partner", "method": "GET" }) }), "emptyText": "Select a Partner..." });
    var remark1447 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var primary1448 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sepa.Accounts.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1443, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "IBAN", "editable": true, "tooltip": "(sepa.Accounts.iban) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "renderer": Lino.iban_renderer, "editor": iban1444, "dataIndex": "iban" }, { "colIndex": 2, "sortable": true, "header": "BIC", "editable": true, "tooltip": "(sepa.Accounts.bic) ", "filter": { "type": "string" }, "width": Lino.chars2width(13), "editor": bic1445, "dataIndex": "bic" }, { "colIndex": 3, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(sepa.Accounts.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1446 }, { "colIndex": 4, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(sepa.Accounts.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark1447, "dataIndex": "remark" }, { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(sepa.Accounts.primary) Enabling this field will automatically disable any previous primary account and update the partner's IBAN and BIC", "filter": { "type": "boolean" }, "header": "Primary", "dataIndex": "primary" } ];
    Lino.sepa.Accounts.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sepa.Accounts.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/Accounts","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.Accounts.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sepa.Accounts.GridPanel(p);
});

// js_render_GridPanel_class excerpts.ExcerptTypes
Lino.excerpts.ExcerptTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/excerpts/ExcerptTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Excerpt Types",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 14,
  ls_store_fields : [ { "name": "content_type" }, 'content_typeHidden', { "type": "boolean", "name": "primary" }, { "type": "boolean", "name": "certifying" }, { "name": "name" }, { "name": "name_et" }, { "name": "build_method" }, 'build_methodHidden', { "name": "template" }, { "type": "int", "name": "id" }, { "name": "remark" }, { "name": "body_template" }, { "type": "boolean", "name": "backward_compat" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 22,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptTypes.detail;
    this.ls_insert_handler = Lino.excerpts.ExcerptTypes.insert;
    var ww = this.containing_window;
    var content_type1450 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/content_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a content type..." });
    var primary1451 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var certifying1452 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var name1453 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1454 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var build_method1455 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var template1456 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/template", "method": "GET" }) }) });
    var id1457 = new Ext.form.NumberField({ "selectOnFocus": true });
    var remark1458 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var body_template1459 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptTypes/body_template", "method": "GET" }) }) });
    var backward_compat1460 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
      template1456.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1456.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      body_template1459.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      build_method1455.on('change',Lino.chooser_handler(template1456,'build_method'));
      content_type1450.on('change',Lino.chooser_handler(template1456,'content_type'));
      content_type1450.on('change',Lino.chooser_handler(body_template1459,'content_type'));
      Lino.excerpts.ExcerptTypes.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Model", "editable": true, "tooltip": "(excerpts.ExcerptTypes.content_type) The model that can issue printouts of this type.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('content_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "content_type", "editor": content_type1450 }, { "colIndex": 1, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(excerpts.ExcerptTypes.primary) There's at most one primary type per model.         Enabling this field will automatically make the other         types non-primary.", "filter": { "type": "boolean" }, "header": "Primary", "dataIndex": "primary" }, { "colIndex": 2, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(excerpts.ExcerptTypes.certifying) Whether an excerpt of this type is a unique printout.", "filter": { "type": "boolean" }, "header": "Certifying", "dataIndex": "certifying" }, { "colIndex": 3, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(excerpts.ExcerptTypes.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1453, "dataIndex": "name" }, { "colIndex": 4, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(excerpts.ExcerptTypes.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1454, "dataIndex": "name_et" }, { "colIndex": 5, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.ExcerptTypes.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1455, "dataIndex": "build_method" }, { "colIndex": 6, "sortable": true, "header": "Template", "editable": true, "tooltip": "(excerpts.ExcerptTypes.template) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": template1456, "dataIndex": "template" }, new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.ExcerptTypes.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1457, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 8, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(excerpts.ExcerptTypes.remark) ", "filter": { "type": "string" }, "header": "Remark", "editor": remark1458, "hidden": true, "dataIndex": "remark" }, { "colIndex": 9, "sortable": true, "header": "Body template", "editable": true, "tooltip": "(excerpts.ExcerptTypes.body_template) The body template to be used when         rendering a printable of this type. This is a list of files         with extension `.body.html`.", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": body_template1459, "hidden": true, "dataIndex": "body_template" }, { "colIndex": 10, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(excerpts.ExcerptTypes.backward_compat) Check this to have `this` in template context point to owner instead of excerpt.", "filter": { "type": "boolean" }, "header": "Backward compatible", "dataIndex": "backward_compat", "hidden": true } ];
    Lino.excerpts.ExcerptTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptTypes.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptTypes.insertPanel = Ext.extend(Lino.excerpts.ExcerptTypes.InsertFormPanel,{
  empty_title: "New Excerpt Types",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/excerpts/ExcerptTypes",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptTypes.detail;
    this.ls_insert_handler = Lino.excerpts.ExcerptTypes.insert;
    Lino.excerpts.ExcerptTypes.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptTypes.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.excerpts.ExcerptTypes.insertPanel(p);
});
Lino.excerpts.ExcerptTypes.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptTypes.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptTypes.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptTypes.detailPanel = Ext.extend(Lino.excerpts.ExcerptTypes.DetailFormPanel,{
  empty_title: "Detail Excerpt Types",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/excerpts/ExcerptTypes",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptTypes.detail;
    this.ls_insert_handler = Lino.excerpts.ExcerptTypes.insert;
    Lino.excerpts.ExcerptTypes.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptTypes.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptTypes.detailPanel(p);
});
Lino.excerpts.ExcerptTypes.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptTypes.GridPanel(p);
});
Lino.excerpts.ExcerptTypes.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptTypes","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class excerpts.Excerpts
Lino.excerpts.Excerpts.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/excerpts/Excerpts",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/Excerpts','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/Excerpts','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/Excerpts','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/Excerpts','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 22,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "build_time" }, { "name": "owner" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "name": "user" }, 'userHidden', { "name": "company" }, 'companyHidden', { "name": "contact_person" }, 'contact_personHidden', { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.Excerpts.detail;
    var ww = this.containing_window;
    var id1462 = new Ext.form.NumberField({ "selectOnFocus": true });
    var build_time1463 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var owner_disp1464 = new Ext.form.DisplayField({ "disabled": true });
    var excerpt_type1465 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var user1466 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var company1467 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var contact_person1468 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/contact_person", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Person..." });
    var owner_type1469 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1470 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/owner_id", "method": "GET" }) }) });
    var build_method1471 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var contact_role1472 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/Excerpts/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1473 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
      excerpt_type1465.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1468.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      owner_disp1464.on('change',Lino.chooser_handler(excerpt_type1465,'owner'));
      company1467.on('change',Lino.chooser_handler(contact_person1468,'company'));
      Lino.excerpts.Excerpts.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.Excerpts.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1462, "width": Lino.chars2width(6), "dataIndex": "id" }), { "header": "build time", "colIndex": 1, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.Excerpts.build_time) " }, { "header": "Controlled by", "colIndex": 2, "sortable": false, "dataIndex": "owner", "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.Excerpts.owner) " }, { "colIndex": 3, "sortable": true, "header": "Excerpt Type", "editable": true, "tooltip": "(excerpts.Excerpts.excerpt_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "editor": excerpt_type1465 }, { "colIndex": 4, "sortable": true, "header": "Author", "editable": true, "tooltip": "(excerpts.Excerpts.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1466 }, { "colIndex": 5, "sortable": true, "header": "Recipient (Organization)", "editable": true, "tooltip": "(excerpts.Excerpts.company) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "editor": company1467 }, { "colIndex": 6, "sortable": true, "header": "Recipient (Person)", "editable": true, "tooltip": "(excerpts.Excerpts.contact_person) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('contact_personHidden','Lino.contacts.Persons.detail'), "dataIndex": "contact_person", "editor": contact_person1468 }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.Excerpts.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1469 }, { "colIndex": 8, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.Excerpts.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1470, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 9, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.Excerpts.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1471, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 10, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.Excerpts.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1472, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 11, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.Excerpts.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1473, "hidden": true, "dataIndex": "language" } ];
    Lino.excerpts.Excerpts.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.Excerpts.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.Excerpts.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/Excerpts",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.Excerpts.detail;
    Lino.excerpts.Excerpts.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.Excerpts.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.Excerpts.detailPanel(p);
});
Lino.excerpts.Excerpts.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.Excerpts.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.Excerpts.GridPanel(p);
});
Lino.excerpts.Excerpts.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/Excerpts","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class excerpts.ExcerptsByX
Lino.excerpts.ExcerptsByX.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/excerpts/ExcerptsByX",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByX','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByX','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByX','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByX','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 22,
  ls_store_fields : [ { "name": "build_time" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "name": "owner" }, { "type": "int", "name": "id" }, { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "user" }, 'userHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "company" }, 'companyHidden', { "name": "contact_person" }, 'contact_personHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByX.detail;
    var ww = this.containing_window;
    var build_time1475 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var excerpt_type1476 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var owner_disp1477 = new Ext.form.DisplayField({ "disabled": true });
    var id1478 = new Ext.form.NumberField({ "selectOnFocus": true });
    var owner_type1479 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1480 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/owner_id", "method": "GET" }) }) });
    var user1481 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var build_method1482 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var company1483 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var contact_person1484 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/contact_person", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Person..." });
    var contact_role1485 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByX/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1486 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
      excerpt_type1476.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1484.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      owner_disp1477.on('change',Lino.chooser_handler(excerpt_type1476,'owner'));
      company1483.on('change',Lino.chooser_handler(contact_person1484,'company'));
      Lino.excerpts.ExcerptsByX.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "build time", "colIndex": 0, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.ExcerptsByX.build_time) " }, { "colIndex": 1, "sortable": true, "header": "Excerpt Type", "editable": true, "tooltip": "(excerpts.ExcerptsByX.excerpt_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "editor": excerpt_type1476 }, { "header": "Controlled by", "colIndex": 2, "sortable": false, "dataIndex": "owner", "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.ExcerptsByX.owner) " }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.ExcerptsByX.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1478, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByX.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1479 }, { "colIndex": 5, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.ExcerptsByX.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1480, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByX.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1481 }, { "colIndex": 7, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.ExcerptsByX.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1482, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByX.company) ", "filter": { "type": "string" }, "header": "Recipient (Organization)", "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "hidden": true, "editor": company1483 }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByX.contact_person) ", "filter": { "type": "string" }, "header": "Recipient (Person)", "renderer": Lino.fk_renderer('contact_personHidden','Lino.contacts.Persons.detail'), "dataIndex": "contact_person", "hidden": true, "editor": contact_person1484 }, { "colIndex": 10, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.ExcerptsByX.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1485, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 11, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.ExcerptsByX.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1486, "hidden": true, "dataIndex": "language" } ];
    Lino.excerpts.ExcerptsByX.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByX.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptsByX.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/ExcerptsByX",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByX.detail;
    Lino.excerpts.ExcerptsByX.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByX.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByX.detailPanel(p);
});
Lino.excerpts.ExcerptsByX.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByX.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByX.GridPanel(p);
});
Lino.excerpts.ExcerptsByX.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByX","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class ledger.Journals
Lino.ledger.Journals.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/ledger/Journals",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/Journals','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Journals','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Journals','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/Journals','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Journals",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 21,
  ls_store_fields : [ { "name": "ref" }, { "name": "name" }, { "name": "name_et" }, { "name": "trade_type" }, 'trade_typeHidden', { "name": "voucher_type" }, 'voucher_typeHidden', { "type": "boolean", "name": "force_sequence" }, { "name": "build_method" }, 'build_methodHidden', { "name": "template" }, { "name": "chart" }, 'chartHidden', { "name": "account" }, 'accountHidden', { "name": "printed_name" }, { "name": "printed_name_et" }, { "type": "boolean", "name": "dc" }, { "type": "int", "name": "seqno" }, { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 19,
  ls_grid_configs : [  ],
  content_type : 24,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Journals.detail;
    this.ls_insert_handler = Lino.ledger.Journals.insert;
    var ww = this.containing_window;
    var ref1488 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 20 });
    var name1489 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1490 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var trade_type1491 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.TradeTypes) });
    var voucher_type1492 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.ledger.VoucherTypes });
    var force_sequence1493 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var build_method1494 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.lino.BuildMethods) });
    var template1495 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Journals/template", "method": "GET" }) }) });
    var chart1496 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Journals/chart", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account Chart..." });
    var account1497 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Journals/account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var printed_name1498 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 100 });
    var printed_name_et1499 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 100 });
    var dc1500 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    var seqno1501 = new Ext.form.NumberField({ "selectOnFocus": true });
    var id1502 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
      template1495.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1495.setContextValue('voucher_type', record ? record.data['voucher_typeHidden'] : undefined);
      account1497.setContextValue('chart', record ? record.data['chartHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      build_method1494.on('change',Lino.chooser_handler(template1495,'build_method'));
      voucher_type1492.on('change',Lino.chooser_handler(template1495,'voucher_type'));
      chart1496.on('change',Lino.chooser_handler(account1497,'chart'));
      Lino.ledger.Journals.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "ref", "editable": true, "tooltip": "(ledger.Journals.ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(6), "editor": ref1488, "dataIndex": "ref" }, { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(ledger.Journals.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1489, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(ledger.Journals.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1490, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": true, "header": "Trade Type", "editable": true, "tooltip": "(ledger.Journals.trade_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(13), "editor": trade_type1491, "dataIndex": "trade_type" }, { "colIndex": 4, "sortable": true, "header": "voucher type", "editable": true, "tooltip": "(ledger.Journals.voucher_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(46), "editor": voucher_type1492, "dataIndex": "voucher_type" }, { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.Journals.force_sequence) ", "filter": { "type": "boolean" }, "header": "Force chronological sequence", "dataIndex": "force_sequence" }, { "colIndex": 6, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(ledger.Journals.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1494, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 7, "sortable": true, "header": "Template", "editable": true, "tooltip": "(ledger.Journals.template) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": template1495, "hidden": true, "dataIndex": "template" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Journals.chart) ", "filter": { "type": "string" }, "header": "Account Chart", "renderer": Lino.fk_renderer('chartHidden','Lino.accounts.Charts.detail'), "dataIndex": "chart", "hidden": true, "editor": chart1496 }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Journals.account) ", "filter": { "type": "string" }, "header": "Account", "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "hidden": true, "editor": account1497 }, { "colIndex": 10, "sortable": true, "header": "printed name", "editable": true, "tooltip": "(ledger.Journals.printed_name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": printed_name1498, "hidden": true, "dataIndex": "printed_name" }, { "colIndex": 11, "sortable": true, "header": "printed name (et)", "editable": true, "tooltip": "(ledger.Journals.printed_name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": printed_name_et1499, "hidden": true, "dataIndex": "printed_name_et" }, { "colIndex": 12, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.Journals.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc", "hidden": true }, new Lino.NullNumberColumn({ "colIndex": 13, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Journals.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1501, "width": Lino.chars2width(6), "dataIndex": "seqno" }), new Lino.NullNumberColumn({ "colIndex": 14, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Journals.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1502, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.ledger.Journals.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Journals.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.Journals.insertPanel = Ext.extend(Lino.ledger.Journals.InsertFormPanel,{
  empty_title: "New Journals",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/ledger/Journals",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Journals.detail;
    this.ls_insert_handler = Lino.ledger.Journals.insert;
    Lino.ledger.Journals.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Journals.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.ledger.Journals.insertPanel(p);
});
Lino.ledger.Journals.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.Journals.detailPanel = Ext.extend(Lino.ledger.Journals.DetailFormPanel,{
  empty_title: "Detail Journals",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  ls_url: "/ledger/Journals",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Journals.detail;
    this.ls_insert_handler = Lino.ledger.Journals.insert;
    Lino.ledger.Journals.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Journals.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.Journals.detailPanel(p);
});
Lino.ledger.Journals.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.Journals.GridPanel(p);
});
Lino.ledger.Journals.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Journals.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Journals","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class ledger.Vouchers
Lino.ledger.Vouchers.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "emptyText": "No data to display." },
  ls_url : "/ledger/Vouchers",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/Vouchers','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Vouchers','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Vouchers','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/Vouchers','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Vouchers",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 12,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "number" }, { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "disabled_actions" } ],
  pk_index : 2,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var date1504 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var number1505 = new Ext.form.NumberField({ "selectOnFocus": true });
    var id1506 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user1507 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Vouchers/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal1508 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Vouchers/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1509 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration1510 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1511 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Vouchers/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(ledger.Vouchers.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1504, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Vouchers.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1505, "width": Lino.chars2width(6), "dataIndex": "number" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Vouchers.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1506, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Vouchers.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1507 }, { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Vouchers.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1508 }, { "colIndex": 5, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(ledger.Vouchers.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1509, "hidden": true, "dataIndex": "year" }, { "colIndex": 6, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(ledger.Vouchers.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1510, "hidden": true, "dataIndex": "narration" }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Vouchers.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1511 } ];
    Lino.ledger.Vouchers.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Vouchers.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Vouchers","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Vouchers.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Vouchers","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Vouchers.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Vouchers","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Vouchers.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.Vouchers.GridPanel(p);
});

// js_render_GridPanel_class ledger.Movements
Lino.ledger.Movements.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "emptyText": "No data to display." },
  ls_url : "/ledger/Movements",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/Movements','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Movements','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Movements','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/Movements','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Movements",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "name": "voucher_link" }, { "name": "account" }, 'accountHidden', { "name": "debit" }, { "name": "credit" }, { "type": "int", "name": "id" }, { "name": "voucher" }, 'voucherHidden', { "type": "int", "name": "seqno" }, { "name": "partner" }, 'partnerHidden', { "name": "amount" }, { "type": "boolean", "name": "dc" }, { "name": "match" }, { "type": "boolean", "name": "satisfied" }, { "name": "disabled_actions" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var voucher_link_disp1513 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var account1514 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/account", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account..." });
    var debit1515 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var credit1516 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var id1517 = new Ext.form.NumberField({ "selectOnFocus": true });
    var voucher1518 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Voucher..." });
    var seqno1519 = new Ext.form.NumberField({ "selectOnFocus": true, "allowBlank": false });
    var partner1520 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var amount1521 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var dc1522 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    var match1523 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Movements/match", "method": "GET" }) }) });
    var satisfied1524 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
      match1523.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
      match1523.setContextValue('account', record ? record.data['accountHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner1520.on('change',Lino.chooser_handler(match1523,'partner'));
      account1514.on('change',Lino.chooser_handler(match1523,'account'));
      Lino.ledger.Movements.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "Voucher", "colIndex": 0, "sortable": false, "dataIndex": "voucher_link", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.Movements.voucher_link) " }, { "colIndex": 1, "sortable": true, "header": "Account", "editable": true, "tooltip": "(ledger.Movements.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account1514 }, new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 2, "sortable": false, "dataIndex": "debit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.Movements.debit) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 3, "sortable": false, "dataIndex": "credit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.Movements.credit) " }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Movements.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1517, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "header": "Voucher", "editable": true, "tooltip": "(ledger.Movements.voucher) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": voucher1518, "hidden": true, "dataIndex": "voucher" }, new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Movements.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1519, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Movements.partner) ", "filter": { "type": "string" }, "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "hidden": true, "editor": partner1520 }, new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "header": "amount", "editable": true, "tooltip": "(ledger.Movements.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount1521, "hidden": true, "dataIndex": "amount" }), { "colIndex": 9, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.Movements.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc", "hidden": true }, { "colIndex": 10, "sortable": true, "header": "Match", "editable": true, "tooltip": "(ledger.Movements.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1523, "hidden": true, "dataIndex": "match" }, { "colIndex": 11, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.Movements.satisfied) ", "filter": { "type": "boolean" }, "header": "Satisfied", "dataIndex": "satisfied", "hidden": true } ];
    Lino.ledger.Movements.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Movements.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Movements","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Movements.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Movements","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Movements.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Movements","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Movements.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Movements.ParamsPanel({});
  return new Lino.ledger.Movements.GridPanel(p);
});

// js_render_GridPanel_class ledger.Invoices
Lino.ledger.Invoices.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/ledger/Invoices",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/Invoices','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Invoices','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Invoices','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/Invoices','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Invoices",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 27,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "id" }, { "type": "int", "name": "number" }, { "name": "partner" }, 'partnerHidden', { "name": "total_incl" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "total_base" }, { "name": "total_vat" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "match" }, { "name": "your_ref" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 1,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Invoices.detail;
    this.ls_insert_handler = Lino.ledger.Invoices.insert;
    var ww = this.containing_window;
    var date1526 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var id1527 = new Ext.form.NumberField({ "selectOnFocus": true });
    var number1528 = new Ext.form.NumberField({ "selectOnFocus": true });
    var partner1529 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/partner", "method": "GET" }) }), "emptyText": "Select a Partner..." });
    var total_incl1530 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var user1531 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal1532 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1533 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration1534 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1535 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var total_base1536 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1537 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var vat_regime1538 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.vat.VatRegimes });
    var payment_term1539 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var match1540 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/Invoices/match", "method": "GET" }) }) });
    var your_ref1541 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var due_date1542 = new Lino.DateField({ "selectOnFocus": true });
    var state1543 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.ledger.InvoiceStates });
    this.before_row_edit = function(record) {
      match1540.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner1529.on('change',Lino.chooser_handler(match1540,'partner'));
      Lino.ledger.Invoices.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(ledger.Invoices.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1526, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Invoices.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1527, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.Invoices.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1528, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 3, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(ledger.Invoices.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1529 }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(ledger.Invoices.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1530, "dataIndex": "total_incl" }), { "colIndex": 5, "sortable": true, "header": "Author", "editable": true, "tooltip": "(ledger.Invoices.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1531 }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Invoices.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1532 }, { "colIndex": 7, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(ledger.Invoices.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1533, "hidden": true, "dataIndex": "year" }, { "colIndex": 8, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(ledger.Invoices.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1534, "hidden": true, "dataIndex": "narration" }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.Invoices.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1535 }, new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(ledger.Invoices.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1536, "hidden": true, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 11, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(ledger.Invoices.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1537, "hidden": true, "dataIndex": "total_vat" }), { "colIndex": 12, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(ledger.Invoices.vat_regime) ", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime1538, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 13, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(ledger.Invoices.payment_term) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term1539, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 14, "sortable": true, "header": "Match", "editable": true, "tooltip": "(ledger.Invoices.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1540, "hidden": true, "dataIndex": "match" }, { "colIndex": 15, "sortable": true, "header": "Your reference", "editable": true, "tooltip": "(ledger.Invoices.your_ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": your_ref1541, "hidden": true, "dataIndex": "your_ref" }, { "colIndex": 16, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(ledger.Invoices.due_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Due date", "editor": due_date1542, "hidden": true, "width": Lino.chars2width(14), "dataIndex": "due_date" }, { "colIndex": 17, "sortable": true, "header": "State", "editable": true, "tooltip": "(ledger.Invoices.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1543, "hidden": true, "dataIndex": "state" } ];
    Lino.ledger.Invoices.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Invoices.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.Invoices.insertPanel = Ext.extend(Lino.ledger.Invoices.InsertFormPanel,{
  empty_title: "New Invoices",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/ledger/Invoices",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Invoices.detail;
    this.ls_insert_handler = Lino.ledger.Invoices.insert;
    Lino.ledger.Invoices.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Invoices.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.ledger.Invoices.insertPanel(p);
});
Lino.ledger.Invoices.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.Invoices.detailPanel = Ext.extend(Lino.ledger.Invoices.DetailFormPanel,{
  empty_title: "Detail Invoices",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/ledger/Invoices",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Invoices.detail;
    this.ls_insert_handler = Lino.ledger.Invoices.insert;
    Lino.ledger.Invoices.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Invoices.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.Invoices.detailPanel(p);
});
Lino.ledger.Invoices.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Invoices.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Invoices.ParamsPanel({});
  return new Lino.ledger.Invoices.GridPanel(p);
});
Lino.ledger.Invoices.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Invoices","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.ShippingModes
Lino.sales.ShippingModes.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sales/ShippingModes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/ShippingModes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/ShippingModes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/ShippingModes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/ShippingModes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Shipping Modes",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "name": "price" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 31,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1545 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1546 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1547 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var price1548 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.ShippingModes.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1545, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(sales.ShippingModes.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1546, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(sales.ShippingModes.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1547, "dataIndex": "name_et" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "price", "editable": true, "tooltip": "(sales.ShippingModes.price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": price1548, "dataIndex": "price" }) ];
    Lino.sales.ShippingModes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.ShippingModes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ShippingModes","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ShippingModes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.ShippingModes.GridPanel(p);
});

// js_render_GridPanel_class sales.Invoices
Lino.sales.Invoices.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sales/Invoices",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/Invoices','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/Invoices','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/Invoices','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/Invoices','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  cell_edit : true,
  title : "Invoices",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 36,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "partner" }, 'partnerHidden', { "name": "total_incl" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "type": "int", "name": "number" }, { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "total_base" }, { "name": "total_vat" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "printed_by" }, 'printed_byHidden', { "name": "match" }, { "name": "language" }, 'languageHidden', { "name": "your_ref" }, { "name": "shipping_mode" }, 'shipping_modeHidden', { "name": "subject" }, { "name": "intro" }, { "name": "discount" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.Invoices.detail;
    this.ls_insert_handler = Lino.sales.Invoices.insert;
    var ww = this.containing_window;
    var id1550 = new Ext.form.NumberField({ "selectOnFocus": true });
    var date1551 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var partner1552 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/partner", "method": "GET" }) }), "emptyText": "Select a Partner..." });
    var total_incl1553 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var user1554 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal1555 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1556 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number1557 = new Ext.form.NumberField({ "selectOnFocus": true });
    var narration1558 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1559 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var total_base1560 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1561 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var vat_regime1562 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.vat.VatRegimes });
    var payment_term1563 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var printed_by1564 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Excerpt..." });
    var match1565 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/match", "method": "GET" }) }) });
    var language1566 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var your_ref1567 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var shipping_mode1568 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/Invoices/shipping_mode", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Shipping Mode..." });
    var subject1569 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var intro1570 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var discount1571 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var due_date1572 = new Lino.DateField({ "selectOnFocus": true });
    var state1573 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.sales.InvoiceStates });
    this.before_row_edit = function(record) {
      match1565.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner1552.on('change',Lino.chooser_handler(match1565,'partner'));
      Lino.sales.Invoices.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.Invoices.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1550, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.Invoices.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1551, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 2, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(sales.Invoices.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1552 }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.Invoices.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1553, "dataIndex": "total_incl" }), { "colIndex": 4, "sortable": true, "header": "Author", "editable": true, "tooltip": "(sales.Invoices.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1554 }, { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.Invoices.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1555 }, { "colIndex": 6, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(sales.Invoices.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1556, "hidden": true, "dataIndex": "year" }, new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.Invoices.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1557, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 8, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(sales.Invoices.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1558, "hidden": true, "dataIndex": "narration" }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.Invoices.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1559 }, new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.Invoices.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1560, "hidden": true, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 11, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.Invoices.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1561, "hidden": true, "dataIndex": "total_vat" }), { "colIndex": 12, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(sales.Invoices.vat_regime) ", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime1562, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 13, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(sales.Invoices.payment_term) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term1563, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 14, "sortable": true, "width": Lino.chars2width(21), "editable": false, "tooltip": "(sales.Invoices.printed_by) ", "filter": { "type": "string" }, "header": "Printed", "renderer": Lino.fk_renderer('printed_byHidden','Lino.excerpts.Excerpts.detail'), "hidden": true, "dataIndex": "printed_by" }, { "colIndex": 15, "sortable": true, "header": "Match", "editable": true, "tooltip": "(sales.Invoices.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1565, "hidden": true, "dataIndex": "match" }, { "colIndex": 16, "sortable": true, "header": "Language", "editable": true, "tooltip": "(sales.Invoices.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1566, "hidden": true, "dataIndex": "language" }, { "colIndex": 17, "sortable": true, "header": "Your reference", "editable": true, "tooltip": "(sales.Invoices.your_ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": your_ref1567, "hidden": true, "dataIndex": "your_ref" }, { "colIndex": 18, "sortable": true, "header": "Shipping Mode", "editable": true, "tooltip": "(sales.Invoices.shipping_mode) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": shipping_mode1568, "hidden": true, "dataIndex": "shipping_mode" }, { "colIndex": 19, "sortable": true, "header": "Subject line", "editable": true, "tooltip": "(sales.Invoices.subject) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": subject1569, "hidden": true, "dataIndex": "subject" }, { "colIndex": 20, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(sales.Invoices.intro) ", "filter": { "type": "string" }, "header": "Introductive Text", "editor": intro1570, "hidden": true, "dataIndex": "intro" }, new Lino.NullNumberColumn({ "colIndex": 21, "sortable": true, "header": "Discount", "editable": true, "tooltip": "(sales.Invoices.discount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(8), "editor": discount1571, "hidden": true, "dataIndex": "discount" }), { "colIndex": 22, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.Invoices.due_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date of payment", "editor": due_date1572, "hidden": true, "width": Lino.chars2width(14), "dataIndex": "due_date" }, { "colIndex": 23, "sortable": true, "header": "State", "editable": true, "tooltip": "(sales.Invoices.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1573, "hidden": true, "dataIndex": "state" } ];
    Lino.sales.Invoices.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.Invoices.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.Invoices.insertPanel = Ext.extend(Lino.sales.Invoices.InsertFormPanel,{
  empty_title: "New Invoices",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/sales/Invoices",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.Invoices.detail;
    this.ls_insert_handler = Lino.sales.Invoices.insert;
    Lino.sales.Invoices.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.Invoices.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.sales.Invoices.insertPanel(p);
});
Lino.sales.Invoices.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.Invoices.detailPanel = Ext.extend(Lino.sales.Invoices.DetailFormPanel,{
  empty_title: "Detail Invoices",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  ls_url: "/sales/Invoices",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.Invoices.detail;
    this.ls_insert_handler = Lino.sales.Invoices.insert;
    Lino.sales.Invoices.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.Invoices.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.Invoices.detailPanel(p);
});
Lino.sales.Invoices.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.clear_printed = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"clear_printed",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.Invoices.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.sales.Invoices.ParamsPanel({});
  return new Lino.sales.Invoices.GridPanel(p);
});
Lino.sales.Invoices.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/Invoices","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.DocumentsToSign
Lino.sales.DocumentsToSign.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sales/DocumentsToSign",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/DocumentsToSign','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/DocumentsToSign','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/DocumentsToSign','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/DocumentsToSign','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  cell_edit : true,
  title : "Invoices",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "type": "int", "name": "number" }, { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "partner" }, 'partnerHidden', { "name": "subject" }, { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "voucher_ptr" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 8,
  ls_grid_configs : [  ],
  content_type : 30,
  ls_id_property : "voucher_ptr",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.DocumentsToSign.detail;
    this.ls_insert_handler = Lino.sales.DocumentsToSign.insert;
    var ww = this.containing_window;
    var number1575 = new Ext.form.NumberField({ "selectOnFocus": true });
    var date1576 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var partner1577 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/DocumentsToSign/partner", "method": "GET" }) }), "emptyText": "Select a Partner..." });
    var subject1578 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var total_incl1579 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_base1580 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1581 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.DocumentsToSign.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1575, "width": Lino.chars2width(5), "dataIndex": "number" }), { "colIndex": 1, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.DocumentsToSign.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1576, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 2, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(sales.DocumentsToSign.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1577 }, { "colIndex": 3, "sortable": true, "header": "Subject line", "editable": true, "tooltip": "(sales.DocumentsToSign.subject) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": subject1578, "dataIndex": "subject" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.DocumentsToSign.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1579, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.DocumentsToSign.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1580, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.DocumentsToSign.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1581, "dataIndex": "total_vat" }) ];
    Lino.sales.DocumentsToSign.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.DocumentsToSign.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.DocumentsToSign.insertPanel = Ext.extend(Lino.sales.Invoices.InsertFormPanel,{
  empty_title: "New Invoices",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/sales/DocumentsToSign",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.DocumentsToSign.detail;
    this.ls_insert_handler = Lino.sales.DocumentsToSign.insert;
    Lino.sales.DocumentsToSign.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.DocumentsToSign.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.sales.DocumentsToSign.insertPanel(p);
});
Lino.sales.DocumentsToSign.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.DocumentsToSign.detailPanel = Ext.extend(Lino.sales.Invoices.DetailFormPanel,{
  empty_title: "Detail Invoices",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  ls_url: "/sales/DocumentsToSign",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.DocumentsToSign.detail;
    this.ls_insert_handler = Lino.sales.DocumentsToSign.insert;
    Lino.sales.DocumentsToSign.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.DocumentsToSign.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.DocumentsToSign.detailPanel(p);
});
Lino.sales.DocumentsToSign.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.clear_printed = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"clear_printed",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.DocumentsToSign.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.sales.Invoices.ParamsPanel({});
  return new Lino.sales.DocumentsToSign.GridPanel(p);
});
Lino.sales.DocumentsToSign.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/DocumentsToSign","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class declarations.Declarations
Lino.declarations.Declarations.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/declarations/Declarations",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/declarations/Declarations','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/Declarations','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/Declarations','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/declarations/Declarations','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "VAT declarations",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 25,
  ls_store_fields : [ { "name": "year" }, 'yearHidden', { "name": "period" }, 'periodHidden', { "name": "workflow_buttons" }, { "name": "user" }, 'userHidden', { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "journal" }, 'journalHidden', { "type": "int", "name": "number" }, { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "sales_base" }, { "name": "sales_vat" }, { "name": "purchases_base" }, { "name": "purchases_vat" }, { "name": "purchases_investments" }, { "name": "purchases_ware" }, { "name": "purchases_services" }, { "name": "state" }, 'stateHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 23,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.declarations.Declarations.detail;
    this.ls_insert_handler = Lino.declarations.Declarations.insert;
    var ww = this.containing_window;
    var year1583 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var period1584 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.declarations.DeclarationPeriods });
    var workflow_buttons_disp1585 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var user1586 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/Declarations/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var date1587 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var journal1588 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/Declarations/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var number1589 = new Ext.form.NumberField({ "selectOnFocus": true });
    var narration1590 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1591 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/Declarations/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var sales_base1592 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var sales_vat1593 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_base1594 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_vat1595 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_investments1596 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_ware1597 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_services1598 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var state1599 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.declarations.DeclarationStates });
    var id1600 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(declarations.Declarations.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1583, "dataIndex": "year" }, { "colIndex": 1, "sortable": true, "header": "VAT Period", "editable": true, "tooltip": "(declarations.Declarations.period) ", "filter": { "type": "string" }, "width": Lino.chars2width(13), "editor": period1584, "dataIndex": "period" }, { "header": "Workflow", "colIndex": 2, "sortable": false, "dataIndex": "workflow_buttons", "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.Declarations.workflow_buttons) " }, { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(declarations.Declarations.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1586 }, { "colIndex": 4, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(declarations.Declarations.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1587, "hidden": true, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(declarations.Declarations.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1588 }, new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "format": "0", "editable": true, "tooltip": "(declarations.Declarations.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1589, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 7, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(declarations.Declarations.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1590, "hidden": true, "dataIndex": "narration" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(declarations.Declarations.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1591 }, new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "header": "Sales base", "editable": true, "tooltip": "(declarations.Declarations.sales_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": sales_base1592, "hidden": true, "dataIndex": "sales_base" }), new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "Sales VAT", "editable": true, "tooltip": "(declarations.Declarations.sales_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": sales_vat1593, "hidden": true, "dataIndex": "sales_vat" }), new Lino.NullNumberColumn({ "colIndex": 11, "sortable": true, "header": "Purchases base", "editable": true, "tooltip": "(declarations.Declarations.purchases_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_base1594, "hidden": true, "dataIndex": "purchases_base" }), new Lino.NullNumberColumn({ "colIndex": 12, "sortable": true, "header": "Purchases VAT", "editable": true, "tooltip": "(declarations.Declarations.purchases_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_vat1595, "hidden": true, "dataIndex": "purchases_vat" }), new Lino.NullNumberColumn({ "colIndex": 13, "sortable": true, "header": "Investments", "editable": true, "tooltip": "(declarations.Declarations.purchases_investments) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_investments1596, "hidden": true, "dataIndex": "purchases_investments" }), new Lino.NullNumberColumn({ "colIndex": 14, "sortable": true, "header": "Ware", "editable": true, "tooltip": "(declarations.Declarations.purchases_ware) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_ware1597, "hidden": true, "dataIndex": "purchases_ware" }), new Lino.NullNumberColumn({ "colIndex": 15, "sortable": true, "header": "Services", "editable": true, "tooltip": "(declarations.Declarations.purchases_services) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_services1598, "hidden": true, "dataIndex": "purchases_services" }), { "colIndex": 16, "sortable": true, "header": "State", "editable": true, "tooltip": "(declarations.Declarations.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1599, "dataIndex": "state" }, new Lino.NullNumberColumn({ "colIndex": 17, "sortable": true, "format": "0", "editable": true, "tooltip": "(declarations.Declarations.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1600, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.declarations.Declarations.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.Declarations.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.declarations.Declarations.insertPanel = Ext.extend(Lino.declarations.Declarations.InsertFormPanel,{
  empty_title: "New VAT declarations",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/declarations/Declarations",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.declarations.Declarations.detail;
    this.ls_insert_handler = Lino.declarations.Declarations.insert;
    Lino.declarations.Declarations.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.Declarations.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.declarations.Declarations.insertPanel(p);
});
Lino.declarations.Declarations.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.wf3 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"wf3",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.declarations.Declarations.detailPanel = Ext.extend(Lino.declarations.Declarations.DetailFormPanel,{
  empty_title: "Detail VAT declarations",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/declarations/Declarations",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.declarations.Declarations.detail;
    this.ls_insert_handler = Lino.declarations.Declarations.insert;
    Lino.declarations.Declarations.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.Declarations.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.Declarations.detailPanel(p);
});
Lino.declarations.Declarations.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.Declarations.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.Declarations.GridPanel(p);
});
Lino.declarations.Declarations.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/Declarations","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.JournalEntries
Lino.finan.JournalEntries.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/JournalEntries",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntries','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntries','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntries','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntries','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Journal Entries",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "type": "int", "name": "number" }, { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.JournalEntries.detail;
    this.ls_insert_handler = Lino.finan.JournalEntries.insert;
    var ww = this.containing_window;
    var id1602 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user1603 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var date1604 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var journal1605 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1606 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number1607 = new Ext.form.NumberField({ "selectOnFocus": true });
    var narration1608 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1609 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntries/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state1610 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.finan.VoucherStates });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.JournalEntries.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1602, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Author", "editable": true, "tooltip": "(finan.JournalEntries.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1603 }, { "colIndex": 2, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.JournalEntries.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1604, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 3, "sortable": true, "header": "Journal", "editable": true, "tooltip": "(finan.JournalEntries.journal) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "editor": journal1605 }, { "colIndex": 4, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(finan.JournalEntries.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1606, "dataIndex": "year" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.JournalEntries.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1607, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 6, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(finan.JournalEntries.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1608, "dataIndex": "narration" }, { "colIndex": 7, "sortable": true, "header": "VAT declaration", "editable": true, "tooltip": "(finan.JournalEntries.declared_in) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "editor": declared_in1609 }, { "colIndex": 8, "sortable": true, "header": "State", "editable": true, "tooltip": "(finan.JournalEntries.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1610, "dataIndex": "state" } ];
    Lino.finan.JournalEntries.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntries.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.JournalEntries.insertPanel = Ext.extend(Lino.finan.JournalEntries.InsertFormPanel,{
  empty_title: "New Journal Entries",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/finan/JournalEntries",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.JournalEntries.detail;
    this.ls_insert_handler = Lino.finan.JournalEntries.insert;
    Lino.finan.JournalEntries.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntries.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.finan.JournalEntries.insertPanel(p);
});
Lino.finan.JournalEntries.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.JournalEntries.detailPanel = Ext.extend(Lino.finan.JournalEntries.DetailFormPanel,{
  empty_title: "Detail Journal Entries",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/finan/JournalEntries",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.JournalEntries.detail;
    this.ls_insert_handler = Lino.finan.JournalEntries.insert;
    Lino.finan.JournalEntries.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntries.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.JournalEntries.detailPanel(p);
});
Lino.finan.JournalEntries.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntries.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.finan.JournalEntries.ParamsPanel({});
  return new Lino.finan.JournalEntries.GridPanel(p);
});
Lino.finan.JournalEntries.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntries","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.PaymentOrders
Lino.finan.PaymentOrders.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/PaymentOrders",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrders','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrders','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrders','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrders','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Payment Orders",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 17,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "id" }, { "type": "int", "name": "number" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "total" }, { "type": "date", "name": "execution_date", "dateFormat": "d.m.Y" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 1,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.PaymentOrders.detail;
    this.ls_insert_handler = Lino.finan.PaymentOrders.insert;
    var ww = this.containing_window;
    var date1612 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var id1613 = new Ext.form.NumberField({ "selectOnFocus": true });
    var number1614 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user1615 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrders/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal1616 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrders/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1617 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration1618 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1619 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrders/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state1620 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.finan.VoucherStates });
    var total1621 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var execution_date1622 = new Lino.DateField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.PaymentOrders.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1612, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.PaymentOrders.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1613, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.PaymentOrders.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1614, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 3, "sortable": true, "header": "Author", "editable": true, "tooltip": "(finan.PaymentOrders.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1615 }, { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(finan.PaymentOrders.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1616 }, { "colIndex": 5, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(finan.PaymentOrders.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1617, "hidden": true, "dataIndex": "year" }, { "colIndex": 6, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(finan.PaymentOrders.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1618, "hidden": true, "dataIndex": "narration" }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(finan.PaymentOrders.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1619 }, { "colIndex": 8, "sortable": true, "header": "State", "editable": true, "tooltip": "(finan.PaymentOrders.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1620, "hidden": true, "dataIndex": "state" }, new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "header": "Total", "editable": true, "tooltip": "(finan.PaymentOrders.total) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total1621, "hidden": true, "dataIndex": "total" }), { "colIndex": 10, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.PaymentOrders.execution_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Execution date", "editor": execution_date1622, "hidden": true, "width": Lino.chars2width(14), "dataIndex": "execution_date" } ];
    Lino.finan.PaymentOrders.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrders.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.PaymentOrders.insertPanel = Ext.extend(Lino.finan.JournalEntries.InsertFormPanel,{
  empty_title: "New Payment Orders",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/finan/PaymentOrders",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.PaymentOrders.detail;
    this.ls_insert_handler = Lino.finan.PaymentOrders.insert;
    Lino.finan.PaymentOrders.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrders.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.finan.PaymentOrders.insertPanel(p);
});
Lino.finan.PaymentOrders.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.PaymentOrders.detailPanel = Ext.extend(Lino.finan.PaymentOrders.DetailFormPanel,{
  empty_title: "Detail Payment Orders",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/finan/PaymentOrders",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.PaymentOrders.detail;
    this.ls_insert_handler = Lino.finan.PaymentOrders.insert;
    Lino.finan.PaymentOrders.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrders.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.PaymentOrders.detailPanel(p);
});
Lino.finan.PaymentOrders.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrders.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.finan.JournalEntries.ParamsPanel({});
  return new Lino.finan.PaymentOrders.GridPanel(p);
});
Lino.finan.PaymentOrders.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrders","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.BankStatements
Lino.finan.BankStatements.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/BankStatements",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/BankStatements','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatements','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatements','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatements','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Bank Statements",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 17,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "id" }, { "type": "int", "name": "number" }, { "name": "balance1" }, { "name": "balance2" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 1,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.BankStatements.detail;
    this.ls_insert_handler = Lino.finan.BankStatements.insert;
    var ww = this.containing_window;
    var date1624 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var id1625 = new Ext.form.NumberField({ "selectOnFocus": true });
    var number1626 = new Ext.form.NumberField({ "selectOnFocus": true });
    var balance11627 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var balance21628 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var user1629 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatements/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal1630 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatements/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1631 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration1632 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1633 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatements/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state1634 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.finan.VoucherStates });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.BankStatements.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1624, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.BankStatements.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1625, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.BankStatements.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1626, "width": Lino.chars2width(6), "dataIndex": "number" }), new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Old balance", "editable": true, "tooltip": "(finan.BankStatements.balance1) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": balance11627, "dataIndex": "balance1" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "New balance", "editable": true, "tooltip": "(finan.BankStatements.balance2) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": balance21628, "dataIndex": "balance2" }), { "colIndex": 5, "sortable": true, "header": "Author", "editable": true, "tooltip": "(finan.BankStatements.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1629 }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(finan.BankStatements.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1630 }, { "colIndex": 7, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(finan.BankStatements.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1631, "hidden": true, "dataIndex": "year" }, { "colIndex": 8, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(finan.BankStatements.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1632, "hidden": true, "dataIndex": "narration" }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(finan.BankStatements.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1633 }, { "colIndex": 10, "sortable": true, "header": "State", "editable": true, "tooltip": "(finan.BankStatements.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1634, "hidden": true, "dataIndex": "state" } ];
    Lino.finan.BankStatements.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatements.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.BankStatements.insertPanel = Ext.extend(Lino.finan.BankStatements.InsertFormPanel,{
  empty_title: "New Bank Statements",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/finan/BankStatements",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.BankStatements.detail;
    this.ls_insert_handler = Lino.finan.BankStatements.insert;
    Lino.finan.BankStatements.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatements.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.finan.BankStatements.insertPanel(p);
});
Lino.finan.BankStatements.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.BankStatements.detailPanel = Ext.extend(Lino.finan.BankStatements.DetailFormPanel,{
  empty_title: "Detail Bank Statements",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/finan/BankStatements",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.BankStatements.detail;
    this.ls_insert_handler = Lino.finan.BankStatements.insert;
    Lino.finan.BankStatements.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatements.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.BankStatements.detailPanel(p);
});
Lino.finan.BankStatements.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatements.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.finan.JournalEntries.ParamsPanel({});
  return new Lino.finan.BankStatements.GridPanel(p);
});
Lino.finan.BankStatements.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatements","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.InvoiceItemTable
Lino.sales.InvoiceItemTable.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sales/InvoiceItemTable",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemTable','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemTable','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemTable','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemTable','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "invoice items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 16,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "vat_class" }, 'vat_classHidden', { "name": "unit_price" }, { "name": "qty" }, { "name": "title" }, { "name": "product" }, 'productHidden', { "name": "discount" }, { "name": "voucher" }, 'voucherHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 29,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1636 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno1637 = new Ext.form.NumberField({ "selectOnFocus": true });
    var total_incl1638 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_base1639 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1640 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var vat_class1641 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var unit_price1642 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var qty1643 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(6), "maxLength": 6 });
    var title1644 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var product1645 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoiceItemTable/product", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Product..." });
    var discount1646 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var voucher1647 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoiceItemTable/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Invoice..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.InvoiceItemTable.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1636, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.InvoiceItemTable.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1637, "width": Lino.chars2width(6), "dataIndex": "seqno" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.InvoiceItemTable.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1638, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.InvoiceItemTable.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1639, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.InvoiceItemTable.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1640, "dataIndex": "total_vat" }), { "colIndex": 5, "sortable": true, "header": "VAT Class", "editable": true, "tooltip": "(sales.InvoiceItemTable.vat_class) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": vat_class1641, "dataIndex": "vat_class" }, new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "header": "Unit price", "editable": true, "tooltip": "(sales.InvoiceItemTable.unit_price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": unit_price1642, "dataIndex": "unit_price" }), { "colIndex": 7, "sortable": true, "format": "", "align": "right", "editable": true, "tooltip": "(sales.InvoiceItemTable.qty) ", "filter": { "type": "string" }, "header": "Quantity", "editor": qty1643, "width": Lino.chars2width(8), "dataIndex": "qty" }, { "colIndex": 8, "sortable": true, "header": "Description", "editable": true, "tooltip": "(sales.InvoiceItemTable.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1644, "dataIndex": "title" }, { "colIndex": 9, "sortable": true, "header": "Product", "editable": true, "tooltip": "(sales.InvoiceItemTable.product) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('productHidden','Lino.products.Products.detail'), "dataIndex": "product", "editor": product1645 }, new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "Discount", "editable": true, "tooltip": "(sales.InvoiceItemTable.discount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(8), "editor": discount1646, "dataIndex": "discount" }), { "colIndex": 11, "sortable": true, "header": "Invoice", "editable": true, "tooltip": "(sales.InvoiceItemTable.voucher) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('voucherHidden','Lino.sales.Invoices.detail'), "dataIndex": "voucher", "editor": voucher1647 } ];
    Lino.sales.InvoiceItemTable.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoiceItemTable.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.InvoiceItemTable.GridPanel(p);
});
Lino.sales.InvoiceItemTable.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemTable.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemTable","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sessions.SessionTable
Lino.sessions.SessionTable.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sessions/SessionTable",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sessions/SessionTable','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sessions/SessionTable','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sessions/SessionTable','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sessions/SessionTable','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "sessions",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 4,
  ls_store_fields : [ { "name": "session_key" }, { "name": "session_data" }, { "name": "expire_date" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 1,
  ls_id_property : "session_key",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var session_key1649 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 40 });
    var session_data1650 = new Ext.form.TextArea({ "selectOnFocus": true, "allowBlank": false, "growMax": 2000 });
    var expire_date1651 = new Ext.form.DisplayField({ "selectOnFocus": true, "allowBlank": false, "value": "<br>" });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "session key", "editable": true, "tooltip": "(sessions.SessionTable.session_key) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": session_key1649, "dataIndex": "session_key" }, { "colIndex": 1, "sortable": false, "header": "session data", "editable": true, "tooltip": "(sessions.SessionTable.session_data) ", "filter": { "type": "string" }, "width": Lino.chars2width(61), "editor": session_data1650, "dataIndex": "session_data" }, { "colIndex": 2, "sortable": true, "width": Lino.chars2width(17), "editable": true, "tooltip": "(sessions.SessionTable.expire_date) ", "header": "expire date", "editor": expire_date1651, "dataIndex": "expire_date" } ];
    Lino.sessions.SessionTable.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sessions.SessionTable.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sessions/SessionTable","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sessions.SessionTable.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sessions.SessionTable.GridPanel(p);
});

// js_render_GridPanel_class ledger.InvoiceItemTable
Lino.ledger.InvoiceItemTable.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/ledger/InvoiceItemTable",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceItemTable','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceItemTable','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceItemTable','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceItemTable','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Voucher items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 13,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "vat_class" }, 'vat_classHidden', { "name": "title" }, { "name": "voucher" }, 'voucherHidden', { "name": "account" }, 'accountHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 25,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1653 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno1654 = new Ext.form.NumberField({ "selectOnFocus": true });
    var total_incl1655 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_base1656 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1657 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var vat_class1658 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var title1659 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var voucher1660 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoiceItemTable/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Invoice..." });
    var account1661 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoiceItemTable/account", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account..." });
    this.before_row_edit = function(record) {
      account1661.setContextValue('voucher', record ? record.data['voucherHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      voucher1660.on('change',Lino.chooser_handler(account1661,'voucher'));
      Lino.ledger.InvoiceItemTable.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.InvoiceItemTable.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1653, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.InvoiceItemTable.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1654, "width": Lino.chars2width(6), "dataIndex": "seqno" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(ledger.InvoiceItemTable.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1655, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(ledger.InvoiceItemTable.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1656, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(ledger.InvoiceItemTable.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1657, "dataIndex": "total_vat" }), { "colIndex": 5, "sortable": true, "header": "VAT Class", "editable": true, "tooltip": "(ledger.InvoiceItemTable.vat_class) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": vat_class1658, "dataIndex": "vat_class" }, { "colIndex": 6, "sortable": true, "header": "Description", "editable": true, "tooltip": "(ledger.InvoiceItemTable.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1659, "dataIndex": "title" }, { "colIndex": 7, "sortable": true, "header": "Invoice", "editable": true, "tooltip": "(ledger.InvoiceItemTable.voucher) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('voucherHidden','Lino.ledger.Invoices.detail'), "dataIndex": "voucher", "editor": voucher1660 }, { "colIndex": 8, "sortable": true, "header": "Account", "editable": true, "tooltip": "(ledger.InvoiceItemTable.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account1661 } ];
    Lino.ledger.InvoiceItemTable.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.InvoiceItemTable.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.InvoiceItemTable.GridPanel(p);
});
Lino.ledger.InvoiceItemTable.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceItemTable.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceItemTable","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.JournalEntryItemTable
Lino.finan.JournalEntryItemTable.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/JournalEntryItemTable",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntryItemTable','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntryItemTable','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntryItemTable','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntryItemTable','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "match" }, { "name": "title" }, { "name": "amount" }, { "type": "boolean", "name": "dc" }, { "name": "remark" }, { "name": "account" }, 'accountHidden', { "name": "partner" }, 'partnerHidden', { "name": "voucher" }, 'voucherHidden', { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 35,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1663 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno1664 = new Ext.form.NumberField({ "selectOnFocus": true });
    var match1665 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntryItemTable/match", "method": "GET" }) }) });
    var title1666 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var amount1667 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var dc1668 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    var remark1669 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var account1670 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntryItemTable/account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var partner1671 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntryItemTable/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var voucher1672 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntryItemTable/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal Entry..." });
    var date1673 = new Lino.DateField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
      match1665.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner1671.on('change',Lino.chooser_handler(match1665,'partner'));
      Lino.finan.JournalEntryItemTable.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.JournalEntryItemTable.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1663, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.JournalEntryItemTable.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1664, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 2, "sortable": true, "header": "Match", "editable": true, "tooltip": "(finan.JournalEntryItemTable.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1665, "dataIndex": "match" }, { "colIndex": 3, "sortable": true, "header": "Description", "editable": true, "tooltip": "(finan.JournalEntryItemTable.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1666, "dataIndex": "title" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "amount", "editable": true, "tooltip": "(finan.JournalEntryItemTable.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount1667, "dataIndex": "amount" }), { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(finan.JournalEntryItemTable.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc" }, { "colIndex": 6, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(finan.JournalEntryItemTable.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark1669, "dataIndex": "remark" }, { "colIndex": 7, "sortable": true, "header": "Account", "editable": true, "tooltip": "(finan.JournalEntryItemTable.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account1670 }, { "colIndex": 8, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(finan.JournalEntryItemTable.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1671 }, { "colIndex": 9, "sortable": true, "header": "Journal Entry", "editable": true, "tooltip": "(finan.JournalEntryItemTable.voucher) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('voucherHidden','Lino.finan.JournalEntries.detail'), "dataIndex": "voucher", "editor": voucher1672 }, { "colIndex": 10, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.JournalEntryItemTable.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "date", "editor": date1673, "width": Lino.chars2width(14), "dataIndex": "date" } ];
    Lino.finan.JournalEntryItemTable.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntryItemTable.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.JournalEntryItemTable.GridPanel(p);
});
Lino.finan.JournalEntryItemTable.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntryItemTable.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntryItemTable","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.BankStatementItemTable
Lino.finan.BankStatementItemTable.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/BankStatementItemTable",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementItemTable','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementItemTable','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementItemTable','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementItemTable','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "match" }, { "name": "title" }, { "name": "amount" }, { "type": "boolean", "name": "dc" }, { "name": "remark" }, { "name": "account" }, 'accountHidden', { "name": "partner" }, 'partnerHidden', { "name": "voucher" }, 'voucherHidden', { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 37,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1675 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno1676 = new Ext.form.NumberField({ "selectOnFocus": true });
    var match1677 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatementItemTable/match", "method": "GET" }) }) });
    var title1678 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var amount1679 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var dc1680 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    var remark1681 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var account1682 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatementItemTable/account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var partner1683 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatementItemTable/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var voucher1684 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatementItemTable/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Bank Statement..." });
    var date1685 = new Lino.DateField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
      match1677.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner1683.on('change',Lino.chooser_handler(match1677,'partner'));
      Lino.finan.BankStatementItemTable.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.BankStatementItemTable.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1675, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.BankStatementItemTable.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1676, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 2, "sortable": true, "header": "Match", "editable": true, "tooltip": "(finan.BankStatementItemTable.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1677, "dataIndex": "match" }, { "colIndex": 3, "sortable": true, "header": "Description", "editable": true, "tooltip": "(finan.BankStatementItemTable.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1678, "dataIndex": "title" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "amount", "editable": true, "tooltip": "(finan.BankStatementItemTable.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount1679, "dataIndex": "amount" }), { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(finan.BankStatementItemTable.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc" }, { "colIndex": 6, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(finan.BankStatementItemTable.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark1681, "dataIndex": "remark" }, { "colIndex": 7, "sortable": true, "header": "Account", "editable": true, "tooltip": "(finan.BankStatementItemTable.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account1682 }, { "colIndex": 8, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(finan.BankStatementItemTable.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1683 }, { "colIndex": 9, "sortable": true, "header": "Bank Statement", "editable": true, "tooltip": "(finan.BankStatementItemTable.voucher) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('voucherHidden','Lino.finan.BankStatements.detail'), "dataIndex": "voucher", "editor": voucher1684 }, { "colIndex": 10, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.BankStatementItemTable.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "date", "editor": date1685, "width": Lino.chars2width(14), "dataIndex": "date" } ];
    Lino.finan.BankStatementItemTable.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatementItemTable.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.BankStatementItemTable.GridPanel(p);
});
Lino.finan.BankStatementItemTable.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementItemTable.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementItemTable","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.PaymentOrderItemTable
Lino.finan.PaymentOrderItemTable.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/PaymentOrderItemTable",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrderItemTable','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrderItemTable','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrderItemTable','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrderItemTable','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 14,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "match" }, { "name": "title" }, { "name": "amount" }, { "type": "boolean", "name": "dc" }, { "name": "remark" }, { "name": "account" }, 'accountHidden', { "name": "partner" }, 'partnerHidden', { "name": "voucher" }, 'voucherHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 34,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var id1687 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno1688 = new Ext.form.NumberField({ "selectOnFocus": true });
    var match1689 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrderItemTable/match", "method": "GET" }) }) });
    var title1690 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var amount1691 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var dc1692 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    var remark1693 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var account1694 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrderItemTable/account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var partner1695 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrderItemTable/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var voucher1696 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrderItemTable/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Payment Order..." });
    this.before_row_edit = function(record) {
      match1689.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner1695.on('change',Lino.chooser_handler(match1689,'partner'));
      Lino.finan.PaymentOrderItemTable.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1687, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno1688, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 2, "sortable": true, "header": "Match", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1689, "dataIndex": "match" }, { "colIndex": 3, "sortable": true, "header": "Description", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1690, "dataIndex": "title" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "amount", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount1691, "dataIndex": "amount" }), { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(finan.PaymentOrderItemTable.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc" }, { "colIndex": 6, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark1693, "dataIndex": "remark" }, { "colIndex": 7, "sortable": true, "header": "Account", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account1694 }, { "colIndex": 8, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner1695 }, { "colIndex": 9, "sortable": true, "header": "Payment Order", "editable": true, "tooltip": "(finan.PaymentOrderItemTable.voucher) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('voucherHidden','Lino.finan.PaymentOrders.detail'), "dataIndex": "voucher", "editor": voucher1696 } ];
    Lino.finan.PaymentOrderItemTable.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrderItemTable.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.PaymentOrderItemTable.GridPanel(p);
});
Lino.finan.PaymentOrderItemTable.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrderItemTable.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrderItemTable","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class system.MyTextFieldTemplates
Lino.system.MyTextFieldTemplates.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/system/MyTextFieldTemplates",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/system/MyTextFieldTemplates','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/MyTextFieldTemplates','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/MyTextFieldTemplates','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/system/MyTextFieldTemplates','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "My Text Field Templates",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 3,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 5,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.system.MyTextFieldTemplates.detail;
    this.ls_insert_handler = Lino.system.MyTextFieldTemplates.insert;
    var ww = this.containing_window;
    var id1698 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1699 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.MyTextFieldTemplates.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1698, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(system.MyTextFieldTemplates.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1699, "dataIndex": "name" } ];
    Lino.system.MyTextFieldTemplates.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.system.MyTextFieldTemplates.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.MyTextFieldTemplates.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.MyTextFieldTemplates.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.MyTextFieldTemplates.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.MyTextFieldTemplates.insertPanel = Ext.extend(Lino.system.TextFieldTemplates.InsertFormPanel,{
  empty_title: "New My Text Field Templates",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/system/MyTextFieldTemplates",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.MyTextFieldTemplates.detail;
    this.ls_insert_handler = Lino.system.MyTextFieldTemplates.insert;
    Lino.system.MyTextFieldTemplates.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.system.MyTextFieldTemplates.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.system.MyTextFieldTemplates.insertPanel(p);
});
Lino.system.MyTextFieldTemplates.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.MyTextFieldTemplates.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.MyTextFieldTemplates.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.MyTextFieldTemplates.detailPanel = Ext.extend(Lino.system.TextFieldTemplates.DetailFormPanel,{
  empty_title: "Detail My Text Field Templates",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/system/MyTextFieldTemplates",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.MyTextFieldTemplates.detail;
    this.ls_insert_handler = Lino.system.MyTextFieldTemplates.insert;
    Lino.system.MyTextFieldTemplates.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.system.MyTextFieldTemplates.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.MyTextFieldTemplates.detailPanel(p);
});
Lino.system.MyTextFieldTemplates.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.MyTextFieldTemplates.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.MyTextFieldTemplates.GridPanel(p);
});
Lino.system.MyTextFieldTemplates.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/MyTextFieldTemplates","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class users.AuthoritiesGiven
Lino.users.AuthoritiesGiven.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/users/AuthoritiesGiven",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesGiven','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesGiven','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesGiven','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesGiven','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Authorities given",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 4,
  ls_store_fields : [ { "name": "authorized" }, 'authorizedHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 2,
  ls_grid_configs : [  ],
  content_type : 7,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var authorized633 = new Lino.RemoteComboFieldElement({ "preferred_width": 15, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/AuthoritiesGiven/authorized", "method": "GET" }) }), "emptyText": "Select a User..." });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      authorized633.setContextValue('mk',bp['mk']);
      authorized633.setContextValue('mt',bp['mt']);
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "User", "editable": true, "tooltip": "(users.AuthoritiesGiven.authorized) The user who gets authority to act in your name.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('authorizedHidden','Lino.users.Users.detail'), "dataIndex": "authorized", "editor": authorized633 } ];
    Lino.users.AuthoritiesGiven.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.users.AuthoritiesGiven.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesGiven","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesGiven.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.AuthoritiesGiven.GridPanel(p);
});

// js_render_GridPanel_class users.AuthoritiesTaken
Lino.users.AuthoritiesTaken.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/users/AuthoritiesTaken",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesTaken','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesTaken','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesTaken','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/users/AuthoritiesTaken','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Authorities taken",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 4,
  ls_store_fields : [ { "name": "user" }, 'userHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 2,
  ls_grid_configs : [  ],
  content_type : 7,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var user1701 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/users/AuthoritiesTaken/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Author", "editable": true, "tooltip": "(users.AuthoritiesTaken.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user1701 } ];
    Lino.users.AuthoritiesTaken.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.users.AuthoritiesTaken.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/users/AuthoritiesTaken","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.users.AuthoritiesTaken.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.users.AuthoritiesTaken.GridPanel(p);
});

// js_render_GridPanel_class countries.PlacesByPlace
Lino.countries.PlacesByPlace.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/countries/PlacesByPlace",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByPlace','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByPlace','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByPlace','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByPlace','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Subdivisions",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 9,
  ls_store_fields : [ { "name": "name" }, { "name": "name_et" }, { "name": "type" }, 'typeHidden', { "name": "zip_code" }, { "type": "int", "name": "id" }, { "name": "country" }, 'countryHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 9,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.PlacesByPlace.detail;
    this.ls_insert_handler = Lino.countries.PlacesByPlace.insert;
    var ww = this.containing_window;
    var name689 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et690 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var type691 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/PlacesByPlace/type", "method": "GET" }) }) });
    var zip_code692 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(8), "maxLength": 8 });
    var id693 = new Ext.form.NumberField({ "selectOnFocus": true });
    var country694 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/PlacesByPlace/country", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Country..." });
    this.before_row_edit = function(record) {
      type691.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      country694.on('change',Lino.chooser_handler(type691,'country'));
      Lino.countries.PlacesByPlace.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(countries.PlacesByPlace.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name689, "dataIndex": "name" }, { "colIndex": 1, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(countries.PlacesByPlace.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et690, "dataIndex": "name_et" }, { "colIndex": 2, "sortable": true, "header": "Place Type", "editable": true, "tooltip": "(countries.PlacesByPlace.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": type691, "dataIndex": "type" }, { "colIndex": 3, "sortable": true, "header": "zip code", "editable": true, "tooltip": "(countries.PlacesByPlace.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(10), "editor": zip_code692, "dataIndex": "zip_code" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(countries.PlacesByPlace.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id693, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(countries.PlacesByPlace.country) ", "filter": { "type": "string" }, "header": "Country", "renderer": Lino.fk_renderer('countryHidden','Lino.countries.Countries.detail'), "dataIndex": "country", "hidden": true, "editor": country694 } ];
    Lino.countries.PlacesByPlace.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlacesByPlace.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByPlace.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByPlace.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByPlace.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.PlacesByPlace.insertPanel = Ext.extend(Lino.countries.Places.DetailFormPanel,{
  empty_title: "New Subdivisions",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/countries/PlacesByPlace",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.PlacesByPlace.detail;
    this.ls_insert_handler = Lino.countries.PlacesByPlace.insert;
    Lino.countries.PlacesByPlace.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlacesByPlace.insert = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.countries.PlacesByPlace.insertPanel(p);
});
Lino.countries.PlacesByPlace.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByPlace.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByPlace.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.PlacesByPlace.detailPanel = Ext.extend(Lino.countries.Places.DetailFormPanel,{
  empty_title: "Detail Subdivisions",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/countries/PlacesByPlace",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.PlacesByPlace.detail;
    this.ls_insert_handler = Lino.countries.PlacesByPlace.insert;
    Lino.countries.PlacesByPlace.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlacesByPlace.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.PlacesByPlace.detailPanel(p);
});
Lino.countries.PlacesByPlace.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByPlace.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.PlacesByPlace.GridPanel(p);
});
Lino.countries.PlacesByPlace.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByPlace","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class countries.PlacesByCountry
Lino.countries.PlacesByCountry.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/countries/PlacesByCountry",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByCountry','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByCountry','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByCountry','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/countries/PlacesByCountry','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Places",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 9,
  ls_store_fields : [ { "name": "name" }, { "name": "name_et" }, { "name": "type" }, 'typeHidden', { "name": "zip_code" }, { "type": "int", "name": "id" }, { "name": "parent" }, 'parentHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 9,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.PlacesByCountry.detail;
    this.ls_insert_handler = Lino.countries.PlacesByCountry.insert;
    var ww = this.containing_window;
    var name666 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et667 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var type668 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/PlacesByCountry/type", "method": "GET" }) }) });
    var zip_code669 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(8), "maxLength": 8 });
    var id670 = new Ext.form.NumberField({ "selectOnFocus": true });
    var parent671 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/countries/PlacesByCountry/parent", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      type668.setContextValue('mk',bp['mk']);
      type668.setContextValue('mt',bp['mt']);
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(countries.PlacesByCountry.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name666, "dataIndex": "name" }, { "colIndex": 1, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(countries.PlacesByCountry.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et667, "dataIndex": "name_et" }, { "colIndex": 2, "sortable": true, "header": "Place Type", "editable": true, "tooltip": "(countries.PlacesByCountry.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": type668, "dataIndex": "type" }, { "colIndex": 3, "sortable": true, "header": "zip code", "editable": true, "tooltip": "(countries.PlacesByCountry.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(10), "editor": zip_code669, "dataIndex": "zip_code" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(countries.PlacesByCountry.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id670, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(countries.PlacesByCountry.parent) The superordinate geographic place         of which this place is a part.", "filter": { "type": "string" }, "header": "Part of", "renderer": Lino.fk_renderer('parentHidden','Lino.countries.Places.detail'), "dataIndex": "parent", "hidden": true, "editor": parent671 } ];
    Lino.countries.PlacesByCountry.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlacesByCountry.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByCountry.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByCountry.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByCountry.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.PlacesByCountry.insertPanel = Ext.extend(Lino.countries.Places.DetailFormPanel,{
  empty_title: "New Places",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/countries/PlacesByCountry",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.PlacesByCountry.detail;
    this.ls_insert_handler = Lino.countries.PlacesByCountry.insert;
    Lino.countries.PlacesByCountry.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlacesByCountry.insert = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.countries.PlacesByCountry.insertPanel(p);
});
Lino.countries.PlacesByCountry.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByCountry.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByCountry.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.countries.PlacesByCountry.detailPanel = Ext.extend(Lino.countries.Places.DetailFormPanel,{
  empty_title: "Detail Places",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/countries/PlacesByCountry",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.countries.PlacesByCountry.detail;
    this.ls_insert_handler = Lino.countries.PlacesByCountry.insert;
    Lino.countries.PlacesByCountry.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlacesByCountry.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.PlacesByCountry.detailPanel(p);
});
Lino.countries.PlacesByCountry.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlacesByCountry.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.PlacesByCountry.GridPanel(p);
});
Lino.countries.PlacesByCountry.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlacesByCountry","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.PartnersByCity
Lino.contacts.PartnersByCity.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/PartnersByCity",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCity','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCity','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCity','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true }, { "itemId": "print_labels", "menu_item_text": "Labels", "tooltip": "Generate mailing labels for these recipients", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCity','print_labels','GET',Lino.get_current_grid_config), "text": "Labels", "overflowText": "Labels", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCity','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  cell_edit : true,
  title : "Partners",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 28,
  ls_store_fields : [ { "name": "street" }, { "name": "street_no" }, { "name": "street_box" }, { "name": "addr2" }, { "name": "name" }, { "name": "language" }, 'languageHidden', { "type": "int", "name": "id" }, { "name": "country" }, 'countryHidden', { "name": "zip_code" }, { "name": "region" }, 'regionHidden', { "name": "addr1" }, { "name": "street_prefix" }, { "name": "email" }, { "name": "url" }, { "name": "phone" }, { "name": "gsm" }, { "name": "fax" }, { "name": "remarks" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "invoice_recipient" }, 'invoice_recipientHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 7,
  ls_grid_configs : [  ],
  content_type : 14,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.PartnersByCity.detail;
    this.ls_insert_handler = Lino.contacts.PartnersByCity.insert;
    var ww = this.containing_window;
    var street713 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_no714 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var street_box715 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var addr2716 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var name717 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var language718 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var id719 = new Ext.form.NumberField({ "selectOnFocus": true });
    var country720 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCity/country", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Country..." });
    var zip_code721 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var region722 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCity/region", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var addr1723 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_prefix724 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var email725 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var url726 = new Lino.URLField({ "selectOnFocus": true, "maxLength": 200 });
    var phone727 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var gsm728 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var fax729 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var remarks730 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var vat_regime731 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatRegimes) });
    var payment_term732 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCity/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var invoice_recipient733 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCity/invoice_recipient", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    this.before_row_edit = function(record) {
      region722.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      country720.on('change',Lino.chooser_handler(region722,'country'));
      Lino.contacts.PartnersByCity.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Street", "editable": true, "tooltip": "(contacts.PartnersByCity.street) Name of street, without house number.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street713, "dataIndex": "street" }, { "colIndex": 1, "sortable": true, "header": "No.", "editable": true, "tooltip": "(contacts.PartnersByCity.street_no) House number.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_no714, "dataIndex": "street_no" }, { "colIndex": 2, "sortable": true, "header": "Box", "editable": true, "tooltip": "(contacts.PartnersByCity.street_box) Text to print after street nuber on the same line.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_box715, "dataIndex": "street_box" }, { "colIndex": 3, "sortable": true, "header": "Address line after street", "editable": true, "tooltip": "(contacts.PartnersByCity.addr2) Address line to print below street line.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr2716, "dataIndex": "addr2" }, { "colIndex": 4, "sortable": true, "header": "Name", "editable": true, "tooltip": "(contacts.PartnersByCity.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name717, "dataIndex": "name" }, { "colIndex": 5, "sortable": true, "header": "Language", "editable": true, "tooltip": "(contacts.PartnersByCity.language) Die Sprache, in der Dokumente ausgestellt werden sollen.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language718, "dataIndex": "language" }, new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.PartnersByCity.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id719, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.PartnersByCity.country) ", "filter": { "type": "string" }, "header": "Country", "renderer": Lino.fk_renderer('countryHidden','Lino.countries.Countries.detail'), "dataIndex": "country", "hidden": true, "editor": country720 }, { "colIndex": 8, "sortable": true, "header": "Zip code", "editable": true, "tooltip": "(contacts.PartnersByCity.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": zip_code721, "hidden": true, "dataIndex": "zip_code" }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.PartnersByCity.region) ", "filter": { "type": "string" }, "header": "Region", "renderer": Lino.fk_renderer('regionHidden','Lino.countries.Places.detail'), "dataIndex": "region", "hidden": true, "editor": region722 }, { "colIndex": 10, "sortable": true, "header": "Address line before street", "editable": true, "tooltip": "(contacts.PartnersByCity.addr1) Address line before street", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr1723, "hidden": true, "dataIndex": "addr1" }, { "colIndex": 11, "sortable": true, "header": "Street prefix", "editable": true, "tooltip": "(contacts.PartnersByCity.street_prefix) Text to print before name of street, but to ignore for sorting.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street_prefix724, "hidden": true, "dataIndex": "street_prefix" }, { "colIndex": 12, "sortable": true, "header": "E-Mail", "editable": true, "tooltip": "(contacts.PartnersByCity.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email725, "hidden": true, "dataIndex": "email" }, { "colIndex": 13, "sortable": true, "header": "URL", "editable": true, "tooltip": "(contacts.PartnersByCity.url) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": url726, "hidden": true, "dataIndex": "url" }, { "colIndex": 14, "sortable": true, "header": "Phone", "editable": true, "tooltip": "(contacts.PartnersByCity.phone) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": phone727, "hidden": true, "dataIndex": "phone" }, { "colIndex": 15, "sortable": true, "header": "GSM", "editable": true, "tooltip": "(contacts.PartnersByCity.gsm) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": gsm728, "hidden": true, "dataIndex": "gsm" }, { "colIndex": 16, "sortable": true, "header": "Fax", "editable": true, "tooltip": "(contacts.PartnersByCity.fax) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": fax729, "hidden": true, "dataIndex": "fax" }, { "colIndex": 17, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(contacts.PartnersByCity.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks730, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 18, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(contacts.PartnersByCity.vat_regime) The default VAT regime for         sales and purchases of this partner.", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime731, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 19, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(contacts.PartnersByCity.payment_term) The default payment term for sales invoices to this customer.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term732, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 20, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.PartnersByCity.invoice_recipient) ", "filter": { "type": "string" }, "header": "Invoicing address", "renderer": Lino.fk_renderer('invoice_recipientHidden','Lino.contacts.Partners.detail'), "dataIndex": "invoice_recipient", "hidden": true, "editor": invoice_recipient733 } ];
    Lino.contacts.PartnersByCity.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.PartnersByCity.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.print_labels = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"print_labels",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.PartnersByCity.insertPanel = Ext.extend(Lino.contacts.Partners.InsertFormPanel,{
  empty_title: "New Partners",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/contacts/PartnersByCity",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.PartnersByCity.detail;
    this.ls_insert_handler = Lino.contacts.PartnersByCity.insert;
    Lino.contacts.PartnersByCity.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.PartnersByCity.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.PartnersByCity.insertPanel(p);
});
Lino.contacts.PartnersByCity.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.PartnersByCity.detailPanel = Ext.extend(Lino.contacts.Partners.DetailFormPanel,{
  empty_title: "Detail Partners",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  ls_url: "/contacts/PartnersByCity",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.PartnersByCity.detail;
    this.ls_insert_handler = Lino.contacts.PartnersByCity.insert;
    Lino.contacts.PartnersByCity.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.PartnersByCity.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.PartnersByCity.detailPanel(p);
});
Lino.contacts.PartnersByCity.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCity.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.PartnersByCity.GridPanel(p);
});
Lino.contacts.PartnersByCity.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCity","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.PartnersByCountry
Lino.contacts.PartnersByCountry.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/contacts/PartnersByCountry",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCountry','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCountry','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCountry','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true }, { "itemId": "print_labels", "menu_item_text": "Labels", "tooltip": "Generate mailing labels for these recipients", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCountry','print_labels','GET',Lino.get_current_grid_config), "text": "Labels", "overflowText": "Labels", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/PartnersByCountry','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  cell_edit : true,
  title : "Partners",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 28,
  ls_store_fields : [ { "name": "city" }, 'cityHidden', { "name": "street" }, { "name": "street_no" }, { "name": "name" }, { "name": "language" }, 'languageHidden', { "type": "int", "name": "id" }, { "name": "zip_code" }, { "name": "region" }, 'regionHidden', { "name": "addr1" }, { "name": "street_prefix" }, { "name": "street_box" }, { "name": "addr2" }, { "name": "email" }, { "name": "url" }, { "name": "phone" }, { "name": "gsm" }, { "name": "fax" }, { "name": "remarks" }, { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "invoice_recipient" }, 'invoice_recipientHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 7,
  ls_grid_configs : [  ],
  content_type : 14,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.PartnersByCountry.detail;
    this.ls_insert_handler = Lino.contacts.PartnersByCountry.insert;
    var ww = this.containing_window;
    var city1703 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "forceSelection": false, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCountry/city", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var street1704 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_no1705 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var name1706 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var language1707 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var id1708 = new Ext.form.NumberField({ "selectOnFocus": true });
    var zip_code1709 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var region1710 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCountry/region", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Place..." });
    var addr11711 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_prefix1712 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var street_box1713 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(10), "maxLength": 10 });
    var addr21714 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var email1715 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 75 });
    var url1716 = new Lino.URLField({ "selectOnFocus": true, "maxLength": 200 });
    var phone1717 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var gsm1718 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var fax1719 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var remarks1720 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var vat_regime1721 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatRegimes) });
    var payment_term1722 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCountry/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var invoice_recipient1723 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/PartnersByCountry/invoice_recipient", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      city1703.setContextValue('mk',bp['mk']);
      city1703.setContextValue('mt',bp['mt']);
      city1703.setContextValue('region', record ? record.data['regionHidden'] : undefined);
      var bp = this.get_base_params();
      region1710.setContextValue('mk',bp['mk']);
      region1710.setContextValue('mt',bp['mt']);
    };
    this.onRender = function(ct, position) {
      region1710.on('change',Lino.chooser_handler(city1703,'region'));
      Lino.contacts.PartnersByCountry.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "City", "editable": true, "tooltip": "(contacts.PartnersByCountry.city) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('cityHidden','Lino.countries.Places.detail'), "dataIndex": "city", "editor": city1703 }, { "colIndex": 1, "sortable": true, "header": "Street", "editable": true, "tooltip": "(contacts.PartnersByCountry.street) Name of street, without house number.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street1704, "dataIndex": "street" }, { "colIndex": 2, "sortable": true, "header": "No.", "editable": true, "tooltip": "(contacts.PartnersByCountry.street_no) House number.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_no1705, "dataIndex": "street_no" }, { "colIndex": 3, "sortable": true, "header": "Name", "editable": true, "tooltip": "(contacts.PartnersByCountry.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1706, "dataIndex": "name" }, { "colIndex": 4, "sortable": true, "header": "Language", "editable": true, "tooltip": "(contacts.PartnersByCountry.language) Die Sprache, in der Dokumente ausgestellt werden sollen.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1707, "dataIndex": "language" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.PartnersByCountry.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1708, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 6, "sortable": true, "header": "Zip code", "editable": true, "tooltip": "(contacts.PartnersByCountry.zip_code) ", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": zip_code1709, "hidden": true, "dataIndex": "zip_code" }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.PartnersByCountry.region) ", "filter": { "type": "string" }, "header": "Region", "renderer": Lino.fk_renderer('regionHidden','Lino.countries.Places.detail'), "dataIndex": "region", "hidden": true, "editor": region1710 }, { "colIndex": 8, "sortable": true, "header": "Address line before street", "editable": true, "tooltip": "(contacts.PartnersByCountry.addr1) Address line before street", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr11711, "hidden": true, "dataIndex": "addr1" }, { "colIndex": 9, "sortable": true, "header": "Street prefix", "editable": true, "tooltip": "(contacts.PartnersByCountry.street_prefix) Text to print before name of street, but to ignore for sorting.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": street_prefix1712, "hidden": true, "dataIndex": "street_prefix" }, { "colIndex": 10, "sortable": true, "header": "Box", "editable": true, "tooltip": "(contacts.PartnersByCountry.street_box) Text to print after street nuber on the same line.", "filter": { "type": "string" }, "width": Lino.chars2width(12), "editor": street_box1713, "hidden": true, "dataIndex": "street_box" }, { "colIndex": 11, "sortable": true, "header": "Address line after street", "editable": true, "tooltip": "(contacts.PartnersByCountry.addr2) Address line to print below street line.", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": addr21714, "hidden": true, "dataIndex": "addr2" }, { "colIndex": 12, "sortable": true, "header": "E-Mail", "editable": true, "tooltip": "(contacts.PartnersByCountry.email) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": email1715, "hidden": true, "dataIndex": "email" }, { "colIndex": 13, "sortable": true, "header": "URL", "editable": true, "tooltip": "(contacts.PartnersByCountry.url) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": url1716, "hidden": true, "dataIndex": "url" }, { "colIndex": 14, "sortable": true, "header": "Phone", "editable": true, "tooltip": "(contacts.PartnersByCountry.phone) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": phone1717, "hidden": true, "dataIndex": "phone" }, { "colIndex": 15, "sortable": true, "header": "GSM", "editable": true, "tooltip": "(contacts.PartnersByCountry.gsm) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": gsm1718, "hidden": true, "dataIndex": "gsm" }, { "colIndex": 16, "sortable": true, "header": "Fax", "editable": true, "tooltip": "(contacts.PartnersByCountry.fax) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": fax1719, "hidden": true, "dataIndex": "fax" }, { "colIndex": 17, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(contacts.PartnersByCountry.remarks) ", "filter": { "type": "string" }, "header": "Remarks", "editor": remarks1720, "hidden": true, "dataIndex": "remarks" }, { "colIndex": 18, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(contacts.PartnersByCountry.vat_regime) The default VAT regime for         sales and purchases of this partner.", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime1721, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 19, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(contacts.PartnersByCountry.payment_term) The default payment term for sales invoices to this customer.", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term1722, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 20, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(contacts.PartnersByCountry.invoice_recipient) ", "filter": { "type": "string" }, "header": "Invoicing address", "renderer": Lino.fk_renderer('invoice_recipientHidden','Lino.contacts.Partners.detail'), "dataIndex": "invoice_recipient", "hidden": true, "editor": invoice_recipient1723 } ];
    Lino.contacts.PartnersByCountry.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.PartnersByCountry.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.print_labels = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"print_labels",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.PartnersByCountry.insertPanel = Ext.extend(Lino.contacts.Partners.InsertFormPanel,{
  empty_title: "New Partners",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/contacts/PartnersByCountry",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.PartnersByCountry.detail;
    this.ls_insert_handler = Lino.contacts.PartnersByCountry.insert;
    Lino.contacts.PartnersByCountry.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.PartnersByCountry.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.contacts.PartnersByCountry.insertPanel(p);
});
Lino.contacts.PartnersByCountry.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.contacts.PartnersByCountry.detailPanel = Ext.extend(Lino.contacts.Partners.DetailFormPanel,{
  empty_title: "Detail Partners",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true } ],
  ls_url: "/contacts/PartnersByCountry",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.contacts.PartnersByCountry.detail;
    this.ls_insert_handler = Lino.contacts.PartnersByCountry.insert;
    Lino.contacts.PartnersByCountry.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.PartnersByCountry.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.PartnersByCountry.detailPanel(p);
});
Lino.contacts.PartnersByCountry.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.PartnersByCountry.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.PartnersByCountry.GridPanel(p);
});
Lino.contacts.PartnersByCountry.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/PartnersByCountry","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class contacts.RolesByCompany
Lino.contacts.RolesByCompany.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/contacts/RolesByCompany",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByCompany','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByCompany','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByCompany','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByCompany','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Contact persons",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 6,
  ls_store_fields : [ { "name": "person" }, 'personHidden', { "name": "type" }, 'typeHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 13,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var person865 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/RolesByCompany/person", "method": "GET" }) }), "emptyText": "Select a Person..." });
    var type866 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/RolesByCompany/type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var id867 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Person", "editable": true, "tooltip": "(contacts.RolesByCompany.person) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('personHidden','Lino.contacts.Persons.detail'), "dataIndex": "person", "editor": person865 }, { "colIndex": 1, "sortable": true, "header": "Contact Role", "editable": true, "tooltip": "(contacts.RolesByCompany.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": type866, "dataIndex": "type" }, new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.RolesByCompany.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id867, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.contacts.RolesByCompany.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.RolesByCompany.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByCompany","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByCompany.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.RolesByCompany.GridPanel(p);
});

// js_render_GridPanel_class contacts.RolesByPerson
Lino.contacts.RolesByPerson.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/contacts/RolesByPerson",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByPerson','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByPerson','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByPerson','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/contacts/RolesByPerson','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Contact for",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 6,
  ls_store_fields : [ { "name": "company" }, 'companyHidden', { "name": "type" }, 'typeHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 13,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var company793 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/RolesByPerson/company", "method": "GET" }) }), "emptyText": "Select a Organization..." });
    var type794 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/contacts/RolesByPerson/type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var id795 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Organization", "editable": true, "tooltip": "(contacts.RolesByPerson.company) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "editor": company793 }, { "colIndex": 1, "sortable": true, "header": "Contact Role", "editable": true, "tooltip": "(contacts.RolesByPerson.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": type794, "dataIndex": "type" }, new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(contacts.RolesByPerson.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id795, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.contacts.RolesByPerson.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.contacts.RolesByPerson.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/contacts/RolesByPerson","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.contacts.RolesByPerson.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.contacts.RolesByPerson.GridPanel(p);
});

// js_render_GridPanel_class accounts.GroupsByChart
Lino.accounts.GroupsByChart.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/accounts/GroupsByChart",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/accounts/GroupsByChart','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/GroupsByChart','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/GroupsByChart','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/accounts/GroupsByChart','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Account Groups",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 7,
  ls_store_fields : [ { "name": "ref" }, { "name": "name" }, { "name": "name_et" }, { "name": "account_type" }, 'account_typeHidden', { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 19,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.GroupsByChart.detail;
    this.ls_insert_handler = Lino.accounts.GroupsByChart.insert;
    var ww = this.containing_window;
    var ref897 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 20 });
    var name898 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et899 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var account_type900 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.accounts.AccountTypes) });
    var id901 = new Ext.form.NumberField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "ref", "editable": true, "tooltip": "(accounts.GroupsByChart.ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": ref897, "dataIndex": "ref" }, { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(accounts.GroupsByChart.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name898, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(accounts.GroupsByChart.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et899, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": true, "header": "Account Type", "editable": true, "tooltip": "(accounts.GroupsByChart.account_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(17), "editor": account_type900, "dataIndex": "account_type" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.GroupsByChart.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id901, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }) ];
    Lino.accounts.GroupsByChart.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.GroupsByChart.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.GroupsByChart.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.GroupsByChart.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.GroupsByChart.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.GroupsByChart.insertPanel = Ext.extend(Lino.accounts.Groups.InsertFormPanel,{
  empty_title: "New Account Groups",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/accounts/GroupsByChart",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.GroupsByChart.detail;
    this.ls_insert_handler = Lino.accounts.GroupsByChart.insert;
    Lino.accounts.GroupsByChart.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.GroupsByChart.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.accounts.GroupsByChart.insertPanel(p);
});
Lino.accounts.GroupsByChart.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.GroupsByChart.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.GroupsByChart.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.GroupsByChart.detailPanel = Ext.extend(Lino.accounts.Groups.DetailFormPanel,{
  empty_title: "Detail Account Groups",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/accounts/GroupsByChart",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.GroupsByChart.detail;
    this.ls_insert_handler = Lino.accounts.GroupsByChart.insert;
    Lino.accounts.GroupsByChart.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.GroupsByChart.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.GroupsByChart.detailPanel(p);
});
Lino.accounts.GroupsByChart.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.GroupsByChart.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.GroupsByChart.GridPanel(p);
});
Lino.accounts.GroupsByChart.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/GroupsByChart","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class accounts.AccountsByGroup
Lino.accounts.AccountsByGroup.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/accounts/AccountsByGroup",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/accounts/AccountsByGroup','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/AccountsByGroup','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/AccountsByGroup','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/accounts/AccountsByGroup','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Accounts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 14,
  ls_store_fields : [ { "name": "ref" }, { "name": "name" }, { "name": "name_et" }, { "type": "int", "name": "id" }, { "type": "int", "name": "seqno" }, { "name": "chart" }, 'chartHidden', { "name": "type" }, 'typeHidden', { "type": "boolean", "name": "sales_allowed" }, { "type": "boolean", "name": "purchases_allowed" }, { "type": "boolean", "name": "wages_allowed" }, { "type": "boolean", "name": "clearable" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 3,
  ls_grid_configs : [  ],
  content_type : 18,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.AccountsByGroup.detail;
    this.ls_insert_handler = Lino.accounts.AccountsByGroup.insert;
    var ww = this.containing_window;
    var ref915 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 20 });
    var name916 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et917 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var id918 = new Ext.form.NumberField({ "selectOnFocus": true });
    var seqno919 = new Ext.form.NumberField({ "selectOnFocus": true });
    var chart920 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/accounts/AccountsByGroup/chart", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account Chart..." });
    var type921 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.accounts.AccountTypes });
    var sales_allowed922 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var purchases_allowed923 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var wages_allowed924 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    var clearable925 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "ref", "editable": true, "tooltip": "(accounts.AccountsByGroup.ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": ref915, "dataIndex": "ref" }, { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(accounts.AccountsByGroup.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name916, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(accounts.AccountsByGroup.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et917, "dataIndex": "name_et" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.AccountsByGroup.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id918, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(accounts.AccountsByGroup.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno919, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(accounts.AccountsByGroup.chart) ", "filter": { "type": "string" }, "header": "Account Chart", "renderer": Lino.fk_renderer('chartHidden','Lino.accounts.Charts.detail'), "dataIndex": "chart", "hidden": true, "editor": chart920 }, { "colIndex": 6, "sortable": true, "header": "Account Type", "editable": true, "tooltip": "(accounts.AccountsByGroup.type) ", "filter": { "type": "string" }, "width": Lino.chars2width(17), "editor": type921, "hidden": true, "dataIndex": "type" }, { "colIndex": 7, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.AccountsByGroup.sales_allowed) ", "filter": { "type": "boolean" }, "header": "Sales", "dataIndex": "sales_allowed", "hidden": true }, { "colIndex": 8, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.AccountsByGroup.purchases_allowed) ", "filter": { "type": "boolean" }, "header": "Purchases", "dataIndex": "purchases_allowed", "hidden": true }, { "colIndex": 9, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.AccountsByGroup.wages_allowed) ", "filter": { "type": "boolean" }, "header": "Wages", "dataIndex": "wages_allowed", "hidden": true }, { "colIndex": 10, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(accounts.AccountsByGroup.clearable) ", "filter": { "type": "boolean" }, "header": "Clearable", "dataIndex": "clearable", "hidden": true } ];
    Lino.accounts.AccountsByGroup.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.AccountsByGroup.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.AccountsByGroup.insertPanel = Ext.extend(Lino.accounts.Accounts.InsertFormPanel,{
  empty_title: "New Accounts",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/accounts/AccountsByGroup",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.AccountsByGroup.detail;
    this.ls_insert_handler = Lino.accounts.AccountsByGroup.insert;
    Lino.accounts.AccountsByGroup.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.AccountsByGroup.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.accounts.AccountsByGroup.insertPanel(p);
});
Lino.accounts.AccountsByGroup.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.accounts.AccountsByGroup.detailPanel = Ext.extend(Lino.accounts.Accounts.DetailFormPanel,{
  empty_title: "Detail Accounts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "due", "menu_item_text": "Debts", "tooltip": "Debts", "panel_btn_handler": Lino.row_action_handler('due','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Debts", "auto_save": true }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  ls_url: "/accounts/AccountsByGroup",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.accounts.AccountsByGroup.detail;
    this.ls_insert_handler = Lino.accounts.AccountsByGroup.insert;
    Lino.accounts.AccountsByGroup.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.AccountsByGroup.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.AccountsByGroup.detailPanel(p);
});
Lino.accounts.AccountsByGroup.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.due = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"due",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.AccountsByGroup.GridPanel(p);
});
Lino.accounts.AccountsByGroup.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountsByGroup.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountsByGroup","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class products.ProductsByCategory
Lino.products.ProductsByCategory.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/products/ProductsByCategory",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/products/ProductsByCategory','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/products/ProductsByCategory','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/products/ProductsByCategory','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/products/ProductsByCategory','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Products",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 13,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "name" }, { "name": "name_et" }, { "name": "cat" }, 'catHidden', { "name": "vat_class" }, 'vat_classHidden', { "name": "sales_price" }, { "name": "sales_account" }, 'sales_accountHidden', { "name": "purchases_account" }, 'purchases_accountHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 17,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.products.ProductsByCategory.detail;
    this.ls_insert_handler = Lino.products.ProductsByCategory.insert;
    var ww = this.containing_window;
    var id999 = new Ext.form.NumberField({ "selectOnFocus": true });
    var name1000 = new Ext.form.TextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 200 });
    var name_et1001 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var cat1002 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/ProductsByCategory/cat", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Product Category..." });
    var vat_class1003 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var sales_price1004 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var sales_account1005 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/ProductsByCategory/sales_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var purchases_account1006 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/products/ProductsByCategory/purchases_account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(products.ProductsByCategory.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id999, "width": Lino.chars2width(4), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Designation", "editable": true, "tooltip": "(products.ProductsByCategory.name) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name1000, "dataIndex": "name" }, { "colIndex": 2, "sortable": true, "header": "Designation (et)", "editable": true, "tooltip": "(products.ProductsByCategory.name_et) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": name_et1001, "dataIndex": "name_et" }, { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(products.ProductsByCategory.cat) ", "filter": { "type": "string" }, "header": "Category", "renderer": Lino.fk_renderer('catHidden','Lino.products.ProductCats.detail'), "dataIndex": "cat", "hidden": true, "editor": cat1002 }, { "colIndex": 4, "sortable": true, "header": "VAT Class", "editable": true, "tooltip": "(products.ProductsByCategory.vat_class) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": vat_class1003, "dataIndex": "vat_class" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Sales price", "editable": true, "tooltip": "(products.ProductsByCategory.sales_price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(7), "editor": sales_price1004, "dataIndex": "sales_price" }), { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(products.ProductsByCategory.sales_account) ", "filter": { "type": "string" }, "header": "Sales Base account", "renderer": Lino.fk_renderer('sales_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "sales_account", "hidden": true, "editor": sales_account1005 }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(products.ProductsByCategory.purchases_account) ", "filter": { "type": "string" }, "header": "Purchases Base account", "renderer": Lino.fk_renderer('purchases_accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "purchases_account", "hidden": true, "editor": purchases_account1006 } ];
    Lino.products.ProductsByCategory.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.products.ProductsByCategory.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductsByCategory.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductsByCategory.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductsByCategory.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.products.ProductsByCategory.insertPanel = Ext.extend(Lino.products.Products.InsertFormPanel,{
  empty_title: "New Products",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/products/ProductsByCategory",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.products.ProductsByCategory.detail;
    this.ls_insert_handler = Lino.products.ProductsByCategory.insert;
    Lino.products.ProductsByCategory.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.products.ProductsByCategory.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.products.ProductsByCategory.insertPanel(p);
});
Lino.products.ProductsByCategory.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductsByCategory.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductsByCategory.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.products.ProductsByCategory.detailPanel = Ext.extend(Lino.products.Products.DetailFormPanel,{
  empty_title: "Detail Products",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/products/ProductsByCategory",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.products.ProductsByCategory.detail;
    this.ls_insert_handler = Lino.products.ProductsByCategory.insert;
    Lino.products.ProductsByCategory.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.products.ProductsByCategory.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.products.ProductsByCategory.detailPanel(p);
});
Lino.products.ProductsByCategory.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.products.ProductsByCategory.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.products.ProductsByCategory.GridPanel(p);
});
Lino.products.ProductsByCategory.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/products/ProductsByCategory","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sepa.AccountsByPartner
Lino.sepa.AccountsByPartner.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/sepa/AccountsByPartner",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sepa/AccountsByPartner','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sepa/AccountsByPartner','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sepa/AccountsByPartner','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sepa/AccountsByPartner','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Accounts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "iban" }, { "name": "bic" }, { "name": "remark" }, { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 3,
  ls_grid_configs : [  ],
  content_type : 21,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var iban1725 = new Lino.UppercaseTextField({ "selectOnFocus": true, "allowBlank": false, "maxLength": 34 });
    var bic1726 = new Lino.UppercaseTextField({ "selectOnFocus": true, "maxLength": 11 });
    var remark1727 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "IBAN", "editable": true, "tooltip": "(sepa.AccountsByPartner.iban) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "renderer": Lino.iban_renderer, "editor": iban1725, "dataIndex": "iban" }, { "colIndex": 1, "sortable": true, "header": "BIC", "editable": true, "tooltip": "(sepa.AccountsByPartner.bic) ", "filter": { "type": "string" }, "width": Lino.chars2width(13), "editor": bic1726, "dataIndex": "bic" }, { "colIndex": 2, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(sepa.AccountsByPartner.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark1727, "dataIndex": "remark" } ];
    Lino.sepa.AccountsByPartner.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sepa.AccountsByPartner.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sepa/AccountsByPartner","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sepa.AccountsByPartner.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sepa.AccountsByPartner.GridPanel(p);
});

// js_render_GridPanel_class excerpts.MyExcerpts
Lino.excerpts.MyExcerpts.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/excerpts/MyExcerpts",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/MyExcerpts','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/MyExcerpts','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/MyExcerpts','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/MyExcerpts','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "My Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 20,
  ls_store_fields : [ { "name": "build_time" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "type": "int", "name": "id" }, { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "company" }, 'companyHidden', { "name": "contact_person" }, 'contact_personHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "owner" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 3,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.MyExcerpts.detail;
    var ww = this.containing_window;
    var build_time1729 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var excerpt_type1730 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/MyExcerpts/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var id1731 = new Ext.form.NumberField({ "selectOnFocus": true });
    var owner_type1732 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/MyExcerpts/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1733 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/MyExcerpts/owner_id", "method": "GET" }) }) });
    var build_method1734 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var company1735 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/MyExcerpts/company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var contact_person1736 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/MyExcerpts/contact_person", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Person..." });
    var contact_role1737 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/MyExcerpts/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1738 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var owner_disp1739 = new Ext.form.DisplayField({ "disabled": true });
    this.before_row_edit = function(record) {
      excerpt_type1730.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1736.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      owner_disp1739.on('change',Lino.chooser_handler(excerpt_type1730,'owner'));
      company1735.on('change',Lino.chooser_handler(contact_person1736,'company'));
      Lino.excerpts.MyExcerpts.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "build time", "colIndex": 0, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.MyExcerpts.build_time) " }, { "colIndex": 1, "sortable": true, "header": "Excerpt Type", "editable": true, "tooltip": "(excerpts.MyExcerpts.excerpt_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "editor": excerpt_type1730 }, new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.MyExcerpts.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1731, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.MyExcerpts.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1732 }, { "colIndex": 4, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.MyExcerpts.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1733, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 5, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.MyExcerpts.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1734, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.MyExcerpts.company) ", "filter": { "type": "string" }, "header": "Recipient (Organization)", "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "hidden": true, "editor": company1735 }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.MyExcerpts.contact_person) ", "filter": { "type": "string" }, "header": "Recipient (Person)", "renderer": Lino.fk_renderer('contact_personHidden','Lino.contacts.Persons.detail'), "dataIndex": "contact_person", "hidden": true, "editor": contact_person1736 }, { "colIndex": 8, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.MyExcerpts.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1737, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 9, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.MyExcerpts.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1738, "hidden": true, "dataIndex": "language" }, { "colIndex": 10, "sortable": false, "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.MyExcerpts.owner) ", "header": "Controlled by", "dataIndex": "owner", "hidden": true } ];
    Lino.excerpts.MyExcerpts.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.MyExcerpts.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.MyExcerpts.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail My Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/MyExcerpts",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.MyExcerpts.detail;
    Lino.excerpts.MyExcerpts.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.MyExcerpts.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.MyExcerpts.detailPanel(p);
});
Lino.excerpts.MyExcerpts.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.MyExcerpts.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.MyExcerpts.GridPanel(p);
});
Lino.excerpts.MyExcerpts.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/MyExcerpts","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class excerpts.ExcerptsByType
Lino.excerpts.ExcerptsByType.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/excerpts/ExcerptsByType",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByType','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByType','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByType','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByType','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 22,
  ls_store_fields : [ { "name": "build_time" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "name": "owner" }, { "type": "int", "name": "id" }, { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "user" }, 'userHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "company" }, 'companyHidden', { "name": "contact_person" }, 'contact_personHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByType.detail;
    var ww = this.containing_window;
    var build_time1077 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var excerpt_type1078 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var owner_disp1079 = new Ext.form.DisplayField({ "disabled": true });
    var id1080 = new Ext.form.NumberField({ "selectOnFocus": true });
    var owner_type1081 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1082 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/owner_id", "method": "GET" }) }) });
    var user1083 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var build_method1084 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var company1085 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var contact_person1086 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/contact_person", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Person..." });
    var contact_role1087 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByType/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1088 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
      excerpt_type1078.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1086.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      owner_disp1079.on('change',Lino.chooser_handler(excerpt_type1078,'owner'));
      company1085.on('change',Lino.chooser_handler(contact_person1086,'company'));
      Lino.excerpts.ExcerptsByType.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "build time", "colIndex": 0, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.ExcerptsByType.build_time) " }, { "colIndex": 1, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByType.excerpt_type) ", "filter": { "type": "string" }, "header": "Excerpt Type", "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "hidden": true, "editor": excerpt_type1078 }, { "header": "Controlled by", "colIndex": 2, "sortable": false, "dataIndex": "owner", "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.ExcerptsByType.owner) " }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.ExcerptsByType.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1080, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByType.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1081 }, { "colIndex": 5, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.ExcerptsByType.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1082, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByType.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1083 }, { "colIndex": 7, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.ExcerptsByType.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1084, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByType.company) ", "filter": { "type": "string" }, "header": "Recipient (Organization)", "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "hidden": true, "editor": company1085 }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByType.contact_person) ", "filter": { "type": "string" }, "header": "Recipient (Person)", "renderer": Lino.fk_renderer('contact_personHidden','Lino.contacts.Persons.detail'), "dataIndex": "contact_person", "hidden": true, "editor": contact_person1086 }, { "colIndex": 10, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.ExcerptsByType.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1087, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 11, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.ExcerptsByType.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1088, "hidden": true, "dataIndex": "language" } ];
    Lino.excerpts.ExcerptsByType.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByType.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptsByType.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/ExcerptsByType",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByType.detail;
    Lino.excerpts.ExcerptsByType.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByType.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByType.detailPanel(p);
});
Lino.excerpts.ExcerptsByType.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByType.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByType.GridPanel(p);
});
Lino.excerpts.ExcerptsByType.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByType","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class excerpts.ExcerptsByCompany
Lino.excerpts.ExcerptsByCompany.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/excerpts/ExcerptsByCompany",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByCompany','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByCompany','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByCompany','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByCompany','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 20,
  ls_store_fields : [ { "name": "build_time" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "name": "owner" }, { "type": "int", "name": "id" }, { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "user" }, 'userHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "contact_person" }, 'contact_personHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByCompany.detail;
    var ww = this.containing_window;
    var build_time1741 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var excerpt_type1742 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByCompany/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var owner_disp1743 = new Ext.form.DisplayField({ "disabled": true });
    var id1744 = new Ext.form.NumberField({ "selectOnFocus": true });
    var owner_type1745 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByCompany/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1746 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByCompany/owner_id", "method": "GET" }) }) });
    var user1747 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByCompany/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var build_method1748 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var contact_person1749 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByCompany/contact_person", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Person..." });
    var contact_role1750 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByCompany/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1751 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
      excerpt_type1742.setContextValue('owner', record ? record.data['owner'] : undefined);
      var bp = this.get_base_params();
      contact_person1749.setContextValue('mk',bp['mk']);
      contact_person1749.setContextValue('mt',bp['mt']);
    };
    this.onRender = function(ct, position) {
      owner_disp1743.on('change',Lino.chooser_handler(excerpt_type1742,'owner'));
      Lino.excerpts.ExcerptsByCompany.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "build time", "colIndex": 0, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.ExcerptsByCompany.build_time) " }, { "colIndex": 1, "sortable": true, "header": "Excerpt Type", "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.excerpt_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "editor": excerpt_type1742 }, { "header": "Controlled by", "colIndex": 2, "sortable": false, "dataIndex": "owner", "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.ExcerptsByCompany.owner) " }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1744, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1745 }, { "colIndex": 5, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1746, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1747 }, { "colIndex": 7, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1748, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.contact_person) ", "filter": { "type": "string" }, "header": "Recipient (Person)", "renderer": Lino.fk_renderer('contact_personHidden','Lino.contacts.Persons.detail'), "dataIndex": "contact_person", "hidden": true, "editor": contact_person1749 }, { "colIndex": 9, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1750, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 10, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.ExcerptsByCompany.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1751, "hidden": true, "dataIndex": "language" } ];
    Lino.excerpts.ExcerptsByCompany.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByCompany.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptsByCompany.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/ExcerptsByCompany",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByCompany.detail;
    Lino.excerpts.ExcerptsByCompany.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByCompany.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByCompany.detailPanel(p);
});
Lino.excerpts.ExcerptsByCompany.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByCompany.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByCompany.GridPanel(p);
});
Lino.excerpts.ExcerptsByCompany.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByCompany","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class excerpts.ExcerptsByPerson
Lino.excerpts.ExcerptsByPerson.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/excerpts/ExcerptsByPerson",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByPerson','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByPerson','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByPerson','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByPerson','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 20,
  ls_store_fields : [ { "name": "build_time" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "name": "owner" }, { "type": "int", "name": "id" }, { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "user" }, 'userHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "company" }, 'companyHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByPerson.detail;
    var ww = this.containing_window;
    var build_time1753 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var excerpt_type1754 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByPerson/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var owner_disp1755 = new Ext.form.DisplayField({ "disabled": true });
    var id1756 = new Ext.form.NumberField({ "selectOnFocus": true });
    var owner_type1757 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByPerson/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1758 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByPerson/owner_id", "method": "GET" }) }) });
    var user1759 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByPerson/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var build_method1760 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var company1761 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByPerson/company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var contact_role1762 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByPerson/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1763 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
      excerpt_type1754.setContextValue('owner', record ? record.data['owner'] : undefined);
    };
    this.onRender = function(ct, position) {
      owner_disp1755.on('change',Lino.chooser_handler(excerpt_type1754,'owner'));
      Lino.excerpts.ExcerptsByPerson.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "build time", "colIndex": 0, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.ExcerptsByPerson.build_time) " }, { "colIndex": 1, "sortable": true, "header": "Excerpt Type", "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.excerpt_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "editor": excerpt_type1754 }, { "header": "Controlled by", "colIndex": 2, "sortable": false, "dataIndex": "owner", "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.ExcerptsByPerson.owner) " }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1756, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1757 }, { "colIndex": 5, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1758, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1759 }, { "colIndex": 7, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1760, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.company) ", "filter": { "type": "string" }, "header": "Recipient (Organization)", "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "hidden": true, "editor": company1761 }, { "colIndex": 9, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1762, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 10, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.ExcerptsByPerson.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1763, "hidden": true, "dataIndex": "language" } ];
    Lino.excerpts.ExcerptsByPerson.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByPerson.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptsByPerson.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/ExcerptsByPerson",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByPerson.detail;
    Lino.excerpts.ExcerptsByPerson.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByPerson.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByPerson.detailPanel(p);
});
Lino.excerpts.ExcerptsByPerson.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByPerson.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByPerson.GridPanel(p);
});
Lino.excerpts.ExcerptsByPerson.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByPerson","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class ledger.MovementsByVoucher
Lino.ledger.MovementsByVoucher.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/MovementsByVoucher",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByVoucher','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByVoucher','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByVoucher','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByVoucher','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Movements",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "type": "int", "name": "seqno" }, { "name": "account" }, 'accountHidden', { "name": "debit" }, { "name": "credit" }, { "name": "match" }, { "type": "boolean", "name": "satisfied" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 7,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var seqno225 = new Ext.form.NumberField({ "selectOnFocus": true, "allowBlank": false });
    var account226 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/MovementsByVoucher/account", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account..." });
    var debit227 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var credit228 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var match229 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/MovementsByVoucher/match", "method": "GET" }) }) });
    var satisfied230 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
      match229.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
      match229.setContextValue('account', record ? record.data['accountHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      account226.on('change',Lino.chooser_handler(match229,'account'));
      Lino.ledger.MovementsByVoucher.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.MovementsByVoucher.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno225, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 1, "sortable": true, "header": "Account", "editable": true, "tooltip": "(ledger.MovementsByVoucher.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account226 }, new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 2, "sortable": false, "dataIndex": "debit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.MovementsByVoucher.debit) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 3, "sortable": false, "dataIndex": "credit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.MovementsByVoucher.credit) " }), { "colIndex": 4, "sortable": true, "header": "Match", "editable": true, "tooltip": "(ledger.MovementsByVoucher.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match229, "dataIndex": "match" }, { "colIndex": 5, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.MovementsByVoucher.satisfied) ", "filter": { "type": "boolean" }, "header": "Satisfied", "dataIndex": "satisfied" } ];
    Lino.ledger.MovementsByVoucher.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.MovementsByVoucher.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByVoucher","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByVoucher.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByVoucher","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByVoucher.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByVoucher","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByVoucher.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Movements.ParamsPanel({});
  return new Lino.ledger.MovementsByVoucher.GridPanel(p);
});

// js_render_GridPanel_class ledger.MovementsByPartner
Lino.ledger.MovementsByPartner.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/MovementsByPartner",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByPartner','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByPartner','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByPartner','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByPartner','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Movements",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 9,
  ls_store_fields : [ { "type": "date", "name": "voucher__date", "dateFormat": "d.m.Y" }, { "name": "voucher_link" }, { "name": "debit" }, { "name": "credit" }, { "name": "account" }, 'accountHidden', { "name": "match" }, { "type": "boolean", "name": "satisfied" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 8,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var voucher__date94 = new Lino.DateField({ "disabled": true });
    var voucher_link_disp95 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var debit96 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var credit97 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var account98 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/MovementsByPartner/account", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account..." });
    var match99 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/MovementsByPartner/match", "method": "GET" }) }) });
    var satisfied100 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      match99.setContextValue('mk',bp['mk']);
      match99.setContextValue('mt',bp['mt']);
      match99.setContextValue('account', record ? record.data['accountHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      account98.on('change',Lino.chooser_handler(match99,'account'));
      Lino.ledger.MovementsByPartner.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.MovementsByPartner.voucher__date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "dataIndex": "voucher__date", "width": Lino.chars2width(14) }, { "header": "Voucher", "colIndex": 1, "sortable": false, "dataIndex": "voucher_link", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.MovementsByPartner.voucher_link) " }, new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 2, "sortable": false, "dataIndex": "debit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.MovementsByPartner.debit) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 3, "sortable": false, "dataIndex": "credit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.MovementsByPartner.credit) " }), { "colIndex": 4, "sortable": true, "header": "Account", "editable": true, "tooltip": "(ledger.MovementsByPartner.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account98 }, { "colIndex": 5, "sortable": true, "header": "Match", "editable": true, "tooltip": "(ledger.MovementsByPartner.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match99, "dataIndex": "match" }, { "colIndex": 6, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.MovementsByPartner.satisfied) ", "filter": { "type": "boolean" }, "header": "Satisfied", "dataIndex": "satisfied" } ];
    Lino.ledger.MovementsByPartner.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.MovementsByPartner.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByPartner","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByPartner.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByPartner","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByPartner.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByPartner","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByPartner.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Movements.ParamsPanel({});
  return new Lino.ledger.MovementsByPartner.GridPanel(p);
});

// js_render_GridPanel_class ledger.MovementsByAccount
Lino.ledger.MovementsByAccount.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/MovementsByAccount",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByAccount','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByAccount','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByAccount','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/MovementsByAccount','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Movements",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 9,
  ls_store_fields : [ { "type": "date", "name": "voucher__date", "dateFormat": "d.m.Y" }, { "name": "voucher_link" }, { "name": "debit" }, { "name": "credit" }, { "name": "partner" }, 'partnerHidden', { "name": "match" }, { "type": "boolean", "name": "satisfied" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 8,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var voucher__date947 = new Lino.DateField({ "disabled": true });
    var voucher_link_disp948 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var debit949 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var credit950 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var partner951 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/MovementsByAccount/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var match952 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/MovementsByAccount/match", "method": "GET" }) }) });
    var satisfied953 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": false });
    this.before_row_edit = function(record) {
      match952.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
      var bp = this.get_base_params();
      match952.setContextValue('mk',bp['mk']);
      match952.setContextValue('mt',bp['mt']);
    };
    this.onRender = function(ct, position) {
      partner951.on('change',Lino.chooser_handler(match952,'partner'));
      Lino.ledger.MovementsByAccount.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.MovementsByAccount.voucher__date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "dataIndex": "voucher__date", "width": Lino.chars2width(14) }, { "header": "Voucher", "colIndex": 1, "sortable": false, "dataIndex": "voucher_link", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.MovementsByAccount.voucher_link) " }, new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 2, "sortable": false, "dataIndex": "debit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.MovementsByAccount.debit) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 3, "sortable": false, "dataIndex": "credit", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.MovementsByAccount.credit) " }), { "colIndex": 4, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(ledger.MovementsByAccount.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner951 }, { "colIndex": 5, "sortable": true, "header": "Match", "editable": true, "tooltip": "(ledger.MovementsByAccount.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match952, "dataIndex": "match" }, { "colIndex": 6, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(ledger.MovementsByAccount.satisfied) ", "filter": { "type": "boolean" }, "header": "Satisfied", "dataIndex": "satisfied" } ];
    Lino.ledger.MovementsByAccount.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.MovementsByAccount.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByAccount","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByAccount.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByAccount","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByAccount.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/MovementsByAccount","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.MovementsByAccount.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Movements.ParamsPanel({});
  return new Lino.ledger.MovementsByAccount.GridPanel(p);
});

// js_render_GridPanel_class ledger.InvoicesByJournal
Lino.ledger.InvoicesByJournal.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/ledger/InvoicesByJournal",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/InvoicesByJournal','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoicesByJournal','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoicesByJournal','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoicesByJournal','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Invoices",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 26,
  ls_store_fields : [ { "type": "int", "name": "number" }, { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "partner" }, 'partnerHidden', { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "user" }, 'userHidden', { "name": "workflow_buttons" }, { "type": "int", "name": "id" }, { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "match" }, { "name": "your_ref" }, { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 11,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.InvoicesByJournal.detail;
    this.ls_insert_handler = Lino.ledger.InvoicesByJournal.insert;
    var ww = this.containing_window;
    var number243 = new Ext.form.NumberField({ "selectOnFocus": true });
    var date244 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var due_date245 = new Lino.DateField({ "selectOnFocus": true });
    var partner246 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoicesByJournal/partner", "method": "GET" }) }), "emptyText": "Select a Partner..." });
    var total_incl247 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_base248 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat249 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var user250 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoicesByJournal/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var workflow_buttons_disp251 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var id252 = new Ext.form.NumberField({ "selectOnFocus": true });
    var year253 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration254 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in255 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoicesByJournal/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var vat_regime256 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.vat.VatRegimes });
    var payment_term257 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoicesByJournal/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var match258 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/InvoicesByJournal/match", "method": "GET" }) }) });
    var your_ref259 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var state260 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.ledger.InvoiceStates });
    this.before_row_edit = function(record) {
      match258.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner246.on('change',Lino.chooser_handler(match258,'partner'));
      Lino.ledger.InvoicesByJournal.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.InvoicesByJournal.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number243, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 1, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(ledger.InvoicesByJournal.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date244, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 2, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(ledger.InvoicesByJournal.due_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Due date", "editor": due_date245, "width": Lino.chars2width(14), "dataIndex": "due_date" }, { "colIndex": 3, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(ledger.InvoicesByJournal.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner246 }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(ledger.InvoicesByJournal.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl247, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(ledger.InvoicesByJournal.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base248, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(ledger.InvoicesByJournal.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat249, "dataIndex": "total_vat" }), { "colIndex": 7, "sortable": true, "header": "Author", "editable": true, "tooltip": "(ledger.InvoicesByJournal.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user250 }, { "header": "Workflow", "colIndex": 8, "sortable": false, "dataIndex": "workflow_buttons", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.InvoicesByJournal.workflow_buttons) " }, new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "format": "0", "editable": true, "tooltip": "(ledger.InvoicesByJournal.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id252, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 10, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(ledger.InvoicesByJournal.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year253, "hidden": true, "dataIndex": "year" }, { "colIndex": 11, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(ledger.InvoicesByJournal.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration254, "hidden": true, "dataIndex": "narration" }, { "colIndex": 12, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(ledger.InvoicesByJournal.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in255 }, { "colIndex": 13, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(ledger.InvoicesByJournal.vat_regime) ", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime256, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 14, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(ledger.InvoicesByJournal.payment_term) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term257, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 15, "sortable": true, "header": "Match", "editable": true, "tooltip": "(ledger.InvoicesByJournal.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match258, "hidden": true, "dataIndex": "match" }, { "colIndex": 16, "sortable": true, "header": "Your reference", "editable": true, "tooltip": "(ledger.InvoicesByJournal.your_ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": your_ref259, "hidden": true, "dataIndex": "your_ref" }, { "colIndex": 17, "sortable": true, "header": "State", "editable": true, "tooltip": "(ledger.InvoicesByJournal.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state260, "hidden": true, "dataIndex": "state" } ];
    Lino.ledger.InvoicesByJournal.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.InvoicesByJournal.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.InvoicesByJournal.insertPanel = Ext.extend(Lino.ledger.InvoicesByJournal.InsertFormPanel,{
  empty_title: "New Invoices",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/ledger/InvoicesByJournal",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.InvoicesByJournal.detail;
    this.ls_insert_handler = Lino.ledger.InvoicesByJournal.insert;
    Lino.ledger.InvoicesByJournal.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.InvoicesByJournal.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.ledger.InvoicesByJournal.insertPanel(p);
});
Lino.ledger.InvoicesByJournal.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.InvoicesByJournal.detailPanel = Ext.extend(Lino.ledger.Invoices.DetailFormPanel,{
  empty_title: "Detail Invoices",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/ledger/InvoicesByJournal",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.InvoicesByJournal.detail;
    this.ls_insert_handler = Lino.ledger.InvoicesByJournal.insert;
    Lino.ledger.InvoicesByJournal.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.InvoicesByJournal.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.InvoicesByJournal.detailPanel(p);
});
Lino.ledger.InvoicesByJournal.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoicesByJournal.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Invoices.ParamsPanel({});
  return new Lino.ledger.InvoicesByJournal.GridPanel(p);
});
Lino.ledger.InvoicesByJournal.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoicesByJournal","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class ledger.ItemsByInvoice
Lino.ledger.ItemsByInvoice.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/ItemsByInvoice",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/ItemsByInvoice','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/ItemsByInvoice','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/ItemsByInvoice','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/ItemsByInvoice','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Voucher items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "name": "account" }, 'accountHidden', { "name": "title" }, { "name": "vat_class" }, 'vat_classHidden', { "name": "total_base" }, { "name": "total_vat" }, { "name": "total_incl" }, { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 8,
  ls_grid_configs : [  ],
  content_type : 25,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var account285 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/ledger/ItemsByInvoice/account", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Account..." });
    var title286 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var vat_class287 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    var total_base288 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat289 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_incl290 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      account285.setContextValue('mk',bp['mk']);
      account285.setContextValue('mt',bp['mt']);
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Account", "editable": true, "tooltip": "(ledger.ItemsByInvoice.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account285 }, { "colIndex": 1, "sortable": true, "header": "Description", "editable": true, "tooltip": "(ledger.ItemsByInvoice.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title286, "dataIndex": "title" }, { "colIndex": 2, "sortable": true, "header": "VAT Class", "editable": true, "tooltip": "(ledger.ItemsByInvoice.vat_class) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": vat_class287, "dataIndex": "vat_class" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(ledger.ItemsByInvoice.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base288, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(ledger.ItemsByInvoice.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat289, "dataIndex": "total_vat" }), new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(ledger.ItemsByInvoice.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl290, "dataIndex": "total_incl" }) ];
    Lino.ledger.ItemsByInvoice.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.ItemsByInvoice.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.ItemsByInvoice.GridPanel(p);
});
Lino.ledger.ItemsByInvoice.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ItemsByInvoice.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ItemsByInvoice","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.ItemsByInvoice
Lino.sales.ItemsByInvoice.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/sales/ItemsByInvoice",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoice','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoice','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoice','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoice','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "invoice items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "int", "name": "seqno" }, { "name": "product" }, 'productHidden', { "name": "title" }, { "name": "description" }, { "name": "discount" }, { "name": "unit_price" }, { "name": "qty" }, { "name": "total_incl" }, { "type": "int", "name": "id" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "vat_class" }, 'vat_classHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 29,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var seqno191 = new Ext.form.NumberField({ "selectOnFocus": true });
    var product192 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/ItemsByInvoice/product", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Product..." });
    var title193 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var description194 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var discount195 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var unit_price196 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var qty197 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(6), "maxLength": 6 });
    var total_incl198 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var id199 = new Ext.form.NumberField({ "selectOnFocus": true });
    var total_base200 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat201 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var vat_class202 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.vat.VatClasses) });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.ItemsByInvoice.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno191, "hidden": true, "width": Lino.chars2width(4), "dataIndex": "seqno" }), { "colIndex": 1, "sortable": true, "header": "Product", "editable": true, "tooltip": "(sales.ItemsByInvoice.product) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('productHidden','Lino.products.Products.detail'), "dataIndex": "product", "editor": product192 }, { "colIndex": 2, "sortable": true, "header": "Description", "editable": true, "tooltip": "(sales.ItemsByInvoice.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title193, "dataIndex": "title" }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.ItemsByInvoice.description) ", "filter": { "type": "string" }, "header": "Description", "editor": description194, "hidden": true, "dataIndex": "description" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "Discount", "editable": true, "tooltip": "(sales.ItemsByInvoice.discount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(8), "editor": discount195, "dataIndex": "discount" }), new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Unit price", "editable": true, "tooltip": "(sales.ItemsByInvoice.unit_price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": unit_price196, "dataIndex": "unit_price" }), { "colIndex": 6, "sortable": true, "format": "", "align": "right", "editable": true, "tooltip": "(sales.ItemsByInvoice.qty) ", "filter": { "type": "string" }, "header": "Quantity", "editor": qty197, "width": Lino.chars2width(8), "dataIndex": "qty" }, new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.ItemsByInvoice.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl198, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.ItemsByInvoice.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id199, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.ItemsByInvoice.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base200, "hidden": true, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.ItemsByInvoice.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat201, "hidden": true, "dataIndex": "total_vat" }), { "colIndex": 11, "sortable": true, "header": "VAT Class", "editable": true, "tooltip": "(sales.ItemsByInvoice.vat_class) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": vat_class202, "hidden": true, "dataIndex": "vat_class" } ];
    Lino.sales.ItemsByInvoice.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.ItemsByInvoice.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.ItemsByInvoice.GridPanel(p);
});
Lino.sales.ItemsByInvoice.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoice.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoice","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.ItemsByInvoicePrint
Lino.sales.ItemsByInvoicePrint.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/sales/ItemsByInvoicePrint",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoicePrint','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoicePrint','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoicePrint','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/ItemsByInvoicePrint','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "invoice items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 6,
  ls_store_fields : [ { "name": "title" }, { "name": "unit_price" }, { "name": "qty" }, { "name": "total_incl" }, { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 29,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var title1765 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var unit_price1766 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var qty1767 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(6), "maxLength": 6 });
    var total_incl1768 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Description", "editable": true, "tooltip": "(sales.ItemsByInvoicePrint.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(41), "editor": title1765, "dataIndex": "title" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "header": "Unit price", "editable": true, "tooltip": "(sales.ItemsByInvoicePrint.unit_price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(11), "editor": unit_price1766, "dataIndex": "unit_price" }), { "colIndex": 2, "sortable": true, "format": "", "align": "right", "editable": true, "tooltip": "(sales.ItemsByInvoicePrint.qty) ", "filter": { "type": "string" }, "header": "Quantity", "editor": qty1767, "width": Lino.chars2width(6), "dataIndex": "qty" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.ItemsByInvoicePrint.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(11), "editor": total_incl1768, "dataIndex": "total_incl" }) ];
    Lino.sales.ItemsByInvoicePrint.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.ItemsByInvoicePrint.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.ItemsByInvoicePrint.GridPanel(p);
});
Lino.sales.ItemsByInvoicePrint.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.ItemsByInvoicePrint.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/ItemsByInvoicePrint","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.InvoiceItemsByProduct
Lino.sales.InvoiceItemsByProduct.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/sales/InvoiceItemsByProduct",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemsByProduct','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemsByProduct','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemsByProduct','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceItemsByProduct','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true } ],
  cell_edit : true,
  title : "invoice items",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 13,
  ls_store_fields : [ { "name": "voucher" }, 'voucherHidden', { "name": "voucher__partner" }, 'voucher__partnerHidden', { "name": "qty" }, { "name": "title" }, { "name": "description" }, { "name": "discount" }, { "name": "unit_price" }, { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 12,
  ls_grid_configs : [  ],
  content_type : 29,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var voucher1025 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoiceItemsByProduct/voucher", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Invoice..." });
    var voucher__partner1026 = new Lino.RemoteComboFieldElement({ "disabled": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var qty1027 = new Ext.form.TextField({ "selectOnFocus": true, "boxMinWidth": Lino.chars2width(6), "maxLength": 6 });
    var title1028 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var description1029 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var discount1030 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var unit_price1031 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_incl1032 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_base1033 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1034 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.voucher) ", "filter": { "type": "string" }, "header": "Invoice", "renderer": Lino.fk_renderer('voucherHidden','Lino.sales.Invoices.detail'), "dataIndex": "voucher", "hidden": true, "editor": voucher1025 }, { "colIndex": 1, "sortable": true, "width": Lino.chars2width(21), "editable": false, "tooltip": "(sales.InvoiceItemsByProduct.voucher__partner) ", "filter": { "type": "string" }, "header": "Partner", "dataIndex": "voucher__partner" }, { "colIndex": 2, "sortable": true, "format": "", "align": "right", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.qty) ", "filter": { "type": "string" }, "header": "Quantity", "editor": qty1027, "width": Lino.chars2width(8), "dataIndex": "qty" }, { "colIndex": 3, "sortable": true, "header": "Description", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title1028, "dataIndex": "title" }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.description) ", "filter": { "type": "string" }, "header": "Description", "editor": description1029, "hidden": true, "dataIndex": "description" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": true, "header": "Discount", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.discount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(8), "editor": discount1030, "dataIndex": "discount" }), new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "header": "Unit price", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.unit_price) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": unit_price1031, "dataIndex": "unit_price" }), new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1032, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1033, "hidden": true, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.InvoiceItemsByProduct.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1034, "hidden": true, "dataIndex": "total_vat" }) ];
    Lino.sales.InvoiceItemsByProduct.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoiceItemsByProduct.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemsByProduct","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemsByProduct.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemsByProduct","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemsByProduct.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemsByProduct","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemsByProduct.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceItemsByProduct","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceItemsByProduct.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.InvoiceItemsByProduct.GridPanel(p);
});

// js_render_GridPanel_class sales.InvoicesByJournal
Lino.sales.InvoicesByJournal.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sales/InvoicesByJournal",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByJournal','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByJournal','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByJournal','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByJournal','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  cell_edit : true,
  title : "Invoices",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 34,
  ls_store_fields : [ { "type": "int", "name": "number" }, { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "partner" }, 'partnerHidden', { "name": "total_incl" }, { "name": "subject" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "user" }, 'userHidden', { "type": "int", "name": "id" }, { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "printed_by" }, 'printed_byHidden', { "name": "match" }, { "name": "language" }, 'languageHidden', { "name": "your_ref" }, { "name": "shipping_mode" }, 'shipping_modeHidden', { "name": "intro" }, { "name": "discount" }, { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 11,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.InvoicesByJournal.detail;
    this.ls_insert_handler = Lino.sales.InvoicesByJournal.insert;
    var ww = this.containing_window;
    var number130 = new Ext.form.NumberField({ "selectOnFocus": true });
    var date131 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var due_date132 = new Lino.DateField({ "selectOnFocus": true });
    var partner133 = new Lino.RemoteComboFieldElement({ "preferred_width": 20, "allowBlank": false, "pageSize": 20, "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByJournal/partner", "method": "GET" }) }), "emptyText": "Select a Partner..." });
    var total_incl134 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var subject135 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var total_base136 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat137 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var user138 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByJournal/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var id139 = new Ext.form.NumberField({ "selectOnFocus": true });
    var year140 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration141 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in142 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByJournal/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var vat_regime143 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.vat.VatRegimes });
    var payment_term144 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByJournal/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var printed_by145 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Excerpt..." });
    var match146 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByJournal/match", "method": "GET" }) }) });
    var language147 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var your_ref148 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var shipping_mode149 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByJournal/shipping_mode", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Shipping Mode..." });
    var intro150 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var discount151 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var state152 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.sales.InvoiceStates });
    this.before_row_edit = function(record) {
      match146.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner133.on('change',Lino.chooser_handler(match146,'partner'));
      Lino.sales.InvoicesByJournal.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.InvoicesByJournal.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number130, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 1, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.InvoicesByJournal.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date131, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 2, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.InvoicesByJournal.due_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date of payment", "editor": due_date132, "width": Lino.chars2width(14), "dataIndex": "due_date" }, { "colIndex": 3, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(sales.InvoicesByJournal.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner133 }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.InvoicesByJournal.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl134, "dataIndex": "total_incl" }), { "colIndex": 5, "sortable": true, "header": "Subject line", "editable": true, "tooltip": "(sales.InvoicesByJournal.subject) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": subject135, "dataIndex": "subject" }, new Lino.NullNumberColumn({ "colIndex": 6, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.InvoicesByJournal.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base136, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.InvoicesByJournal.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat137, "dataIndex": "total_vat" }), { "colIndex": 8, "sortable": true, "header": "Author", "editable": true, "tooltip": "(sales.InvoicesByJournal.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user138 }, new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.InvoicesByJournal.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id139, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 10, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(sales.InvoicesByJournal.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year140, "hidden": true, "dataIndex": "year" }, { "colIndex": 11, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(sales.InvoicesByJournal.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration141, "hidden": true, "dataIndex": "narration" }, { "colIndex": 12, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.InvoicesByJournal.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in142 }, { "colIndex": 13, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(sales.InvoicesByJournal.vat_regime) ", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime143, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 14, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(sales.InvoicesByJournal.payment_term) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term144, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 15, "sortable": true, "width": Lino.chars2width(21), "editable": false, "tooltip": "(sales.InvoicesByJournal.printed_by) ", "filter": { "type": "string" }, "header": "Printed", "renderer": Lino.fk_renderer('printed_byHidden','Lino.excerpts.Excerpts.detail'), "hidden": true, "dataIndex": "printed_by" }, { "colIndex": 16, "sortable": true, "header": "Match", "editable": true, "tooltip": "(sales.InvoicesByJournal.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match146, "hidden": true, "dataIndex": "match" }, { "colIndex": 17, "sortable": true, "header": "Language", "editable": true, "tooltip": "(sales.InvoicesByJournal.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language147, "hidden": true, "dataIndex": "language" }, { "colIndex": 18, "sortable": true, "header": "Your reference", "editable": true, "tooltip": "(sales.InvoicesByJournal.your_ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": your_ref148, "hidden": true, "dataIndex": "your_ref" }, { "colIndex": 19, "sortable": true, "header": "Shipping Mode", "editable": true, "tooltip": "(sales.InvoicesByJournal.shipping_mode) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": shipping_mode149, "hidden": true, "dataIndex": "shipping_mode" }, { "colIndex": 20, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(sales.InvoicesByJournal.intro) ", "filter": { "type": "string" }, "header": "Introductive Text", "editor": intro150, "hidden": true, "dataIndex": "intro" }, new Lino.NullNumberColumn({ "colIndex": 21, "sortable": true, "header": "Discount", "editable": true, "tooltip": "(sales.InvoicesByJournal.discount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(8), "editor": discount151, "hidden": true, "dataIndex": "discount" }), { "colIndex": 22, "sortable": true, "header": "State", "editable": true, "tooltip": "(sales.InvoicesByJournal.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state152, "hidden": true, "dataIndex": "state" } ];
    Lino.sales.InvoicesByJournal.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoicesByJournal.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.InvoicesByJournal.insertPanel = Ext.extend(Lino.sales.Invoices.InsertFormPanel,{
  empty_title: "New Invoices",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/sales/InvoicesByJournal",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.InvoicesByJournal.detail;
    this.ls_insert_handler = Lino.sales.InvoicesByJournal.insert;
    Lino.sales.InvoicesByJournal.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoicesByJournal.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.sales.InvoicesByJournal.insertPanel(p);
});
Lino.sales.InvoicesByJournal.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.InvoicesByJournal.detailPanel = Ext.extend(Lino.sales.Invoices.DetailFormPanel,{
  empty_title: "Detail Invoices",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  ls_url: "/sales/InvoicesByJournal",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.InvoicesByJournal.detail;
    this.ls_insert_handler = Lino.sales.InvoicesByJournal.insert;
    Lino.sales.InvoicesByJournal.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoicesByJournal.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.InvoicesByJournal.detailPanel(p);
});
Lino.sales.InvoicesByJournal.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.clear_printed = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"clear_printed",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByJournal.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.sales.Invoices.ParamsPanel({});
  return new Lino.sales.InvoicesByJournal.GridPanel(p);
});
Lino.sales.InvoicesByJournal.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByJournal","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class sales.InvoicesByPartner
Lino.sales.InvoicesByPartner.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/sales/InvoicesByPartner",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByPartner','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByPartner','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByPartner','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoicesByPartner','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  cell_edit : true,
  title : "Invoices",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 34,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "type": "int", "name": "number" }, { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "vat_regime" }, 'vat_regimeHidden', { "name": "payment_term" }, 'payment_termHidden', { "name": "printed_by" }, 'printed_byHidden', { "name": "match" }, { "name": "language" }, 'languageHidden', { "name": "your_ref" }, { "name": "shipping_mode" }, 'shipping_modeHidden', { "name": "subject" }, { "name": "intro" }, { "name": "discount" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.InvoicesByPartner.detail;
    this.ls_insert_handler = Lino.sales.InvoicesByPartner.insert;
    var ww = this.containing_window;
    var date1770 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var total_incl1771 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_base1772 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var total_vat1773 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var id1774 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user1775 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByPartner/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal1776 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByPartner/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year1777 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number1778 = new Ext.form.NumberField({ "selectOnFocus": true });
    var narration1779 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in1780 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByPartner/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var vat_regime1781 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.vat.VatRegimes });
    var payment_term1782 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByPartner/payment_term", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Payment Term..." });
    var printed_by1783 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Excerpt..." });
    var match1784 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByPartner/match", "method": "GET" }) }) });
    var language1785 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    var your_ref1786 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var shipping_mode1787 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/sales/InvoicesByPartner/shipping_mode", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Shipping Mode..." });
    var subject1788 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var intro1789 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var discount1790 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var due_date1791 = new Lino.DateField({ "selectOnFocus": true });
    var state1792 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.sales.InvoiceStates });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      match1784.setContextValue('mk',bp['mk']);
      match1784.setContextValue('mt',bp['mt']);
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.InvoicesByPartner.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date1770, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "header": "Total incl. VAT", "editable": true, "tooltip": "(sales.InvoicesByPartner.total_incl) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_incl1771, "dataIndex": "total_incl" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "header": "Total excl. VAT", "editable": true, "tooltip": "(sales.InvoicesByPartner.total_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_base1772, "dataIndex": "total_base" }), new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "VAT", "editable": true, "tooltip": "(sales.InvoicesByPartner.total_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total_vat1773, "dataIndex": "total_vat" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.InvoicesByPartner.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1774, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.InvoicesByPartner.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1775 }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.InvoicesByPartner.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal1776 }, { "colIndex": 7, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(sales.InvoicesByPartner.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year1777, "hidden": true, "dataIndex": "year" }, new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "format": "0", "editable": true, "tooltip": "(sales.InvoicesByPartner.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number1778, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 9, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(sales.InvoicesByPartner.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration1779, "hidden": true, "dataIndex": "narration" }, { "colIndex": 10, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(sales.InvoicesByPartner.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in1780 }, { "colIndex": 11, "sortable": true, "header": "VAT Regime", "editable": true, "tooltip": "(sales.InvoicesByPartner.vat_regime) ", "filter": { "type": "string" }, "width": Lino.chars2width(19), "editor": vat_regime1781, "hidden": true, "dataIndex": "vat_regime" }, { "colIndex": 12, "sortable": true, "header": "Payment Term", "editable": true, "tooltip": "(sales.InvoicesByPartner.payment_term) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": payment_term1782, "hidden": true, "dataIndex": "payment_term" }, { "colIndex": 13, "sortable": true, "width": Lino.chars2width(21), "editable": false, "tooltip": "(sales.InvoicesByPartner.printed_by) ", "filter": { "type": "string" }, "header": "Printed", "renderer": Lino.fk_renderer('printed_byHidden','Lino.excerpts.Excerpts.detail'), "hidden": true, "dataIndex": "printed_by" }, { "colIndex": 14, "sortable": true, "header": "Match", "editable": true, "tooltip": "(sales.InvoicesByPartner.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match1784, "hidden": true, "dataIndex": "match" }, { "colIndex": 15, "sortable": true, "header": "Language", "editable": true, "tooltip": "(sales.InvoicesByPartner.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1785, "hidden": true, "dataIndex": "language" }, { "colIndex": 16, "sortable": true, "header": "Your reference", "editable": true, "tooltip": "(sales.InvoicesByPartner.your_ref) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": your_ref1786, "hidden": true, "dataIndex": "your_ref" }, { "colIndex": 17, "sortable": true, "header": "Shipping Mode", "editable": true, "tooltip": "(sales.InvoicesByPartner.shipping_mode) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": shipping_mode1787, "hidden": true, "dataIndex": "shipping_mode" }, { "colIndex": 18, "sortable": true, "header": "Subject line", "editable": true, "tooltip": "(sales.InvoicesByPartner.subject) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": subject1788, "hidden": true, "dataIndex": "subject" }, { "colIndex": 19, "sortable": false, "width": Lino.chars2width(61), "editable": true, "tooltip": "(sales.InvoicesByPartner.intro) ", "filter": { "type": "string" }, "header": "Introductive Text", "editor": intro1789, "hidden": true, "dataIndex": "intro" }, new Lino.NullNumberColumn({ "colIndex": 20, "sortable": true, "header": "Discount", "editable": true, "tooltip": "(sales.InvoicesByPartner.discount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(8), "editor": discount1790, "hidden": true, "dataIndex": "discount" }), { "colIndex": 21, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(sales.InvoicesByPartner.due_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date of payment", "editor": due_date1791, "hidden": true, "width": Lino.chars2width(14), "dataIndex": "due_date" }, { "colIndex": 22, "sortable": true, "header": "State", "editable": true, "tooltip": "(sales.InvoicesByPartner.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state1792, "hidden": true, "dataIndex": "state" } ];
    Lino.sales.InvoicesByPartner.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoicesByPartner.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.InvoicesByPartner.insertPanel = Ext.extend(Lino.sales.Invoices.InsertFormPanel,{
  empty_title: "New Invoices",
  hide_navigator: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/sales/InvoicesByPartner",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.InvoicesByPartner.detail;
    this.ls_insert_handler = Lino.sales.InvoicesByPartner.insert;
    Lino.sales.InvoicesByPartner.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoicesByPartner.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.sales.InvoicesByPartner.insertPanel(p);
});
Lino.sales.InvoicesByPartner.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.sales.InvoicesByPartner.detailPanel = Ext.extend(Lino.sales.Invoices.DetailFormPanel,{
  empty_title: "Detail Invoices",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Invoice", "tooltip": "Print this data record.", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Invoice", "auto_save": true }, { "itemId": "clear_printed", "menu_item_text": "Clear print cache", "tooltip": "Mark this object as not printed. A subsequent call to print will generate a new cache file.", "panel_btn_handler": Lino.row_action_handler('clear_printed','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear print cache", "auto_save": true } ],
  ls_url: "/sales/InvoicesByPartner",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.sales.InvoicesByPartner.detail;
    this.ls_insert_handler = Lino.sales.InvoicesByPartner.insert;
    Lino.sales.InvoicesByPartner.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoicesByPartner.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.InvoicesByPartner.detailPanel(p);
});
Lino.sales.InvoicesByPartner.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.clear_printed = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"clear_printed",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoicesByPartner.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.sales.Invoices.ParamsPanel({});
  return new Lino.sales.InvoicesByPartner.GridPanel(p);
});
Lino.sales.InvoicesByPartner.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoicesByPartner","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class declarations.VouchersByDeclaration
Lino.declarations.VouchersByDeclaration.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "emptyText": "No data to display." },
  ls_url : "/declarations/VouchersByDeclaration",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/declarations/VouchersByDeclaration','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/VouchersByDeclaration','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/VouchersByDeclaration','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/declarations/VouchersByDeclaration','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Vouchers",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "number" }, { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "name": "journal" }, 'journalHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "disabled_actions" } ],
  pk_index : 2,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var date531 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var number532 = new Ext.form.NumberField({ "selectOnFocus": true });
    var id533 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user534 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/VouchersByDeclaration/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var journal535 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/VouchersByDeclaration/journal", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Journal..." });
    var year536 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration537 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(declarations.VouchersByDeclaration.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date531, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(declarations.VouchersByDeclaration.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number532, "width": Lino.chars2width(6), "dataIndex": "number" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(declarations.VouchersByDeclaration.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id533, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 3, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(declarations.VouchersByDeclaration.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user534 }, { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(declarations.VouchersByDeclaration.journal) ", "filter": { "type": "string" }, "header": "Journal", "renderer": Lino.fk_renderer('journalHidden','Lino.ledger.Journals.detail'), "dataIndex": "journal", "hidden": true, "editor": journal535 }, { "colIndex": 5, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(declarations.VouchersByDeclaration.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year536, "hidden": true, "dataIndex": "year" }, { "colIndex": 6, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(declarations.VouchersByDeclaration.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration537, "hidden": true, "dataIndex": "narration" } ];
    Lino.declarations.VouchersByDeclaration.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.VouchersByDeclaration.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/VouchersByDeclaration","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.VouchersByDeclaration.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/VouchersByDeclaration","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.VouchersByDeclaration.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/VouchersByDeclaration","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.VouchersByDeclaration.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.VouchersByDeclaration.GridPanel(p);
});

// js_render_GridPanel_class declarations.DeclarationsByJournal
Lino.declarations.DeclarationsByJournal.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/declarations/DeclarationsByJournal",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationsByJournal','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationsByJournal','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationsByJournal','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationsByJournal','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "VAT declarations",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 22,
  ls_store_fields : [ { "type": "int", "name": "number" }, { "name": "period" }, 'periodHidden', { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "user" }, 'userHidden', { "type": "int", "name": "id" }, { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "sales_base" }, { "name": "sales_vat" }, { "name": "purchases_base" }, { "name": "purchases_vat" }, { "name": "purchases_investments" }, { "name": "purchases_ware" }, { "name": "purchases_services" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 6,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.declarations.DeclarationsByJournal.detail;
    this.ls_insert_handler = Lino.declarations.DeclarationsByJournal.insert;
    var ww = this.containing_window;
    var number485 = new Ext.form.NumberField({ "selectOnFocus": true });
    var period486 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.declarations.DeclarationPeriods });
    var date487 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var user488 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/DeclarationsByJournal/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var id489 = new Ext.form.NumberField({ "selectOnFocus": true });
    var year490 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration491 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in492 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/declarations/DeclarationsByJournal/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state493 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.declarations.DeclarationStates });
    var sales_base494 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var sales_vat495 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_base496 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_vat497 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_investments498 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_ware499 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var purchases_services500 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number485, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 1, "sortable": true, "header": "VAT Period", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.period) ", "filter": { "type": "string" }, "width": Lino.chars2width(13), "editor": period486, "dataIndex": "period" }, { "colIndex": 2, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date487, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 3, "sortable": true, "header": "Author", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user488 }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id489, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 5, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year490, "hidden": true, "dataIndex": "year" }, { "colIndex": 6, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration491, "hidden": true, "dataIndex": "narration" }, { "colIndex": 7, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(declarations.DeclarationsByJournal.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in492 }, { "colIndex": 8, "sortable": true, "header": "State", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state493, "hidden": true, "dataIndex": "state" }, new Lino.NullNumberColumn({ "colIndex": 9, "sortable": true, "header": "Sales base", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.sales_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": sales_base494, "hidden": true, "dataIndex": "sales_base" }), new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "Sales VAT", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.sales_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": sales_vat495, "hidden": true, "dataIndex": "sales_vat" }), new Lino.NullNumberColumn({ "colIndex": 11, "sortable": true, "header": "Purchases base", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.purchases_base) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_base496, "hidden": true, "dataIndex": "purchases_base" }), new Lino.NullNumberColumn({ "colIndex": 12, "sortable": true, "header": "Purchases VAT", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.purchases_vat) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_vat497, "hidden": true, "dataIndex": "purchases_vat" }), new Lino.NullNumberColumn({ "colIndex": 13, "sortable": true, "header": "Investments", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.purchases_investments) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_investments498, "hidden": true, "dataIndex": "purchases_investments" }), new Lino.NullNumberColumn({ "colIndex": 14, "sortable": true, "header": "Ware", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.purchases_ware) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_ware499, "hidden": true, "dataIndex": "purchases_ware" }), new Lino.NullNumberColumn({ "colIndex": 15, "sortable": true, "header": "Services", "editable": true, "tooltip": "(declarations.DeclarationsByJournal.purchases_services) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": purchases_services500, "hidden": true, "dataIndex": "purchases_services" }) ];
    Lino.declarations.DeclarationsByJournal.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.DeclarationsByJournal.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.declarations.DeclarationsByJournal.insertPanel = Ext.extend(Lino.declarations.Declarations.InsertFormPanel,{
  empty_title: "New VAT declarations",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/declarations/DeclarationsByJournal",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.declarations.DeclarationsByJournal.detail;
    this.ls_insert_handler = Lino.declarations.DeclarationsByJournal.insert;
    Lino.declarations.DeclarationsByJournal.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.DeclarationsByJournal.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.declarations.DeclarationsByJournal.insertPanel(p);
});
Lino.declarations.DeclarationsByJournal.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.wf3 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"wf3",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.declarations.DeclarationsByJournal.detailPanel = Ext.extend(Lino.declarations.Declarations.DetailFormPanel,{
  empty_title: "Detail VAT declarations",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  ls_url: "/declarations/DeclarationsByJournal",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.declarations.DeclarationsByJournal.detail;
    this.ls_insert_handler = Lino.declarations.DeclarationsByJournal.insert;
    Lino.declarations.DeclarationsByJournal.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.DeclarationsByJournal.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.DeclarationsByJournal.detailPanel(p);
});
Lino.declarations.DeclarationsByJournal.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationsByJournal.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.DeclarationsByJournal.GridPanel(p);
});
Lino.declarations.DeclarationsByJournal.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationsByJournal","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.PaymentOrdersByJournal
Lino.finan.PaymentOrdersByJournal.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/PaymentOrdersByJournal",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrdersByJournal','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrdersByJournal','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrdersByJournal','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/PaymentOrdersByJournal','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "suggest", "menu_item_text": "Suggestions", "tooltip": "Suggestions", "panel_btn_handler": Lino.row_action_handler('suggest','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Suggestions", "auto_save": true } ],
  cell_edit : true,
  title : "Payment Orders",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "id" }, { "type": "int", "name": "number" }, { "name": "user" }, 'userHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "total" }, { "type": "date", "name": "execution_date", "dateFormat": "d.m.Y" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 1,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.PaymentOrdersByJournal.detail;
    this.ls_insert_handler = Lino.finan.PaymentOrdersByJournal.insert;
    var ww = this.containing_window;
    var date324 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var id325 = new Ext.form.NumberField({ "selectOnFocus": true });
    var number326 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user327 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrdersByJournal/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var year328 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration329 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in330 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/PaymentOrdersByJournal/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state331 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.finan.VoucherStates });
    var total332 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": true, "decimalSeparator": "," });
    var execution_date333 = new Lino.DateField({ "selectOnFocus": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date324, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id325, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number326, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 3, "sortable": true, "header": "Author", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user327 }, { "colIndex": 4, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year328, "hidden": true, "dataIndex": "year" }, { "colIndex": 5, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration329, "hidden": true, "dataIndex": "narration" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in330 }, { "colIndex": 7, "sortable": true, "header": "State", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state331, "hidden": true, "dataIndex": "state" }, new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "header": "Total", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.total) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": total332, "hidden": true, "dataIndex": "total" }), { "colIndex": 9, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.PaymentOrdersByJournal.execution_date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Execution date", "editor": execution_date333, "hidden": true, "width": Lino.chars2width(14), "dataIndex": "execution_date" } ];
    Lino.finan.PaymentOrdersByJournal.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrdersByJournal.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.PaymentOrdersByJournal.insertPanel = Ext.extend(Lino.finan.JournalEntries.InsertFormPanel,{
  empty_title: "New Payment Orders",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/finan/PaymentOrdersByJournal",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.PaymentOrdersByJournal.detail;
    this.ls_insert_handler = Lino.finan.PaymentOrdersByJournal.insert;
    Lino.finan.PaymentOrdersByJournal.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrdersByJournal.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.finan.PaymentOrdersByJournal.insertPanel(p);
});
Lino.finan.PaymentOrdersByJournal.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.PaymentOrdersByJournal.detailPanel = Ext.extend(Lino.finan.PaymentOrders.DetailFormPanel,{
  empty_title: "Detail Payment Orders",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "suggest", "menu_item_text": "Suggestions", "tooltip": "Suggestions", "panel_btn_handler": Lino.row_action_handler('suggest','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Suggestions", "auto_save": true } ],
  ls_url: "/finan/PaymentOrdersByJournal",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.PaymentOrdersByJournal.detail;
    this.ls_insert_handler = Lino.finan.PaymentOrdersByJournal.insert;
    Lino.finan.PaymentOrdersByJournal.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.PaymentOrdersByJournal.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.PaymentOrdersByJournal.detailPanel(p);
});
Lino.finan.PaymentOrdersByJournal.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.suggest = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"suggest",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.PaymentOrdersByJournal.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.finan.JournalEntries.ParamsPanel({});
  return new Lino.finan.PaymentOrdersByJournal.GridPanel(p);
});
Lino.finan.PaymentOrdersByJournal.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/PaymentOrdersByJournal","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.JournalEntriesByJournal
Lino.finan.JournalEntriesByJournal.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/JournalEntriesByJournal",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntriesByJournal','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntriesByJournal','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntriesByJournal','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/JournalEntriesByJournal','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "suggest", "menu_item_text": "Suggestions", "tooltip": "Suggestions", "panel_btn_handler": Lino.row_action_handler('suggest','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Suggestions", "auto_save": true } ],
  cell_edit : true,
  title : "Journal Entries",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 13,
  ls_store_fields : [ { "type": "int", "name": "id" }, { "name": "user" }, 'userHidden', { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "year" }, 'yearHidden', { "type": "int", "name": "number" }, { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 0,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.JournalEntriesByJournal.detail;
    this.ls_insert_handler = Lino.finan.JournalEntriesByJournal.insert;
    var ww = this.containing_window;
    var id440 = new Ext.form.NumberField({ "selectOnFocus": true });
    var user441 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntriesByJournal/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var date442 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var year443 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var number444 = new Ext.form.NumberField({ "selectOnFocus": true });
    var narration445 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in446 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/JournalEntriesByJournal/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state447 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.finan.VoucherStates });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id440, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 1, "sortable": true, "header": "Author", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user441 }, { "colIndex": 2, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date442, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 3, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year443, "dataIndex": "year" }, new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number444, "width": Lino.chars2width(6), "dataIndex": "number" }), { "colIndex": 5, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration445, "dataIndex": "narration" }, { "colIndex": 6, "sortable": true, "header": "VAT declaration", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.declared_in) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "editor": declared_in446 }, { "colIndex": 7, "sortable": true, "header": "State", "editable": true, "tooltip": "(finan.JournalEntriesByJournal.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state447, "dataIndex": "state" } ];
    Lino.finan.JournalEntriesByJournal.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntriesByJournal.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.JournalEntriesByJournal.insertPanel = Ext.extend(Lino.finan.JournalEntries.InsertFormPanel,{
  empty_title: "New Journal Entries",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/finan/JournalEntriesByJournal",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.JournalEntriesByJournal.detail;
    this.ls_insert_handler = Lino.finan.JournalEntriesByJournal.insert;
    Lino.finan.JournalEntriesByJournal.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntriesByJournal.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.finan.JournalEntriesByJournal.insertPanel(p);
});
Lino.finan.JournalEntriesByJournal.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.JournalEntriesByJournal.detailPanel = Ext.extend(Lino.finan.JournalEntries.DetailFormPanel,{
  empty_title: "Detail Journal Entries",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "suggest", "menu_item_text": "Suggestions", "tooltip": "Suggestions", "panel_btn_handler": Lino.row_action_handler('suggest','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Suggestions", "auto_save": true } ],
  ls_url: "/finan/JournalEntriesByJournal",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.JournalEntriesByJournal.detail;
    this.ls_insert_handler = Lino.finan.JournalEntriesByJournal.insert;
    Lino.finan.JournalEntriesByJournal.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.JournalEntriesByJournal.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.JournalEntriesByJournal.detailPanel(p);
});
Lino.finan.JournalEntriesByJournal.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.suggest = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"suggest",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.JournalEntriesByJournal.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.finan.JournalEntries.ParamsPanel({});
  return new Lino.finan.JournalEntriesByJournal.GridPanel(p);
});
Lino.finan.JournalEntriesByJournal.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/JournalEntriesByJournal","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.BankStatementsByJournal
Lino.finan.BankStatementsByJournal.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/finan/BankStatementsByJournal",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementsByJournal','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementsByJournal','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementsByJournal','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/BankStatementsByJournal','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "suggest", "menu_item_text": "Suggestions", "tooltip": "Suggestions", "panel_btn_handler": Lino.row_action_handler('suggest','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Suggestions", "auto_save": true } ],
  cell_edit : true,
  title : "Bank Statements",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "type": "int", "name": "id" }, { "type": "int", "name": "number" }, { "name": "balance1" }, { "name": "balance2" }, { "name": "user" }, 'userHidden', { "name": "year" }, 'yearHidden', { "name": "narration" }, { "name": "declared_in" }, 'declared_inHidden', { "name": "state" }, 'stateHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 1,
  ls_grid_configs : [  ],
  content_type : 27,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.BankStatementsByJournal.detail;
    this.ls_insert_handler = Lino.finan.BankStatementsByJournal.insert;
    var ww = this.containing_window;
    var date381 = new Lino.DateField({ "selectOnFocus": true, "allowBlank": false });
    var id382 = new Ext.form.NumberField({ "selectOnFocus": true });
    var number383 = new Ext.form.NumberField({ "selectOnFocus": true });
    var balance1384 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var balance2385 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var user386 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatementsByJournal/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var year387 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "store": [['','<br>']].concat(Lino.ledger.FiscalYears) });
    var narration388 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var declared_in389 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/BankStatementsByJournal/declared_in", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a VAT declaration..." });
    var state390 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.finan.VoucherStates });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.BankStatementsByJournal.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "Date", "editor": date381, "width": Lino.chars2width(14), "dataIndex": "date" }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.BankStatementsByJournal.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id382, "width": Lino.chars2width(6), "dataIndex": "id" }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.BankStatementsByJournal.number) ", "filter": { "type": "numeric" }, "header": "number", "editor": number383, "width": Lino.chars2width(6), "dataIndex": "number" }), new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "Old balance", "editable": true, "tooltip": "(finan.BankStatementsByJournal.balance1) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": balance1384, "dataIndex": "balance1" }), new Lino.NullNumberColumn({ "colIndex": 4, "sortable": true, "header": "New balance", "editable": true, "tooltip": "(finan.BankStatementsByJournal.balance2) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": balance2385, "dataIndex": "balance2" }), { "colIndex": 5, "sortable": true, "header": "Author", "editable": true, "tooltip": "(finan.BankStatementsByJournal.user) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "editor": user386 }, { "colIndex": 6, "sortable": true, "header": "Fiscal Year", "editable": true, "tooltip": "(finan.BankStatementsByJournal.year) ", "filter": { "type": "string" }, "width": Lino.chars2width(8), "editor": year387, "hidden": true, "dataIndex": "year" }, { "colIndex": 7, "sortable": true, "header": "Narration", "editable": true, "tooltip": "(finan.BankStatementsByJournal.narration) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": narration388, "hidden": true, "dataIndex": "narration" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(finan.BankStatementsByJournal.declared_in) ", "filter": { "type": "string" }, "header": "VAT declaration", "renderer": Lino.fk_renderer('declared_inHidden','Lino.declarations.Declarations.detail'), "dataIndex": "declared_in", "hidden": true, "editor": declared_in389 }, { "colIndex": 9, "sortable": true, "header": "State", "editable": true, "tooltip": "(finan.BankStatementsByJournal.state) ", "filter": { "type": "string" }, "width": Lino.chars2width(14), "editor": state390, "hidden": true, "dataIndex": "state" } ];
    Lino.finan.BankStatementsByJournal.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatementsByJournal.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.BankStatementsByJournal.insertPanel = Ext.extend(Lino.finan.BankStatements.InsertFormPanel,{
  empty_title: "New Bank Statements",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [ { "itemId": "submit_insert", "menu_item_text": "Create", "tooltip": "Create the record and open a detail window on it", "panel_btn_handler": function(panel){panel.save()}, "text": "Create", "overflowText": "Create", "auto_save": false } ],
  ls_url: "/finan/BankStatementsByJournal",
  action_name: "insert",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.BankStatementsByJournal.detail;
    this.ls_insert_handler = Lino.finan.BankStatementsByJournal.insert;
    Lino.finan.BankStatementsByJournal.insertPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatementsByJournal.insert = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(40), "autoHeight": true, "maximizable": true, "modal": true, "maximized": false },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.finan.BankStatementsByJournal.insertPanel(p);
});
Lino.finan.BankStatementsByJournal.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.wf1 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"wf1",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.wf2 = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"wf2",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.finan.BankStatementsByJournal.detailPanel = Ext.extend(Lino.finan.BankStatements.DetailFormPanel,{
  empty_title: "Detail Bank Statements",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "insert", "menu_item_text": "New", "tooltip": "Insert a new record", "panel_btn_handler": Lino.show_insert, "iconCls": "x-tbar-add", "overflowText": "New", "keycode": 44, "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "suggest", "menu_item_text": "Suggestions", "tooltip": "Suggestions", "panel_btn_handler": Lino.row_action_handler('suggest','GET',null), "iconCls": "x-tbar-book_link", "overflowText": "Suggestions", "auto_save": true } ],
  ls_url: "/finan/BankStatementsByJournal",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.finan.BankStatementsByJournal.detail;
    this.ls_insert_handler = Lino.finan.BankStatementsByJournal.insert;
    Lino.finan.BankStatementsByJournal.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.BankStatementsByJournal.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.BankStatementsByJournal.detailPanel(p);
});
Lino.finan.BankStatementsByJournal.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.suggest = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"suggest",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.BankStatementsByJournal.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.finan.JournalEntries.ParamsPanel({});
  return new Lino.finan.BankStatementsByJournal.GridPanel(p);
});
Lino.finan.BankStatementsByJournal.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/BankStatementsByJournal","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.ItemsByJournalEntry
Lino.finan.ItemsByJournalEntry.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/ItemsByJournalEntry",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByJournalEntry','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByJournalEntry','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByJournalEntry','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByJournalEntry','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "partner" }, 'partnerHidden', { "name": "account" }, 'accountHidden', { "name": "match" }, { "name": "remark" }, { "name": "debit" }, { "name": "credit" }, { "type": "int", "name": "seqno" }, { "type": "int", "name": "id" }, { "name": "title" }, { "name": "amount" }, { "type": "boolean", "name": "dc" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 10,
  ls_grid_configs : [  ],
  content_type : 35,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var date458 = new Lino.DateField({ "selectOnFocus": true });
    var partner459 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByJournalEntry/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var account460 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByJournalEntry/account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var match461 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByJournalEntry/match", "method": "GET" }) }) });
    var remark462 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var debit463 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var credit464 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var seqno465 = new Ext.form.NumberField({ "selectOnFocus": true });
    var id466 = new Ext.form.NumberField({ "selectOnFocus": true });
    var title467 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var amount468 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var dc469 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    this.before_row_edit = function(record) {
      match461.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner459.on('change',Lino.chooser_handler(match461,'partner'));
      Lino.finan.ItemsByJournalEntry.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "date", "editor": date458, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 1, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner459 }, { "colIndex": 2, "sortable": true, "header": "Account", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account460 }, { "colIndex": 3, "sortable": true, "header": "Match", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match461, "dataIndex": "match" }, { "colIndex": 4, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark462, "dataIndex": "remark" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": false, "width": Lino.chars2width(13), "editable": true, "tooltip": "(finan.ItemsByJournalEntry.debit) ", "header": "Debit", "editor": debit463, "dataIndex": "debit" }), new Lino.NullNumberColumn({ "colIndex": 6, "sortable": false, "width": Lino.chars2width(13), "editable": true, "tooltip": "(finan.ItemsByJournalEntry.credit) ", "header": "Credit", "editor": credit464, "dataIndex": "credit" }), new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno465, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "seqno" }), new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id466, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 9, "sortable": true, "header": "Description", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title467, "hidden": true, "dataIndex": "title" }, new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "amount", "editable": true, "tooltip": "(finan.ItemsByJournalEntry.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount468, "hidden": true, "dataIndex": "amount" }), { "colIndex": 11, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(finan.ItemsByJournalEntry.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc", "hidden": true } ];
    Lino.finan.ItemsByJournalEntry.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.ItemsByJournalEntry.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.ItemsByJournalEntry.GridPanel(p);
});
Lino.finan.ItemsByJournalEntry.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByJournalEntry.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByJournalEntry","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.ItemsByBankStatement
Lino.finan.ItemsByBankStatement.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/ItemsByBankStatement",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByBankStatement','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByBankStatement','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByBankStatement','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByBankStatement','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 15,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "partner" }, 'partnerHidden', { "name": "account" }, 'accountHidden', { "name": "match" }, { "name": "remark" }, { "name": "debit" }, { "name": "credit" }, { "type": "int", "name": "seqno" }, { "type": "int", "name": "id" }, { "name": "title" }, { "name": "amount" }, { "type": "boolean", "name": "dc" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 10,
  ls_grid_configs : [  ],
  content_type : 37,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var date403 = new Lino.DateField({ "selectOnFocus": true });
    var partner404 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByBankStatement/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var account405 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByBankStatement/account", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Account..." });
    var match406 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByBankStatement/match", "method": "GET" }) }) });
    var remark407 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var debit408 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var credit409 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalPrecision": 2, "allowBlank": false, "decimalSeparator": "," });
    var seqno410 = new Ext.form.NumberField({ "selectOnFocus": true });
    var id411 = new Ext.form.NumberField({ "selectOnFocus": true });
    var title412 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    var amount413 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var dc414 = new Ext.form.Checkbox({ "selectOnFocus": true, "checked": null });
    this.before_row_edit = function(record) {
      match406.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner404.on('change',Lino.chooser_handler(match406,'partner'));
      Lino.finan.ItemsByBankStatement.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "xtype": "datecolumn", "format": "d.m.Y", "editable": true, "tooltip": "(finan.ItemsByBankStatement.date) ", "filter": { "type": "date", "dateFormat": "d.m.Y" }, "header": "date", "editor": date403, "width": Lino.chars2width(14), "dataIndex": "date" }, { "colIndex": 1, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(finan.ItemsByBankStatement.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner404 }, { "colIndex": 2, "sortable": true, "header": "Account", "editable": true, "tooltip": "(finan.ItemsByBankStatement.account) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account", "editor": account405 }, { "colIndex": 3, "sortable": true, "header": "Match", "editable": true, "tooltip": "(finan.ItemsByBankStatement.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match406, "dataIndex": "match" }, { "colIndex": 4, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(finan.ItemsByBankStatement.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark407, "dataIndex": "remark" }, new Lino.NullNumberColumn({ "colIndex": 5, "sortable": false, "width": Lino.chars2width(13), "editable": true, "tooltip": "(finan.ItemsByBankStatement.debit) ", "header": "Income", "editor": debit408, "dataIndex": "debit" }), new Lino.NullNumberColumn({ "colIndex": 6, "sortable": false, "width": Lino.chars2width(13), "editable": true, "tooltip": "(finan.ItemsByBankStatement.credit) ", "header": "Expense", "editor": credit409, "dataIndex": "credit" }), new Lino.NullNumberColumn({ "colIndex": 7, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.ItemsByBankStatement.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno410, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "seqno" }), new Lino.NullNumberColumn({ "colIndex": 8, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.ItemsByBankStatement.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id411, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 9, "sortable": true, "header": "Description", "editable": true, "tooltip": "(finan.ItemsByBankStatement.title) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": title412, "hidden": true, "dataIndex": "title" }, new Lino.NullNumberColumn({ "colIndex": 10, "sortable": true, "header": "amount", "editable": true, "tooltip": "(finan.ItemsByBankStatement.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount413, "hidden": true, "dataIndex": "amount" }), { "colIndex": 11, "sortable": false, "xtype": "checkcolumn", "width": Lino.chars2width(11), "editable": true, "tooltip": "(finan.ItemsByBankStatement.dc) Debit (checked) or Credit (not checked)", "filter": { "type": "boolean" }, "header": "dc", "dataIndex": "dc", "hidden": true } ];
    Lino.finan.ItemsByBankStatement.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.ItemsByBankStatement.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.ItemsByBankStatement.GridPanel(p);
});
Lino.finan.ItemsByBankStatement.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByBankStatement.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByBankStatement","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.ItemsByPaymentOrder
Lino.finan.ItemsByPaymentOrder.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/ItemsByPaymentOrder",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByPaymentOrder','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByPaymentOrder','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByPaymentOrder','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/ItemsByPaymentOrder','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "move_up", "menu_item_text": "Up", "tooltip": "Move this row one row upwards", "panel_btn_handler": Lino.row_action_handler('move_up','GET',null), "iconCls": "x-tbar-arrow_up", "overflowText": "Up", "auto_save": true }, { "itemId": "move_down", "menu_item_text": "Down", "tooltip": "Move this row one row downwards", "panel_btn_handler": Lino.row_action_handler('move_down','GET',null), "iconCls": "x-tbar-arrow_down", "overflowText": "Down", "auto_save": true } ],
  cell_edit : true,
  title : "Items",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "type": "int", "name": "seqno" }, { "name": "partner" }, 'partnerHidden', { "name": "match" }, { "name": "amount" }, { "name": "remark" }, { "type": "int", "name": "id" }, { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 6,
  ls_grid_configs : [  ],
  content_type : 34,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var seqno353 = new Ext.form.NumberField({ "selectOnFocus": true });
    var partner354 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByPaymentOrder/partner", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var match355 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/finan/ItemsByPaymentOrder/match", "method": "GET" }) }) });
    var amount356 = new Ext.form.NumberField({ "selectOnFocus": true, "decimalSeparator": ",", "decimalPrecision": 2, "allowBlank": false, "value": 0 });
    var remark357 = new Ext.form.TextField({ "selectOnFocus": true, "maxLength": 200 });
    this.before_row_edit = function(record) {
      match355.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      partner354.on('change',Lino.chooser_handler(match355,'partner'));
      Lino.finan.ItemsByPaymentOrder.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": true, "format": "0", "editable": true, "tooltip": "(finan.ItemsByPaymentOrder.seqno) ", "filter": { "type": "numeric" }, "header": "Seq.No.", "editor": seqno353, "width": Lino.chars2width(6), "dataIndex": "seqno" }), { "colIndex": 1, "sortable": true, "header": "Partner", "editable": true, "tooltip": "(finan.ItemsByPaymentOrder.partner) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner", "editor": partner354 }, { "colIndex": 2, "sortable": true, "header": "Match", "editable": true, "tooltip": "(finan.ItemsByPaymentOrder.match) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": match355, "dataIndex": "match" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "header": "amount", "editable": true, "tooltip": "(finan.ItemsByPaymentOrder.amount) ", "filter": { "type": "numeric" }, "width": Lino.chars2width(13), "editor": amount356, "dataIndex": "amount" }), { "colIndex": 4, "sortable": true, "header": "Remark", "editable": true, "tooltip": "(finan.ItemsByPaymentOrder.remark) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": remark357, "dataIndex": "remark" } ];
    Lino.finan.ItemsByPaymentOrder.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.ItemsByPaymentOrder.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.ItemsByPaymentOrder.GridPanel(p);
});
Lino.finan.ItemsByPaymentOrder.move_up = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"move_up",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.ItemsByPaymentOrder.move_down = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/ItemsByPaymentOrder","GET",pk,"move_down",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class system.HelpTextsByModel
Lino.system.HelpTextsByModel.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "emptyText": "No data to display." },
  ls_url : "/system/HelpTextsByModel",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/system/HelpTextsByModel','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/HelpTextsByModel','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/system/HelpTextsByModel','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/system/HelpTextsByModel','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false } ],
  cell_edit : true,
  title : "Help Texts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 7,
  ls_store_fields : [ { "name": "field" }, { "name": "verbose_name" }, { "name": "help_text" }, { "type": "int", "name": "id" }, { "name": "content_type" }, 'content_typeHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 3,
  ls_grid_configs : [  ],
  content_type : 4,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var field581 = new Lino.SimpleRemoteComboFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/HelpTextsByModel/field", "method": "GET" }) }) });
    var verbose_name582 = new Ext.form.TextField({ "disabled": true, "maxLength": 200 });
    var help_text583 = new Ext.form.TextArea({ "selectOnFocus": true, "growMax": 2000 });
    var id584 = new Ext.form.NumberField({ "selectOnFocus": true });
    var content_type585 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/system/HelpTextsByModel/content_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a content type..." });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      field581.setContextValue('mk',bp['mk']);
      field581.setContextValue('mt',bp['mt']);
    };
    this.onRender = function(ct, position) {
      content_type585.on('change',Lino.chooser_handler(field581,'content_type'));
      Lino.system.HelpTextsByModel.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "colIndex": 0, "sortable": true, "header": "Field", "editable": true, "tooltip": "(system.HelpTextsByModel.field) The name of the field.", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": field581, "dataIndex": "field" }, { "header": "Verbose name", "colIndex": 1, "sortable": false, "dataIndex": "verbose_name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(system.HelpTextsByModel.verbose_name) " }, { "colIndex": 2, "sortable": false, "header": "HelpText", "editable": true, "tooltip": "(system.HelpTextsByModel.help_text) ", "filter": { "type": "string" }, "width": Lino.chars2width(61), "editor": help_text583, "dataIndex": "help_text" }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(system.HelpTextsByModel.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id584, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(system.HelpTextsByModel.content_type) ", "filter": { "type": "string" }, "header": "Model", "renderer": Lino.fk_renderer('content_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "content_type", "hidden": true, "editor": content_type585 } ];
    Lino.system.HelpTextsByModel.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.system.HelpTextsByModel.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/HelpTextsByModel","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.HelpTextsByModel.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.system.HelpTextsByModel.GridPanel(p);
});

// js_render_GridPanel_class excerpts.ExcerptsByOwner
Lino.excerpts.ExcerptsByOwner.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "getRowClass": Lino.getRowClass, "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/excerpts/ExcerptsByOwner",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByOwner','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByOwner','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByOwner','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/excerpts/ExcerptsByOwner','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  cell_edit : true,
  title : "Excerpts",
  page_length : 20,
  stripeRows : true,
  disabled_actions_index : 22,
  ls_store_fields : [ { "name": "build_time" }, { "name": "excerpt_type" }, 'excerpt_typeHidden', { "name": "owner" }, { "type": "int", "name": "id" }, { "name": "owner_type" }, 'owner_typeHidden', { "name": "owner_id" }, 'owner_idHidden', { "name": "user" }, 'userHidden', { "name": "build_method" }, 'build_methodHidden', { "name": "company" }, 'companyHidden', { "name": "contact_person" }, 'contact_personHidden', { "name": "contact_role" }, 'contact_roleHidden', { "name": "language" }, 'languageHidden', { "name": "disabled_fields" }, { "name": "disabled_actions" }, { "name": "disable_editing" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 23,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByOwner.detail;
    var ww = this.containing_window;
    var build_time1794 = new Ext.form.DisplayField({ "disabled": true, "value": "<br>" });
    var excerpt_type1795 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/excerpt_type", "method": "GET" }) }), "allowBlank": false, "pageSize": 20, "emptyText": "Select a Excerpt Type..." });
    var owner_disp1796 = new Ext.form.DisplayField({ "disabled": true });
    var id1797 = new Ext.form.NumberField({ "selectOnFocus": true });
    var owner_type1798 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/owner_type", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a content type..." });
    var owner_id1799 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/owner_id", "method": "GET" }) }) });
    var user1800 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 15, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/user", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a User..." });
    var build_method1801 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "forceSelection": true, "allowBlank": false, "store": Lino.lino.BuildMethods });
    var company1802 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/company", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Organization..." });
    var contact_person1803 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/contact_person", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Person..." });
    var contact_role1804 = new Lino.RemoteComboFieldElement({ "selectOnFocus": true, "store": new Lino.ComplexRemoteComboStore({ "proxy": new Ext.data.HttpProxy({ "url": "/choices/excerpts/ExcerptsByOwner/contact_role", "method": "GET" }) }), "pageSize": 20, "emptyText": "Select a Function..." });
    var language1805 = new Lino.ChoicesFieldElement({ "selectOnFocus": true, "allowBlank": false, "store": [ [ "en", "English" ], [ "et", "Estonian" ] ] });
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      excerpt_type1795.setContextValue('mk',bp['mk']);
      excerpt_type1795.setContextValue('mt',bp['mt']);
      contact_person1803.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    };
    this.onRender = function(ct, position) {
      owner_disp1796.on('change',Lino.chooser_handler(excerpt_type1795,'owner'));
      company1802.on('change',Lino.chooser_handler(contact_person1803,'company'));
      Lino.excerpts.ExcerptsByOwner.GridPanel.superclass.onRender.call(this, ct, position);
    }
    this.ls_columns = [ { "header": "build time", "colIndex": 0, "sortable": true, "dataIndex": "build_time", "width": Lino.chars2width(17), "editable": false, "tooltip": "(excerpts.ExcerptsByOwner.build_time) " }, { "colIndex": 1, "sortable": true, "header": "Excerpt Type", "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.excerpt_type) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "renderer": Lino.fk_renderer('excerpt_typeHidden','Lino.excerpts.ExcerptTypes.detail'), "dataIndex": "excerpt_type", "editor": excerpt_type1795 }, { "colIndex": 2, "sortable": false, "width": Lino.chars2width(11), "editable": false, "tooltip": "(excerpts.ExcerptsByOwner.owner) ", "header": "Controlled by", "dataIndex": "owner", "hidden": true }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": true, "format": "0", "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.id) ", "filter": { "type": "numeric" }, "header": "ID", "editor": id1797, "hidden": true, "width": Lino.chars2width(6), "dataIndex": "id" }), { "colIndex": 4, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.owner_type) ", "filter": { "type": "string" }, "header": "Controlled by (type)", "renderer": Lino.fk_renderer('owner_typeHidden','Lino.system.ContentTypes.detail'), "dataIndex": "owner_type", "hidden": true, "editor": owner_type1798 }, { "colIndex": 5, "sortable": true, "header": "Controlled by (object)", "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.owner_id) ", "filter": { "type": "string" }, "width": Lino.chars2width(11), "editor": owner_id1799, "hidden": true, "dataIndex": "owner_id" }, { "colIndex": 6, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.user) ", "filter": { "type": "string" }, "header": "Author", "renderer": Lino.fk_renderer('userHidden','Lino.users.Users.detail'), "dataIndex": "user", "hidden": true, "editor": user1800 }, { "colIndex": 7, "sortable": true, "header": "Build method", "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.build_method) ", "filter": { "type": "string" }, "width": Lino.chars2width(22), "editor": build_method1801, "hidden": true, "dataIndex": "build_method" }, { "colIndex": 8, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.company) ", "filter": { "type": "string" }, "header": "Recipient (Organization)", "renderer": Lino.fk_renderer('companyHidden','Lino.contacts.Companies.detail'), "dataIndex": "company", "hidden": true, "editor": company1802 }, { "colIndex": 9, "sortable": true, "width": Lino.chars2width(21), "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.contact_person) ", "filter": { "type": "string" }, "header": "Recipient (Person)", "renderer": Lino.fk_renderer('contact_personHidden','Lino.contacts.Persons.detail'), "dataIndex": "contact_person", "hidden": true, "editor": contact_person1803 }, { "colIndex": 10, "sortable": true, "header": "represented as", "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.contact_role) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": contact_role1804, "hidden": true, "dataIndex": "contact_role" }, { "colIndex": 11, "sortable": true, "header": "Language", "editable": true, "tooltip": "(excerpts.ExcerptsByOwner.language) ", "filter": { "type": "string" }, "width": Lino.chars2width(21), "editor": language1805, "hidden": true, "dataIndex": "language" } ];
    Lino.excerpts.ExcerptsByOwner.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByOwner.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.grid_put = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"grid_put",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.grid_post = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"grid_post",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.submit_insert = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"submit_insert",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.duplicate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"duplicate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.excerpts.ExcerptsByOwner.detailPanel = Ext.extend(Lino.excerpts.Excerpts.DetailFormPanel,{
  empty_title: "Detail Excerpts",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "duplicate", "menu_item_text": "Duplicate", "tooltip": "Duplicate", "panel_btn_handler": Lino.row_action_handler('duplicate','GET',null), "iconCls": "x-tbar-arrow_divide", "overflowText": "Duplicate", "auto_save": true }, { "itemId": "delete_selected", "menu_item_text": "Delete", "tooltip": "Delete this record", "panel_btn_handler": Lino.row_action_handler('delete_selected','GET',null), "iconCls": "x-tbar-delete", "overflowText": "Delete", "keycode": 46, "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','POST',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true }, { "itemId": "do_clear_cache", "menu_item_text": "Clear cache", "tooltip": "Clear cache", "panel_btn_handler": Lino.row_action_handler('do_clear_cache','GET',null), "iconCls": "x-tbar-printer_delete", "overflowText": "Clear cache", "auto_save": true } ],
  ls_url: "/excerpts/ExcerptsByOwner",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.excerpts.ExcerptsByOwner.detail;
    Lino.excerpts.ExcerptsByOwner.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.excerpts.ExcerptsByOwner.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByOwner.detailPanel(p);
});
Lino.excerpts.ExcerptsByOwner.delete_selected = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"delete_selected",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","POST",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.do_clear_cache = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"do_clear_cache",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.edit_template = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"edit_template",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.excerpts.ExcerptsByOwner.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.excerpts.ExcerptsByOwner.GridPanel(p);
});
Lino.excerpts.ExcerptsByOwner.validate = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/excerpts/ExcerptsByOwner","GET",pk,"validate",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class about.Models
Lino.about.Models.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/about/Models",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/about/Models','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/Models','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/Models','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/about/Models','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "detail", "menu_item_text": "Detail", "tooltip": "Open a detail window on this record", "panel_btn_handler": Lino.show_detail, "iconCls": "x-tbar-application_form", "overflowText": "Detail", "auto_save": true } ],
  cell_edit : true,
  title : "Models",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "app" }, { "name": "name" }, { "name": "docstring" }, { "name": "rows" }, { "name": "detail_action" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    this.ls_detail_handler = Lino.about.Models.detail;
    var ww = this.containing_window;
    var app_disp1807 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var name_disp1808 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var docstring_disp1809 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var rows1810 = new Ext.form.NumberField({ "disabled": true });
    var detail_action_disp1811 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "app_label", "colIndex": 0, "sortable": false, "dataIndex": "app", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Models.app) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Models.name) " }, { "header": "docstring", "colIndex": 2, "sortable": false, "dataIndex": "docstring", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Models.docstring) " }, new Lino.NullNumberColumn({ "colIndex": 3, "sortable": false, "format": "0", "editable": false, "tooltip": "(about.Models.rows) ", "header": "Rows", "dataIndex": "rows", "width": Lino.chars2width(6) }), { "header": "detail_action", "colIndex": 4, "sortable": false, "dataIndex": "detail_action", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Models.detail_action) " } ];
    Lino.about.Models.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.about.Models.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Models","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.Models.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Models","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.Models.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Models","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.Models.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Models","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.about.Models.detailPanel = Ext.extend(Lino.about.Models.DetailFormPanel,{
  empty_title: "Detail Models",
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false } ],
  ls_url: "/about/Models",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.about.Models.detail;
    Lino.about.Models.detailPanel.superclass.initComponent.call(this);
  }
});

Lino.about.Models.detail = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.about.Models.detailPanel(p);
});
Lino.about.Models.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.about.Models.GridPanel(p);
});

// js_render_GridPanel_class about.FieldsByModel
Lino.about.FieldsByModel.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/about/FieldsByModel",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/about/FieldsByModel','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/FieldsByModel','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/FieldsByModel','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/about/FieldsByModel','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Fields",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 3,
  ls_store_fields : [ { "name": "name" }, { "name": "verbose_name" }, { "name": "help_text_column" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var name_disp1211 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var verbose_name_disp1212 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var help_text_column_disp1213 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "name", "colIndex": 0, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.FieldsByModel.name) " }, { "header": "verbose name", "colIndex": 1, "sortable": false, "dataIndex": "verbose_name", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.FieldsByModel.verbose_name) " }, { "header": "help text", "colIndex": 2, "sortable": false, "dataIndex": "help_text_column", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.FieldsByModel.help_text_column) " } ];
    Lino.about.FieldsByModel.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.about.FieldsByModel.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/FieldsByModel","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.FieldsByModel.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/FieldsByModel","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.FieldsByModel.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/FieldsByModel","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.FieldsByModel.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.about.FieldsByModel.GridPanel(p);
});

// js_render_GridPanel_class about.Inspector
Lino.about.Inspector.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/about/Inspector",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/about/Inspector','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/Inspector','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/Inspector','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/about/Inspector','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Inspector",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 3,
  ls_store_fields : [ { "name": "i_name" }, { "name": "i_type" }, { "name": "i_value" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var i_name_disp1813 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var i_type_disp1814 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var i_value_disp1815 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "Name", "colIndex": 0, "sortable": false, "dataIndex": "i_name", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Inspector.i_name) " }, { "header": "Type", "colIndex": 1, "sortable": false, "dataIndex": "i_type", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Inspector.i_type) " }, { "header": "Value", "colIndex": 2, "sortable": false, "dataIndex": "i_value", "width": Lino.chars2width(31), "editable": false, "tooltip": "(about.Inspector.i_value) " } ];
    Lino.about.Inspector.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.about.Inspector.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Inspector","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.Inspector.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Inspector","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.Inspector.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/Inspector","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.Inspector.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.about.Inspector.ParamsPanel({});
  return new Lino.about.Inspector.GridPanel(p);
});

// js_render_GridPanel_class about.SourceFiles
Lino.about.SourceFiles.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/about/SourceFiles",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/about/SourceFiles','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/SourceFiles','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/about/SourceFiles','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/about/SourceFiles','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Source files",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 3,
  ls_store_fields : [ { "name": "module_name" }, { "type": "int", "name": "code_lines" }, { "type": "int", "name": "doc_lines" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var module_name1817 = new Ext.form.TextField({ "disabled": true, "maxLength": null });
    var code_lines1818 = new Ext.form.NumberField({ "disabled": true });
    var doc_lines1819 = new Ext.form.NumberField({ "disabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "module name", "colIndex": 0, "sortable": false, "dataIndex": "module_name", "width": Lino.chars2width(5), "editable": false, "tooltip": "(about.SourceFiles.module_name) " }, new Lino.NullNumberColumn({ "colIndex": 1, "sortable": false, "format": "0", "editable": false, "tooltip": "(about.SourceFiles.code_lines) ", "header": "Code", "dataIndex": "code_lines", "width": Lino.chars2width(6) }), new Lino.NullNumberColumn({ "colIndex": 2, "sortable": false, "format": "0", "editable": false, "tooltip": "(about.SourceFiles.doc_lines) ", "header": "doc", "dataIndex": "doc_lines", "width": Lino.chars2width(6) }) ];
    Lino.about.SourceFiles.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.about.SourceFiles.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/SourceFiles","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.SourceFiles.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/SourceFiles","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.SourceFiles.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/SourceFiles","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.SourceFiles.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.about.SourceFiles.GridPanel(p);
});

// js_render_GridPanel_class ledger.VouchersByPartner
Lino.ledger.VouchersByPartner.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/VouchersByPartner",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/VouchersByPartner','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/VouchersByPartner','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/VouchersByPartner','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/VouchersByPartner','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "VAT vouchers",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "date", "name": "date", "dateFormat": "d.m.Y" }, { "name": "voucher" }, { "name": "total_incl" }, { "name": "total_base" }, { "name": "total_vat" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var date1821 = new Lino.DateField({ "disabled": true });
    var voucher_disp1822 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var total_incl1823 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var total_base1824 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var total_vat1825 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.VouchersByPartner.date) ", "header": "Date", "dataIndex": "date", "width": Lino.chars2width(14) }, { "header": "Voucher", "colIndex": 1, "sortable": false, "dataIndex": "voucher", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.VouchersByPartner.voucher) " }, new Lino.NullNumberColumn({ "header": "Total incl. VAT", "colIndex": 2, "sortable": false, "dataIndex": "total_incl", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.VouchersByPartner.total_incl) " }), new Lino.NullNumberColumn({ "header": "Total excl. VAT", "colIndex": 3, "sortable": false, "dataIndex": "total_base", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.VouchersByPartner.total_base) " }), new Lino.NullNumberColumn({ "header": "VAT", "colIndex": 4, "sortable": false, "dataIndex": "total_vat", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.VouchersByPartner.total_vat) " }) ];
    Lino.ledger.VouchersByPartner.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.VouchersByPartner.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/VouchersByPartner","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.VouchersByPartner.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/VouchersByPartner","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.VouchersByPartner.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/VouchersByPartner","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.VouchersByPartner.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.VouchersByPartner.GridPanel(p);
});

// js_render_GridPanel_class ledger.ExpectedMovements
Lino.ledger.ExpectedMovements.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/ExpectedMovements",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/ExpectedMovements','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/ExpectedMovements','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/ExpectedMovements','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/ExpectedMovements','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Debts",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "balance" }, { "name": "debts" }, { "name": "payments" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var due_date1827 = new Lino.DateField({ "disabled": true });
    var balance1828 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var debts_disp1829 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1830 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.ExpectedMovements.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(16) }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 1, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ExpectedMovements.balance) " }), { "header": "Debts", "colIndex": 2, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.ExpectedMovements.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 3, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.ExpectedMovements.payments) List of payments in this match group" } ];
    Lino.ledger.ExpectedMovements.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.ExpectedMovements.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ExpectedMovements","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ExpectedMovements.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ExpectedMovements","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ExpectedMovements.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ExpectedMovements","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ExpectedMovements.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.ledger.ExpectedMovements.GridPanel(p);
});

// js_render_GridPanel_class ledger.DebtsByAccount
Lino.ledger.DebtsByAccount.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/DebtsByAccount",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByAccount','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByAccount','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByAccount','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByAccount','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Debts",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "balance" }, { "name": "debts" }, { "name": "payments" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var due_date1832 = new Lino.DateField({ "disabled": true });
    var balance1833 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var debts_disp1834 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1835 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.DebtsByAccount.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(16) }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 1, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.DebtsByAccount.balance) " }), { "header": "Debts", "colIndex": 2, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.DebtsByAccount.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 3, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.DebtsByAccount.payments) List of payments in this match group" } ];
    Lino.ledger.DebtsByAccount.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.DebtsByAccount.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/DebtsByAccount","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.DebtsByAccount.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/DebtsByAccount","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.DebtsByAccount.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/DebtsByAccount","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.DebtsByAccount.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.ledger.DebtsByAccount.GridPanel(p);
});

// js_render_GridPanel_class ledger.DebtsByPartner
Lino.ledger.DebtsByPartner.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/ledger/DebtsByPartner",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByPartner','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByPartner','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByPartner','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/DebtsByPartner','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Debts",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "balance" }, { "name": "debts" }, { "name": "payments" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 4,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var due_date1837 = new Lino.DateField({ "disabled": true });
    var balance1838 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var debts_disp1839 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1840 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.DebtsByPartner.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(16) }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 1, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.DebtsByPartner.balance) " }), { "header": "Debts", "colIndex": 2, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.DebtsByPartner.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 3, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.DebtsByPartner.payments) List of payments in this match group" } ];
    Lino.ledger.DebtsByPartner.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.DebtsByPartner.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/DebtsByPartner","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.DebtsByPartner.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/DebtsByPartner","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.DebtsByPartner.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/DebtsByPartner","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.DebtsByPartner.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.ledger.DebtsByPartner.GridPanel(p);
});

// js_render_GridPanel_class ledger.GeneralAccountsBalance
Lino.ledger.GeneralAccountsBalance.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/GeneralAccountsBalance",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/GeneralAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/GeneralAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/GeneralAccountsBalance','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/GeneralAccountsBalance','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "General Accounts Balances",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "name": "ref" }, { "name": "description" }, { "name": "old_d" }, { "name": "old_c" }, { "name": "during_d" }, { "name": "during_c" }, { "name": "new_d" }, { "name": "new_c" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var ref_disp1842 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var description_disp1843 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var old_d1844 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var old_c1845 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_d1846 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_c1847 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_d1848 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_c1849 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "Ref", "colIndex": 0, "sortable": false, "dataIndex": "ref", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.ref) " }, { "header": "Description", "colIndex": 1, "sortable": false, "dataIndex": "description", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.description) " }, new Lino.NullNumberColumn({ "header": "Debit\nbefore", "colIndex": 2, "sortable": false, "dataIndex": "old_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.old_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nbefore", "colIndex": 3, "sortable": false, "dataIndex": "old_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.old_c) " }), new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 4, "sortable": false, "dataIndex": "during_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.during_d) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 5, "sortable": false, "dataIndex": "during_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.during_c) " }), new Lino.NullNumberColumn({ "header": "Debit\nafter", "colIndex": 6, "sortable": false, "dataIndex": "new_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.new_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nafter", "colIndex": 7, "sortable": false, "dataIndex": "new_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.GeneralAccountsBalance.new_c) " }) ];
    Lino.ledger.GeneralAccountsBalance.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.GeneralAccountsBalance.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/GeneralAccountsBalance","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.GeneralAccountsBalance.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/GeneralAccountsBalance","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.GeneralAccountsBalance.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/GeneralAccountsBalance","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.GeneralAccountsBalance.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.GeneralAccountsBalance.GridPanel(p);
});

// js_render_GridPanel_class ledger.PartnerAccountsBalance
Lino.ledger.PartnerAccountsBalance.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/PartnerAccountsBalance",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/PartnerAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/PartnerAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/PartnerAccountsBalance','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/PartnerAccountsBalance','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "PartnerAccountsBalance",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "name": "ref" }, { "name": "description" }, { "name": "old_d" }, { "name": "old_c" }, { "name": "during_d" }, { "name": "during_c" }, { "name": "new_d" }, { "name": "new_c" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var ref_disp1851 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var description_disp1852 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var old_d1853 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var old_c1854 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_d1855 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_c1856 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_d1857 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_c1858 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "Ref", "colIndex": 0, "sortable": false, "dataIndex": "ref", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.ref) " }, { "header": "Description", "colIndex": 1, "sortable": false, "dataIndex": "description", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.description) " }, new Lino.NullNumberColumn({ "header": "Debit\nbefore", "colIndex": 2, "sortable": false, "dataIndex": "old_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.old_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nbefore", "colIndex": 3, "sortable": false, "dataIndex": "old_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.old_c) " }), new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 4, "sortable": false, "dataIndex": "during_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.during_d) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 5, "sortable": false, "dataIndex": "during_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.during_c) " }), new Lino.NullNumberColumn({ "header": "Debit\nafter", "colIndex": 6, "sortable": false, "dataIndex": "new_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.new_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nafter", "colIndex": 7, "sortable": false, "dataIndex": "new_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.PartnerAccountsBalance.new_c) " }) ];
    Lino.ledger.PartnerAccountsBalance.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.PartnerAccountsBalance.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/PartnerAccountsBalance","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.PartnerAccountsBalance.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/PartnerAccountsBalance","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.PartnerAccountsBalance.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/PartnerAccountsBalance","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.PartnerAccountsBalance.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.PartnerAccountsBalance.GridPanel(p);
});

// js_render_GridPanel_class ledger.ClientAccountsBalance
Lino.ledger.ClientAccountsBalance.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/ClientAccountsBalance",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/ClientAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/ClientAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/ClientAccountsBalance','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/ClientAccountsBalance','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Client Accounts Balances",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "name": "ref" }, { "name": "description" }, { "name": "old_d" }, { "name": "old_c" }, { "name": "during_d" }, { "name": "during_c" }, { "name": "new_d" }, { "name": "new_c" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var ref_disp1860 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var description_disp1861 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var old_d1862 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var old_c1863 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_d1864 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_c1865 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_d1866 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_c1867 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "Ref", "colIndex": 0, "sortable": false, "dataIndex": "ref", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.ref) " }, { "header": "Description", "colIndex": 1, "sortable": false, "dataIndex": "description", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.description) " }, new Lino.NullNumberColumn({ "header": "Debit\nbefore", "colIndex": 2, "sortable": false, "dataIndex": "old_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.old_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nbefore", "colIndex": 3, "sortable": false, "dataIndex": "old_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.old_c) " }), new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 4, "sortable": false, "dataIndex": "during_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.during_d) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 5, "sortable": false, "dataIndex": "during_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.during_c) " }), new Lino.NullNumberColumn({ "header": "Debit\nafter", "colIndex": 6, "sortable": false, "dataIndex": "new_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.new_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nafter", "colIndex": 7, "sortable": false, "dataIndex": "new_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.ClientAccountsBalance.new_c) " }) ];
    Lino.ledger.ClientAccountsBalance.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.ClientAccountsBalance.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ClientAccountsBalance","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ClientAccountsBalance.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ClientAccountsBalance","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ClientAccountsBalance.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ClientAccountsBalance","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ClientAccountsBalance.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.ClientAccountsBalance.GridPanel(p);
});

// js_render_GridPanel_class ledger.SupplierAccountsBalance
Lino.ledger.SupplierAccountsBalance.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/SupplierAccountsBalance",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/SupplierAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/SupplierAccountsBalance','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/SupplierAccountsBalance','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/SupplierAccountsBalance','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Supplier Accounts Balances",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 8,
  ls_store_fields : [ { "name": "ref" }, { "name": "description" }, { "name": "old_d" }, { "name": "old_c" }, { "name": "during_d" }, { "name": "during_c" }, { "name": "new_d" }, { "name": "new_c" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var ref_disp1869 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var description_disp1870 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var old_d1871 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var old_c1872 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_d1873 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var during_c1874 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_d1875 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var new_c1876 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "Ref", "colIndex": 0, "sortable": false, "dataIndex": "ref", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.ref) " }, { "header": "Description", "colIndex": 1, "sortable": false, "dataIndex": "description", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.description) " }, new Lino.NullNumberColumn({ "header": "Debit\nbefore", "colIndex": 2, "sortable": false, "dataIndex": "old_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.old_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nbefore", "colIndex": 3, "sortable": false, "dataIndex": "old_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.old_c) " }), new Lino.NullNumberColumn({ "header": "Debit", "colIndex": 4, "sortable": false, "dataIndex": "during_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.during_d) " }), new Lino.NullNumberColumn({ "header": "Credit", "colIndex": 5, "sortable": false, "dataIndex": "during_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.during_c) " }), new Lino.NullNumberColumn({ "header": "Debit\nafter", "colIndex": 6, "sortable": false, "dataIndex": "new_d", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.new_d) " }), new Lino.NullNumberColumn({ "header": "Credit\nafter", "colIndex": 7, "sortable": false, "dataIndex": "new_c", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.SupplierAccountsBalance.new_c) " }) ];
    Lino.ledger.SupplierAccountsBalance.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.SupplierAccountsBalance.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/SupplierAccountsBalance","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.SupplierAccountsBalance.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/SupplierAccountsBalance","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.SupplierAccountsBalance.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/SupplierAccountsBalance","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.SupplierAccountsBalance.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.SupplierAccountsBalance.GridPanel(p);
});

// js_render_GridPanel_class ledger.Debtors
Lino.ledger.Debtors.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/Debtors",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/Debtors','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Debtors','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Debtors','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/Debtors','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Debtors",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "int", "name": "age" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "partner" }, { "name": "balance" }, { "name": "actions" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var age1878 = new Ext.form.NumberField({ "disabled": true });
    var due_date1879 = new Lino.DateField({ "disabled": true });
    var partner_disp1880 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var balance1881 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var actions_disp1882 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": false, "format": "0", "editable": false, "tooltip": "(ledger.Debtors.age) ", "header": "Age", "dataIndex": "age", "width": Lino.chars2width(6) }), { "colIndex": 1, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.Debtors.due_date) ", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(14) }, { "header": "Partner", "colIndex": 2, "sortable": false, "dataIndex": "partner", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.Debtors.partner) " }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 3, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.Debtors.balance) " }), { "header": "Actions", "colIndex": 4, "sortable": false, "dataIndex": "actions", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.Debtors.actions) " } ];
    Lino.ledger.Debtors.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Debtors.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Debtors","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Debtors.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Debtors","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Debtors.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Debtors","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Debtors.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Debtors.ParamsPanel({});
  return new Lino.ledger.Debtors.GridPanel(p);
});

// js_render_GridPanel_class ledger.Creditors
Lino.ledger.Creditors.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/Creditors",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/Creditors','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Creditors','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/Creditors','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/Creditors','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Creditors",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "type": "int", "name": "age" }, { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "partner" }, { "name": "balance" }, { "name": "actions" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var age1884 = new Ext.form.NumberField({ "disabled": true });
    var due_date1885 = new Lino.DateField({ "disabled": true });
    var partner_disp1886 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var balance1887 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    var actions_disp1888 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ new Lino.NullNumberColumn({ "colIndex": 0, "sortable": false, "format": "0", "editable": false, "tooltip": "(ledger.Creditors.age) ", "header": "Age", "dataIndex": "age", "width": Lino.chars2width(6) }), { "colIndex": 1, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(ledger.Creditors.due_date) ", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(14) }, { "header": "Partner", "colIndex": 2, "sortable": false, "dataIndex": "partner", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.Creditors.partner) " }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 3, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(ledger.Creditors.balance) " }), { "header": "Actions", "colIndex": 4, "sortable": false, "dataIndex": "actions", "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.Creditors.actions) " } ];
    Lino.ledger.Creditors.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Creditors.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Creditors","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Creditors.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Creditors","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Creditors.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Creditors","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Creditors.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Creditors.ParamsPanel({});
  return new Lino.ledger.Creditors.GridPanel(p);
});

// js_render_GridPanel_class finan.SuggestionsByVoucher
Lino.finan.SuggestionsByVoucher.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/SuggestionsByVoucher",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByVoucher','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByVoucher','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByVoucher','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByVoucher','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "do_fill", "menu_item_text": "Fill", "tooltip": "Fill", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByVoucher','do_fill','POST',null), "iconCls": "x-tbar-lightning", "overflowText": "Fill", "auto_save": true } ],
  cell_edit : false,
  title : "Suggestions",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "name": "partner" }, 'partnerHidden', { "name": "match" }, { "name": "account" }, 'accountHidden', { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "debts" }, { "name": "payments" }, { "name": "balance" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var partner1890 = new Lino.RemoteComboFieldElement({ "disabled": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var match_disp1891 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var account1892 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Account..." });
    var due_date1893 = new Lino.DateField({ "disabled": true });
    var debts_disp1894 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1895 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var balance1896 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByVoucher.partner) ", "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner" }, { "header": "Match", "colIndex": 1, "sortable": false, "dataIndex": "match", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByVoucher.match) " }, { "colIndex": 2, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByVoucher.account) ", "header": "Account", "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account" }, { "colIndex": 3, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(finan.SuggestionsByVoucher.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(14) }, { "header": "Debts", "colIndex": 4, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByVoucher.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 5, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByVoucher.payments) List of payments in this match group" }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 6, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(finan.SuggestionsByVoucher.balance) " }) ];
    Lino.finan.SuggestionsByVoucher.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.SuggestionsByVoucher.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByVoucher","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByVoucher.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByVoucher","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByVoucher.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByVoucher","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByVoucher.grid = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(70), "maximizable": true, "modal": true, "maximized": false, "height": Lino.rows2height(20) },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.finan.SuggestionsByVoucher.GridPanel(p);
});
Lino.finan.SuggestionsByVoucher.do_fill = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByVoucher","POST",pk,"do_fill",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.SuggestionsByJournalEntry
Lino.finan.SuggestionsByJournalEntry.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/SuggestionsByJournalEntry",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByJournalEntry','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByJournalEntry','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByJournalEntry','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByJournalEntry','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "do_fill", "menu_item_text": "Fill", "tooltip": "Fill", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByJournalEntry','do_fill','POST',null), "iconCls": "x-tbar-lightning", "overflowText": "Fill", "auto_save": true } ],
  cell_edit : false,
  title : "Suggestions",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "name": "partner" }, 'partnerHidden', { "name": "match" }, { "name": "account" }, 'accountHidden', { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "debts" }, { "name": "payments" }, { "name": "balance" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var partner1898 = new Lino.RemoteComboFieldElement({ "disabled": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var match_disp1899 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var account1900 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Account..." });
    var due_date1901 = new Lino.DateField({ "disabled": true });
    var debts_disp1902 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1903 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var balance1904 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.partner) ", "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner" }, { "header": "Match", "colIndex": 1, "sortable": false, "dataIndex": "match", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.match) " }, { "colIndex": 2, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.account) ", "header": "Account", "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account" }, { "colIndex": 3, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(14) }, { "header": "Debts", "colIndex": 4, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 5, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.payments) List of payments in this match group" }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 6, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(finan.SuggestionsByJournalEntry.balance) " }) ];
    Lino.finan.SuggestionsByJournalEntry.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.SuggestionsByJournalEntry.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByJournalEntry","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByJournalEntry.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByJournalEntry","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByJournalEntry.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByJournalEntry","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByJournalEntry.grid = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(70), "maximizable": true, "modal": true, "maximized": false, "height": Lino.rows2height(20) },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.finan.SuggestionsByJournalEntry.GridPanel(p);
});
Lino.finan.SuggestionsByJournalEntry.do_fill = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByJournalEntry","POST",pk,"do_fill",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.SuggestionsByPaymentOrder
Lino.finan.SuggestionsByPaymentOrder.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/SuggestionsByPaymentOrder",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByPaymentOrder','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByPaymentOrder','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByPaymentOrder','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByPaymentOrder','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "do_fill", "menu_item_text": "Fill", "tooltip": "Fill", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByPaymentOrder','do_fill','POST',null), "iconCls": "x-tbar-lightning", "overflowText": "Fill", "auto_save": true } ],
  cell_edit : false,
  title : "Suggestions",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "name": "partner" }, 'partnerHidden', { "name": "match" }, { "name": "account" }, 'accountHidden', { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "debts" }, { "name": "payments" }, { "name": "balance" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var partner1906 = new Lino.RemoteComboFieldElement({ "disabled": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var match_disp1907 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var account1908 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Account..." });
    var due_date1909 = new Lino.DateField({ "disabled": true });
    var debts_disp1910 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1911 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var balance1912 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.partner) ", "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner" }, { "header": "Match", "colIndex": 1, "sortable": false, "dataIndex": "match", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.match) " }, { "colIndex": 2, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.account) ", "header": "Account", "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account" }, { "colIndex": 3, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(14) }, { "header": "Debts", "colIndex": 4, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 5, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.payments) List of payments in this match group" }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 6, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(finan.SuggestionsByPaymentOrder.balance) " }) ];
    Lino.finan.SuggestionsByPaymentOrder.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.SuggestionsByPaymentOrder.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByPaymentOrder","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByPaymentOrder.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByPaymentOrder","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByPaymentOrder.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByPaymentOrder","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByPaymentOrder.grid = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(70), "maximizable": true, "modal": true, "maximized": false, "height": Lino.rows2height(20) },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.finan.SuggestionsByPaymentOrder.GridPanel(p);
});
Lino.finan.SuggestionsByPaymentOrder.do_fill = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByPaymentOrder","POST",pk,"do_fill",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class finan.SuggestionsByBankStatement
Lino.finan.SuggestionsByBankStatement.GridPanel = Ext.extend(Lino.GridPanel,{
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  ls_url : "/finan/SuggestionsByBankStatement",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByBankStatement','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByBankStatement','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByBankStatement','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByBankStatement','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true }, { "itemId": "do_fill", "menu_item_text": "Fill", "tooltip": "Fill", "panel_btn_handler": Lino.list_action_handler('/finan/SuggestionsByBankStatement','do_fill','POST',null), "iconCls": "x-tbar-lightning", "overflowText": "Fill", "auto_save": true } ],
  cell_edit : false,
  title : "Suggestions",
  page_length : 20,
  stripeRows : true,
  disable_editing : true,
  disabled_actions_index : 10,
  ls_store_fields : [ { "name": "partner" }, 'partnerHidden', { "name": "match" }, { "name": "account" }, 'accountHidden', { "type": "date", "name": "due_date", "dateFormat": "d.m.Y" }, { "name": "debts" }, { "name": "payments" }, { "name": "balance" }, { "type": "int", "name": "id" }, { "name": "disabled_actions" } ],
  pk_index : 9,
  ls_grid_configs : [  ],
  content_type : 28,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    var ww = this.containing_window;
    var partner1914 = new Lino.RemoteComboFieldElement({ "disabled": true, "preferred_width": 20, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Partner..." });
    var match_disp1915 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var account1916 = new Lino.RemoteComboFieldElement({ "disabled": true, "store": new Lino.ComplexRemoteComboStore({  }), "pageSize": 20, "emptyText": "Select a Account..." });
    var due_date1917 = new Lino.DateField({ "disabled": true });
    var debts_disp1918 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var payments_disp1919 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var balance1920 = new Ext.form.NumberField({ "disabled": true, "decimalPrecision": 2, "decimalSeparator": "," });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.partner) ", "header": "Partner", "renderer": Lino.fk_renderer('partnerHidden','Lino.contacts.Partners.detail'), "dataIndex": "partner" }, { "header": "Match", "colIndex": 1, "sortable": false, "dataIndex": "match", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.match) " }, { "colIndex": 2, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.account) ", "header": "Account", "renderer": Lino.fk_renderer('accountHidden','Lino.accounts.Accounts.detail'), "dataIndex": "account" }, { "colIndex": 3, "sortable": false, "xtype": "datecolumn", "format": "d.m.Y", "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.due_date) Due date of the eldest debt in this match group", "header": "Due date", "dataIndex": "due_date", "width": Lino.chars2width(14) }, { "header": "Debts", "colIndex": 4, "sortable": false, "dataIndex": "debts", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.debts) List of invoices in this match group" }, { "header": "Payments", "colIndex": 5, "sortable": false, "dataIndex": "payments", "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.payments) List of payments in this match group" }, new Lino.NullNumberColumn({ "header": "Balance", "colIndex": 6, "sortable": false, "dataIndex": "balance", "width": Lino.chars2width(13), "editable": false, "tooltip": "(finan.SuggestionsByBankStatement.balance) " }) ];
    Lino.finan.SuggestionsByBankStatement.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.SuggestionsByBankStatement.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByBankStatement","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByBankStatement.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByBankStatement","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByBankStatement.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByBankStatement","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.SuggestionsByBankStatement.grid = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(70), "maximizable": true, "modal": true, "maximized": false, "height": Lino.rows2height(20) },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ExpectedMovements.ParamsPanel({});
  return new Lino.finan.SuggestionsByBankStatement.GridPanel(p);
});
Lino.finan.SuggestionsByBankStatement.do_fill = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/SuggestionsByBankStatement","POST",pk,"do_fill",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.Report.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/Report","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.lino.Report.showPanel = Ext.extend(Lino.lino.Report.DetailFormPanel,{
  empty_title: "Detail",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/lino/Report",
  initComponent : function() {
    this.ls_detail_handler = Lino.lino.Report.show;
    Lino.lino.Report.showPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.Report.show = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.Report.showPanel(p);
});

Lino.lino.Report.showPanel = Ext.extend(Lino.lino.Report.DetailFormPanel,{
  empty_title: "Detail",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/lino/Report",
  initComponent : function() {
    this.ls_detail_handler = Lino.lino.Report.show;
    Lino.lino.Report.showPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.Report.show = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.Report.showPanel(p);
});
Lino.lino.Report.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/Report","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.about.About.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/About","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.about.About.showPanel = Ext.extend(Lino.about.About.DetailFormPanel,{
  empty_title: "About",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/about/About",
  initComponent : function() {
    this.ls_detail_handler = Lino.about.About.show;
    Lino.about.About.showPanel.superclass.initComponent.call(this);
  }
});

Lino.about.About.show = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "maximizable": true, "modal": true, "maximized": false, "height": Lino.rows2height(20) },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.about.About.showPanel(p);
});

Lino.about.About.showPanel = Ext.extend(Lino.about.About.DetailFormPanel,{
  empty_title: "About",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/about/About",
  initComponent : function() {
    this.ls_detail_handler = Lino.about.About.show;
    Lino.about.About.showPanel.superclass.initComponent.call(this);
  }
});

Lino.about.About.show = new Lino.WindowAction({ "draggable": true, "width": Lino.chars2width(60), "maximizable": true, "modal": true, "maximized": false, "height": Lino.rows2height(20) },function(){
  var p = { "is_main_window": true, "hide_top_toolbar": true };
  return new Lino.about.About.showPanel(p);
});
Lino.about.About.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/about/About","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.system.Home.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/Home","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.system.Home.showPanel = Ext.extend(Lino.system.Home.DetailFormPanel,{
  empty_title: "Home",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/system/Home",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.Home.show;
    Lino.system.Home.showPanel.superclass.initComponent.call(this);
  }
});

Lino.system.Home.show = new Lino.WindowAction({  },function(){
  var p = { "hide_window_title": true, "hide_top_toolbar": true, "is_main_window": true };
  return new Lino.system.Home.showPanel(p);
});

Lino.system.Home.showPanel = Ext.extend(Lino.system.Home.DetailFormPanel,{
  empty_title: "Home",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/system/Home",
  initComponent : function() {
    this.ls_detail_handler = Lino.system.Home.show;
    Lino.system.Home.showPanel.superclass.initComponent.call(this);
  }
});

Lino.system.Home.show = new Lino.WindowAction({  },function(){
  var p = { "hide_window_title": true, "hide_top_toolbar": true, "is_main_window": true };
  return new Lino.system.Home.showPanel(p);
});
Lino.system.Home.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/system/Home","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.Situation.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Situation","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.Situation.showPanel = Ext.extend(Lino.lino.Report.DetailFormPanel,{
  empty_title: "Situation",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/ledger/Situation",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Situation.show;
    Lino.ledger.Situation.showPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Situation.show = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Situation.ParamsPanel({});
  return new Lino.ledger.Situation.showPanel(p);
});

Lino.ledger.Situation.showPanel = Ext.extend(Lino.lino.Report.DetailFormPanel,{
  empty_title: "Situation",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/ledger/Situation",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.Situation.show;
    Lino.ledger.Situation.showPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.Situation.show = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.Situation.ParamsPanel({});
  return new Lino.ledger.Situation.showPanel(p);
});
Lino.ledger.Situation.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/Situation","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.ActivityReport.submit_detail = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ActivityReport","GET",pk,"submit_detail",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

Lino.ledger.ActivityReport.showPanel = Ext.extend(Lino.lino.Report.DetailFormPanel,{
  empty_title: "Activity Report",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/ledger/ActivityReport",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.ActivityReport.show;
    Lino.ledger.ActivityReport.showPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.ActivityReport.show = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ActivityReport.ParamsPanel({});
  return new Lino.ledger.ActivityReport.showPanel(p);
});

Lino.ledger.ActivityReport.showPanel = Ext.extend(Lino.lino.Report.DetailFormPanel,{
  empty_title: "Activity Report",
  hide_navigator: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "itemId": "submit_detail", "menu_item_text": "Save", "tooltip": "Save changes in this form", "panel_btn_handler": function(panel){panel.save()}, "iconCls": "x-tbar-disk", "overflowText": "Save", "auto_save": false }, { "itemId": "do_print", "menu_item_text": "Print", "tooltip": "Print", "panel_btn_handler": Lino.row_action_handler('do_print','GET',null), "iconCls": "x-tbar-printer", "overflowText": "Print", "auto_save": true } ],
  ls_url: "/ledger/ActivityReport",
  initComponent : function() {
    this.ls_detail_handler = Lino.ledger.ActivityReport.show;
    Lino.ledger.ActivityReport.showPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.ActivityReport.show = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  p.params_panel = new Lino.ledger.ActivityReport.ParamsPanel({});
  return new Lino.ledger.ActivityReport.showPanel(p);
});
Lino.ledger.ActivityReport.do_print = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/ActivityReport","GET",pk,"do_print",null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};

// js_render_GridPanel_class lino.BuildMethods
Lino.lino.BuildMethods.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/BuildMethods",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/BuildMethods','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/BuildMethods','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/BuildMethods','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/BuildMethods','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "BuildMethods",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1922 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1923 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1924 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1925 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1926 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.BuildMethods.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.BuildMethods.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.BuildMethods.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.BuildMethods.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.BuildMethods.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.lino.BuildMethods.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.BuildMethods.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/BuildMethods","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.BuildMethods.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/BuildMethods","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.BuildMethods.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/BuildMethods","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.BuildMethods.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.BuildMethods.GridPanel(p);
});

// js_render_GridPanel_class finan.VoucherStates
Lino.finan.VoucherStates.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/finan/VoucherStates",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/finan/VoucherStates','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/VoucherStates','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/finan/VoucherStates','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/finan/VoucherStates','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "States",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1928 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1929 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1930 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1931 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1932 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(finan.VoucherStates.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(finan.VoucherStates.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(finan.VoucherStates.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.VoucherStates.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(finan.VoucherStates.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.finan.VoucherStates.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.finan.VoucherStates.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/VoucherStates","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.VoucherStates.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/VoucherStates","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.VoucherStates.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/finan/VoucherStates","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.finan.VoucherStates.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.finan.VoucherStates.GridPanel(p);
});

// js_render_GridPanel_class ledger.FiscalYears
Lino.ledger.FiscalYears.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/FiscalYears",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/FiscalYears','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/FiscalYears','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/FiscalYears','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/FiscalYears','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Fiscal Years",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1934 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1935 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1936 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1937 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1938 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.FiscalYears.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.FiscalYears.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.FiscalYears.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.FiscalYears.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.FiscalYears.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.ledger.FiscalYears.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.FiscalYears.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/FiscalYears","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.FiscalYears.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/FiscalYears","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.FiscalYears.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/FiscalYears","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.FiscalYears.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.FiscalYears.GridPanel(p);
});

// js_render_GridPanel_class lino.YesNo
Lino.lino.YesNo.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/YesNo",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/YesNo','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/YesNo','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/YesNo','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/YesNo','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Yes or no",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1940 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1941 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1942 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1943 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1944 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.YesNo.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.YesNo.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.YesNo.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.YesNo.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.YesNo.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.lino.YesNo.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.YesNo.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/YesNo","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.YesNo.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/YesNo","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.YesNo.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/YesNo","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.YesNo.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.YesNo.GridPanel(p);
});

// js_render_GridPanel_class vat.TradeTypes
Lino.vat.TradeTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/vat/TradeTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/vat/TradeTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/TradeTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/TradeTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/vat/TradeTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "TradeTypes",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1946 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1947 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1948 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1949 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1950 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.TradeTypes.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.TradeTypes.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.TradeTypes.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(vat.TradeTypes.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(vat.TradeTypes.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.vat.TradeTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.vat.TradeTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/TradeTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.TradeTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/TradeTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.TradeTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/TradeTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.TradeTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.vat.TradeTypes.GridPanel(p);
});

// js_render_GridPanel_class declarations.DeclarationPeriods
Lino.declarations.DeclarationPeriods.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/declarations/DeclarationPeriods",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationPeriods','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationPeriods','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationPeriods','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationPeriods','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "VAT Periods",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1952 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1953 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1954 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1955 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1956 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationPeriods.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationPeriods.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationPeriods.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.DeclarationPeriods.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.DeclarationPeriods.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.declarations.DeclarationPeriods.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.DeclarationPeriods.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationPeriods","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationPeriods.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationPeriods","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationPeriods.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationPeriods","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationPeriods.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.DeclarationPeriods.GridPanel(p);
});

// js_render_GridPanel_class sales.InvoiceStates
Lino.sales.InvoiceStates.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/sales/InvoiceStates",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceStates','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceStates','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceStates','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/sales/InvoiceStates','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "States",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1958 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1959 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1960 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1961 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1962 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(sales.InvoiceStates.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(sales.InvoiceStates.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(sales.InvoiceStates.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(sales.InvoiceStates.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(sales.InvoiceStates.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.sales.InvoiceStates.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.sales.InvoiceStates.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceStates","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceStates.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceStates","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceStates.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/sales/InvoiceStates","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.sales.InvoiceStates.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.sales.InvoiceStates.GridPanel(p);
});

// js_render_GridPanel_class declarations.DeclarationStates
Lino.declarations.DeclarationStates.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/declarations/DeclarationStates",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationStates','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationStates','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationStates','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationStates','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "States",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1964 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1965 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1966 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1967 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1968 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationStates.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationStates.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationStates.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.DeclarationStates.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.DeclarationStates.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.declarations.DeclarationStates.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.DeclarationStates.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationStates","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationStates.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationStates","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationStates.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationStates","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationStates.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.DeclarationStates.GridPanel(p);
});

// js_render_GridPanel_class lino.UserProfiles
Lino.lino.UserProfiles.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/UserProfiles",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/UserProfiles','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/UserProfiles','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/UserProfiles','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/UserProfiles','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "User Profiles",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 11,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "level" }, 'levelHidden', { "name": "office_level" }, 'office_levelHidden', { "name": "accounts_level" }, 'accounts_levelHidden', { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1970 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1971 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1972 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1973 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1974 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var level1975 = new Lino.ChoicesFieldElement({ "disabled": true, "store": [ [ "10", "Guest" ], [ "30", "User" ], [ "40", "Manager" ], [ "50", "Administrator" ] ] });
    var office_level1976 = new Lino.ChoicesFieldElement({ "disabled": true, "store": [ [ "10", "Guest" ], [ "30", "User" ], [ "40", "Manager" ], [ "50", "Administrator" ] ] });
    var accounts_level1977 = new Lino.ChoicesFieldElement({ "disabled": true, "store": [ [ "10", "Guest" ], [ "30", "User" ], [ "40", "Manager" ], [ "50", "Administrator" ] ] });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserProfiles.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserProfiles.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserProfiles.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.UserProfiles.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.UserProfiles.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true }, { "colIndex": 5, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(lino.UserProfiles.level) ", "header": "User Level (System)", "dataIndex": "level", "hidden": true }, { "colIndex": 6, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(lino.UserProfiles.office_level) ", "header": "User Level (Office)", "dataIndex": "office_level", "hidden": true }, { "colIndex": 7, "sortable": false, "width": Lino.chars2width(21), "editable": false, "tooltip": "(lino.UserProfiles.accounts_level) ", "header": "User Level (Accounting)", "dataIndex": "accounts_level", "hidden": true } ];
    Lino.lino.UserProfiles.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.UserProfiles.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserProfiles","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserProfiles.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserProfiles","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserProfiles.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserProfiles","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserProfiles.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.UserProfiles.GridPanel(p);
});

// js_render_GridPanel_class vat.VatRegimes
Lino.vat.VatRegimes.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/vat/VatRegimes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/vat/VatRegimes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/VatRegimes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/VatRegimes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/vat/VatRegimes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "VatRegimes",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1979 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1980 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1981 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1982 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1983 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.VatRegimes.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.VatRegimes.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.VatRegimes.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(vat.VatRegimes.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(vat.VatRegimes.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.vat.VatRegimes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.vat.VatRegimes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/VatRegimes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.VatRegimes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/VatRegimes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.VatRegimes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/VatRegimes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.VatRegimes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.vat.VatRegimes.GridPanel(p);
});

// js_render_GridPanel_class lino.Genders
Lino.lino.Genders.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/Genders",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/Genders','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/Genders','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/Genders','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/Genders','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Genders",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1985 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1986 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1987 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1988 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1989 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.Genders.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.Genders.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.Genders.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.Genders.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.Genders.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.lino.Genders.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.Genders.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/Genders","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.Genders.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/Genders","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.Genders.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/Genders","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.Genders.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.Genders.GridPanel(p);
});

// js_render_GridPanel_class vat.VatClasses
Lino.vat.VatClasses.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/vat/VatClasses",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/vat/VatClasses','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/VatClasses','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/vat/VatClasses','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/vat/VatClasses','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "VatClasses",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1991 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1992 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1993 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp1994 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp1995 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.VatClasses.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.VatClasses.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(vat.VatClasses.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(vat.VatClasses.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(vat.VatClasses.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.vat.VatClasses.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.vat.VatClasses.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/VatClasses","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.VatClasses.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/VatClasses","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.VatClasses.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/vat/VatClasses","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.vat.VatClasses.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.vat.VatClasses.GridPanel(p);
});

// js_render_GridPanel_class declarations.DeclarationFields
Lino.declarations.DeclarationFields.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/declarations/DeclarationFields",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationFields','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationFields','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationFields','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/declarations/DeclarationFields','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "DeclarationFields",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value1997 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name1998 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text1999 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2000 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2001 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationFields.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationFields.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(declarations.DeclarationFields.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.DeclarationFields.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(declarations.DeclarationFields.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.declarations.DeclarationFields.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.declarations.DeclarationFields.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationFields","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationFields.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationFields","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationFields.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/declarations/DeclarationFields","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.declarations.DeclarationFields.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.declarations.DeclarationFields.GridPanel(p);
});

// js_render_GridPanel_class countries.PlaceTypes
Lino.countries.PlaceTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/countries/PlaceTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/countries/PlaceTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/PlaceTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/countries/PlaceTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/countries/PlaceTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "PlaceTypes",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2003 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2004 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text2005 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2006 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2007 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(countries.PlaceTypes.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(countries.PlaceTypes.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(countries.PlaceTypes.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(countries.PlaceTypes.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(countries.PlaceTypes.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.countries.PlaceTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.countries.PlaceTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlaceTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlaceTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlaceTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlaceTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/countries/PlaceTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.countries.PlaceTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.countries.PlaceTypes.GridPanel(p);
});

// js_render_GridPanel_class ledger.VoucherTypes
Lino.ledger.VoucherTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/VoucherTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/VoucherTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/VoucherTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/VoucherTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/VoucherTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "VoucherTypes",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2009 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2010 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text2011 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2012 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2013 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.VoucherTypes.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.VoucherTypes.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.VoucherTypes.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.VoucherTypes.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.VoucherTypes.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.ledger.VoucherTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.VoucherTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/VoucherTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.VoucherTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/VoucherTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.VoucherTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/VoucherTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.VoucherTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.VoucherTypes.GridPanel(p);
});

// js_render_GridPanel_class ledger.InvoiceStates
Lino.ledger.InvoiceStates.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/ledger/InvoiceStates",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceStates','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceStates','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceStates','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/ledger/InvoiceStates','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "States",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2015 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2016 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text2017 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2018 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2019 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.InvoiceStates.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.InvoiceStates.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(ledger.InvoiceStates.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.InvoiceStates.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(ledger.InvoiceStates.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.ledger.InvoiceStates.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.ledger.InvoiceStates.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceStates","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceStates.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceStates","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceStates.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/ledger/InvoiceStates","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.ledger.InvoiceStates.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.ledger.InvoiceStates.GridPanel(p);
});

// js_render_GridPanel_class accounts.AccountTypes
Lino.accounts.AccountTypes.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/accounts/AccountTypes",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/accounts/AccountTypes','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/AccountTypes','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/accounts/AccountTypes','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/accounts/AccountTypes','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "AccountTypes",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2021 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2022 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text2023 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2024 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2025 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(accounts.AccountTypes.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(accounts.AccountTypes.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(accounts.AccountTypes.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(accounts.AccountTypes.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(accounts.AccountTypes.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.accounts.AccountTypes.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.accounts.AccountTypes.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountTypes","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountTypes.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountTypes","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountTypes.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/accounts/AccountTypes","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.accounts.AccountTypes.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.accounts.AccountTypes.GridPanel(p);
});

// js_render_GridPanel_class lino.UserGroups
Lino.lino.UserGroups.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/UserGroups",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/UserGroups','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/UserGroups','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/UserGroups','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/UserGroups','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "User Groups",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2027 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2028 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text2029 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2030 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2031 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserGroups.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserGroups.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserGroups.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.UserGroups.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.UserGroups.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.lino.UserGroups.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.UserGroups.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserGroups","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserGroups.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserGroups","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserGroups.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserGroups","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserGroups.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.UserGroups.GridPanel(p);
});

// js_render_GridPanel_class lino.UserLevels
Lino.lino.UserLevels.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/UserLevels",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/UserLevels','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/UserLevels','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/UserLevels','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/UserLevels','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "User Levels",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "short_name" }, { "name": "text" }, { "name": "remark" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2033 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2034 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var short_name2035 = new Ext.form.TextField({ "disabled": true, "boxMinWidth": Lino.chars2width(2), "maxLength": 2 });
    var text2036 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2037 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserLevels.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserLevels.name) " }, { "header": "Short name", "colIndex": 2, "sortable": false, "dataIndex": "short_name", "width": Lino.chars2width(5), "editable": false, "tooltip": "(lino.UserLevels.short_name) Used when defining UserProfiles" }, { "header": "text", "colIndex": 3, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.UserLevels.text) " }, { "header": "Remark", "colIndex": 4, "sortable": false, "dataIndex": "remark", "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.UserLevels.remark) " } ];
    Lino.lino.UserLevels.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.UserLevels.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserLevels","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserLevels.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserLevels","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserLevels.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/UserLevels","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.UserLevels.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.UserLevels.GridPanel(p);
});

// js_render_GridPanel_class lino.PeriodEvents
Lino.lino.PeriodEvents.GridPanel = Ext.extend(Lino.GridPanel,{
  ls_url : "/lino/PeriodEvents",
  ls_bbar_actions : [ { "panel_btn_handler": Lino.list_action_handler('/lino/PeriodEvents','as_pdf','GET',Lino.get_current_grid_config), "xtype": "splitbutton", "text": null, "menu": [ { "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/PeriodEvents','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "overflowText": "Table (landscape)", "auto_save": true }, { "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "tooltip": "Show this table as a pdf document", "panel_btn_handler": Lino.list_action_handler('/lino/PeriodEvents','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "overflowText": "Table (portrait)", "auto_save": true } ], "iconCls": "x-tbar-pdf", "menu_item_text": "Table (landscape)" }, { "itemId": "export_excel", "menu_item_text": "Export to .xls", "tooltip": "Export this table as an .xls document", "panel_btn_handler": Lino.list_action_handler('/lino/PeriodEvents','export_excel','GET',Lino.get_current_grid_config), "iconCls": "x-tbar-csv", "overflowText": "Export to .xls", "auto_save": true } ],
  cell_edit : true,
  title : "Observed events",
  page_length : 20,
  gc_name : 0,
  stripeRows : true,
  disabled_actions_index : 5,
  ls_store_fields : [ { "name": "value" }, { "name": "name" }, { "name": "text" }, { "name": "remark" }, { "name": "workflow_buttons" }, { "name": "disabled_actions" } ],
  ls_grid_configs : [  ],
  viewConfig : { "forceFit": true, "emptyText": "No data to display." },
  disable_editing : true,
  initComponent : function() {
    var ww = this.containing_window;
    var value2039 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var name2040 = new Ext.form.TextField({ "disabled": true, "maxLength": 20 });
    var text2041 = new Ext.form.TextField({ "disabled": true, "maxLength": 50 });
    var remark_disp2042 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    var workflow_buttons_disp2043 = new Ext.form.DisplayField({ "disabled": true, "value": "<br/>", "always_enabled": true });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "header": "value", "colIndex": 0, "sortable": false, "dataIndex": "value", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.PeriodEvents.value) " }, { "header": "name", "colIndex": 1, "sortable": false, "dataIndex": "name", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.PeriodEvents.name) " }, { "header": "text", "colIndex": 2, "sortable": false, "dataIndex": "text", "width": Lino.chars2width(22), "editable": false, "tooltip": "(lino.PeriodEvents.text) " }, { "colIndex": 3, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.PeriodEvents.remark) ", "header": "Remark", "dataIndex": "remark", "hidden": true }, { "colIndex": 4, "sortable": false, "width": Lino.chars2width(31), "editable": false, "tooltip": "(lino.PeriodEvents.workflow_buttons) ", "header": "Workflow", "dataIndex": "workflow_buttons", "hidden": true } ];
    Lino.lino.PeriodEvents.GridPanel.superclass.initComponent.call(this);
  }
});

Lino.lino.PeriodEvents.as_pdf = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/PeriodEvents","GET",pk,"as_pdf",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.PeriodEvents.as_pdf_p = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/PeriodEvents","GET",pk,"as_pdf_p",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.PeriodEvents.export_excel = function(rp,pk) { 
  var h = function() { 
    Lino.run_row_action(rp,"/lino/PeriodEvents","GET",pk,"export_excel",Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true,h); else h();
};
Lino.lino.PeriodEvents.grid = new Lino.WindowAction({  },function(){
  var p = { "is_main_window": true };
  return new Lino.lino.PeriodEvents.GridPanel(p);
});
